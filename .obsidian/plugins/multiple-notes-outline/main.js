/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  FILE_TITLE_BACKGROUND_COLOR: () => FILE_TITLE_BACKGROUND_COLOR,
  FILE_TITLE_BACKGROUND_COLOR_HOVER: () => FILE_TITLE_BACKGROUND_COLOR_HOVER,
  default: () => MultipleNotesOutlinePlugin3
});
var import_obsidian12 = __toModule(require("obsidian"));

// src/fileView.ts
var import_obsidian7 = __toModule(require("obsidian"));
var import_obsidian8 = __toModule(require("obsidian"));

// src/getTargetFiles.ts
var import_obsidian = __toModule(require("obsidian"));
function getOutgoingLinkFiles(app2, file, info, cache) {
  var _a;
  let files = [];
  for (let i = 0; i < ((_a = info.frontmatterLinks) == null ? void 0 : _a.length); i++) {
    const fileobj = app2.metadataCache.getFirstLinkpathDest(info.frontmatterLinks[i].link, file.path);
    if (fileobj instanceof import_obsidian.TFile) {
      files.push(fileobj);
    }
  }
  for (let i = 0; i < cache.length; i++) {
    if (cache[i].typeOfElement != "link") {
      continue;
    }
    const fileobj = app2.metadataCache.getFirstLinkpathDest(cache[i].link, file.path);
    if (fileobj instanceof import_obsidian.TFile) {
      files.push(fileobj);
    }
  }
  return files;
}
function getBacklinkFiles(app2, file) {
  let files = [];
  let backlinks = app2.metadataCache.getBacklinksForFile(file).data;
  for (const key in backlinks) {
    const fileobj = app2.vault.getAbstractFileByPath(key);
    if (fileobj instanceof import_obsidian.TFile) {
      files.push(fileobj);
    }
  }
  return files;
}
function getBacklinkFilesDataview(app2, file, isDataviewEnabled) {
  var _a, _b, _c, _d;
  let files = [];
  if (!isDataviewEnabled) {
    return getBacklinkFiles(app2, file);
  }
  let backlinks = (_d = (_c = (_b = (_a = app2.plugins.plugins.dataview) == null ? void 0 : _a.api) == null ? void 0 : _b.pages(`"${file.path}"`)) == null ? void 0 : _c.values[0]) == null ? void 0 : _d.file.inlinks.values;
  if (!backlinks) {
    return getBacklinkFiles(app2, file);
  }
  for (let i = 0; i < backlinks.length; i++) {
    const fileobj = app2.vault.getAbstractFileByPath(backlinks[i].path);
    if (fileobj instanceof import_obsidian.TFile) {
      files.push(fileobj);
    }
  }
  return files;
}

// src/getOutline.ts
var import_obsidian2 = __toModule(require("obsidian"));
function initFileStatus(files) {
  let status = [];
  for (let i = 0; i < files.length; i++) {
    const flagFolder = Boolean(files[i] instanceof import_obsidian2.TFolder);
    status.push({
      isFolded: false,
      isTop: false,
      duplicated: {
        main: false,
        outgoing: false,
        backlink: false,
        self: false
      },
      outlineReady: false,
      isFolder: flagFolder
    });
  }
  return status;
}
function getFileInfo(app2, file, settings, forceGetBacklinks = false, isDataviewEnabled) {
  return __async(this, null, function* () {
    const content = yield this.app.vault.cachedRead(file);
    const lines = content.split("\n");
    const backlinkFiles = settings.showBacklinks || forceGetBacklinks ? getBacklinkFilesDataview(app2, file, isDataviewEnabled) : void 0;
    const info = {
      lines,
      numOfLines: lines.length,
      backlinks: backlinkFiles,
      frontmatterLinks: void 0
    };
    return info;
  });
}
function getOutline(app2, file, status, info, settings) {
  return __async(this, null, function* () {
    let data = [];
    const cache = app2.metadataCache.getFileCache(file);
    if (!cache) {
      return null;
    }
    info.frontmatterLinks = cache == null ? void 0 : cache.frontmatterLinks;
    if (cache.hasOwnProperty("headings")) {
      for (let j = 0; j < cache.headings.length; j++) {
        const element = {
          typeOfElement: "heading",
          position: cache.headings[j].position,
          displayText: cache.headings[j].heading,
          level: cache.headings[j].level
        };
        data.push(element);
      }
    }
    if (cache.hasOwnProperty("links")) {
      for (let j = 0; j < cache.links.length; j++) {
        const element = {
          typeOfElement: "link",
          position: cache.links[j].position,
          displayText: cache.links[j].displayText == "" ? cache.links[j].original.substring(1, cache.links[j].original.indexOf("]")) : cache.links[j].displayText,
          link: cache.links[j].link
        };
        data.push(element);
      }
    }
    if (cache.hasOwnProperty("listItems")) {
      for (let j = 0; j < cache.listItems.length; j++) {
        let listLevel = 0;
        if (cache.listItems[j].parent > 0) {
          listLevel = 2;
        } else if (j > 0) {
          if (!(Math.abs(cache.listItems[j].parent) == cache.listItems[j].position.start.line) && cache.listItems[j].position.start.line - cache.listItems[j - 1].position.start.line == 1) {
            listLevel = 1;
          }
        }
        const element = {
          typeOfElement: "listItems",
          position: cache.listItems[j].position,
          displayText: info == null ? void 0 : info.lines[cache.listItems[j].position.start.line].replace(/^(\s|\t)*-\s(\[.+\]\s)*/, ""),
          level: listLevel,
          task: cache.listItems[j].task
        };
        data.push(element);
      }
    }
    if (cache.hasOwnProperty("tags")) {
      for (let j = 0; j < cache.tags.length; j++) {
        const element = {
          typeOfElement: "tag",
          position: cache.tags[j].position,
          displayText: cache.tags[j].tag.substring(1)
        };
        data.push(element);
        for (const value of settings.tagsAOT) {
          if (value && cache.tags[j].tag == value) {
            status.isTop = true;
          }
        }
      }
    }
    data.sort((a, b) => {
      return a.position.start.offset - b.position.start.offset;
    });
    return data;
  });
}

// src/util.ts
var import_obsidian3 = __toModule(require("obsidian"));
function cleanRelatedFiles(srcFile, dstFile, settings) {
  if (Object.keys(settings.relatedFiles[srcFile.path][dstFile.path]).length == 0) {
    delete settings.relatedFiles[srcFile.path][dstFile.path];
  }
  if (Object.keys(settings.relatedFiles[srcFile.path]).length === 0) {
    delete settings.relatedFiles[srcFile.path];
  }
}
function checkFlag(srcFile, dstFile, flag, settings) {
  var _a, _b;
  return (_b = (_a = settings.relatedFiles[srcFile.path]) == null ? void 0 : _a[dstFile.path]) == null ? void 0 : _b[flag];
}
function addFlag(srcFile, dstFile, flag, settings) {
  if (!settings.relatedFiles.hasOwnProperty(srcFile.path)) {
    settings.relatedFiles[srcFile.path] = {};
  }
  if (!settings.relatedFiles[srcFile.path].hasOwnProperty(dstFile.path)) {
    settings.relatedFiles[srcFile.path][dstFile.path] = {};
  }
  settings.relatedFiles[srcFile.path][dstFile.path][flag] = true;
}
function removeFlag(srcFile, dstFile, flag, settings) {
  delete settings.relatedFiles[srcFile.path][dstFile.path][flag];
  cleanRelatedFiles(srcFile, dstFile, settings);
}
function handleRenameRelatedFiles(renamedFile, oldPath, settings) {
  let renamed = false;
  for (let srcFilePath in settings.relatedFiles) {
    for (let dstFilePath in settings.relatedFiles[srcFilePath]) {
      if (dstFilePath == oldPath) {
        settings.relatedFiles[srcFilePath][renamedFile.path] = settings.relatedFiles[srcFilePath][dstFilePath];
        delete settings.relatedFiles[srcFilePath][dstFilePath];
        renamed = true;
      }
    }
    if (srcFilePath == oldPath) {
      settings.relatedFiles[renamedFile.path] = settings.relatedFiles[srcFilePath];
      delete settings.relatedFiles[srcFilePath];
      renamed = true;
    }
  }
  return renamed;
}
function handleDeleteRelatedFiles(deletedFile, settings) {
  let deleted = false;
  for (let srcFilePath in settings.relatedFiles) {
    for (let dstFilePath in settings.relatedFiles[srcFilePath]) {
      if (dstFilePath == deletedFile.path) {
        delete settings.relatedFiles[srcFilePath][dstFilePath];
        deleted = true;
      }
    }
    if (srcFilePath == deletedFile.path) {
      delete settings.relatedFiles[srcFilePath];
      deleted = true;
    }
  }
  return deleted;
}
function getTheme() {
  var _a;
  const theme = ((_a = app.vault.config) == null ? void 0 : _a.theme) === "moonstone" ? "light" : "dark";
  return theme;
}
function setNoteTitleBackgroundColor(theme, settings) {
  switch (settings.noteTitleBackgroundColor) {
    case "none":
      break;
    case "custom":
      document.getElementsByTagName("body")[0].style.setProperty("--MNO-filetitle-background", settings.customNoteTitleBackgroundColor[theme]);
      document.getElementsByTagName("body")[0].style.setProperty("--MNO-filetitle-background-hover", settings.customNoteTitleBackgroundColorHover[theme]);
      break;
    default:
      document.getElementsByTagName("body")[0].style.setProperty("--MNO-filetitle-background", FILE_TITLE_BACKGROUND_COLOR[settings.noteTitleBackgroundColor][theme]);
      document.getElementsByTagName("body")[0].style.setProperty("--MNO-filetitle-background-hover", FILE_TITLE_BACKGROUND_COLOR_HOVER[settings.noteTitleBackgroundColor][theme]);
      break;
  }
}
function sortFileOrder(order, files, status, info, settings) {
  switch (settings.sortType) {
    case "alphabetAscending":
      order.sort((val1, val2) => {
        if (status[val1].isFolder != status[val2].isFolder) {
          return status[val1].isFolder == true ? 1 : -1;
        }
        return files[val1].name.localeCompare(files[val2].name);
      });
      break;
    case "alphabetDescending":
      order.sort((val1, val2) => {
        if (status[val1].isFolder != status[val2].isFolder) {
          return status[val1].isFolder == true ? 1 : -1;
        }
        return files[val2].name.localeCompare(files[val1].name);
      });
      break;
    case "ctimeDescending":
      order.sort((val1, val2) => {
        if (status[val1].isFolder != status[val2].isFolder) {
          return status[val1].isFolder == true ? 1 : -1;
        }
        return files[val2].stat.ctime - files[val1].stat.ctime;
      });
      break;
    case "ctimeAscending":
      order.sort((val1, val2) => {
        if (status[val1].isFolder != status[val2].isFolder) {
          return status[val1].isFolder == true ? 1 : -1;
        }
        return files[val1].stat.ctime - files[val2].stat.ctime;
      });
      break;
    case "mtimeDescending":
      order.sort((val1, val2) => {
        if (status[val1].isFolder != status[val2].isFolder) {
          return status[val1].isFolder == true ? 1 : -1;
        }
        return files[val2].stat.mtime - files[val1].stat.mtime;
      });
      break;
    case "mtimeAscending":
      order.sort((val1, val2) => {
        if (status[val1].isFolder != status[val2].isFolder) {
          return status[val1].isFolder == true ? 1 : -1;
        }
        return files[val1].stat.mtime - files[val2].stat.mtime;
      });
      break;
    default:
      break;
  }
}
var ModalConfirm = class extends import_obsidian3.Modal {
  constructor(app2, plugin, instruction, onSubmit) {
    super(app2);
    this.plugin = plugin;
    this.instruction = instruction;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("br");
    contentEl.createEl("p", {
      text: this.instruction
    });
    new import_obsidian3.Setting(contentEl).addButton((btn) => btn.setButtonText("Execute").setCta().onClick(() => __async(this, null, function* () {
      this.execute();
    }))).addButton((btn) => btn.setButtonText("Cancel").onClick(() => {
      this.close();
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  execute() {
    return __async(this, null, function* () {
      this.close();
      this.onSubmit();
    });
  }
};
function checkRelatedFiles(app2, settings) {
  for (let srcFilePath in settings.relatedFiles) {
    for (let dstFilePath in settings.relatedFiles[srcFilePath]) {
      if (!app2.vault.getAbstractFileByPath(dstFilePath)) {
        delete settings.relatedFiles[srcFilePath][dstFilePath];
        if (Object.keys(settings.relatedFiles[srcFilePath]).length === 0) {
          delete settings.relatedFiles[srcFilePath];
        }
      }
    }
    if (!app2.vault.getAbstractFileByPath(srcFilePath)) {
      delete settings.relatedFiles[srcFilePath];
    }
  }
}
function getSubpathPosition(app2, file, subpath) {
  var _a, _b;
  const cache = app2.metadataCache.getFileCache(file);
  if (!cache) {
    return null;
  }
  const checkpath = subpath.replace(/[#^]/g, "");
  if ((_a = cache.headings) == null ? void 0 : _a.length) {
    const index = cache.headings.findIndex((element) => element.heading.replace(/[#^]/g, "") == checkpath);
    if (index >= 0) {
      return cache.headings[index].position;
    }
  }
  if ((_b = cache.sections) == null ? void 0 : _b.length) {
    const index = cache.sections.findIndex((element) => {
      var _a2;
      return ((_a2 = element.id) == null ? void 0 : _a2.replace(/[#^]/g, "")) == checkpath;
    });
    if (index >= 0) {
      return cache.sections[index].position;
    }
  }
  return null;
}
function checkDataview(app2) {
  if (app2.plugins.plugins["dataview"]) {
    return true;
  } else {
    return false;
  }
}

// src/drawUI.ts
var import_obsidian5 = __toModule(require("obsidian"));

// src/FavAndRecent.ts
var import_obsidian4 = __toModule(require("obsidian"));
function updateFavAndRecent(targetPath, category, suggestType) {
  return __async(this, null, function* () {
    this.settings[suggestType][category] = this.settings[suggestType][category].filter((value) => targetPath !== value);
    this.settings[suggestType][category].unshift(targetPath);
    if (this.settings.recent[category].length > this.settings.numOfRecentFiles) {
      const numToDelete = this.settings.recent[category].length - this.settings.numOfRecentFiles;
      for (let i = 0; i < numToDelete; i++) {
        this.settings.recent[category].pop();
      }
    }
    yield this.plugin.saveSettings();
  });
}
function deleteFavAndRecent(targetPath, category, suggestType) {
  return __async(this, null, function* () {
    this.settings[suggestType][category] = this.settings[suggestType][category].filter((value) => targetPath !== value);
    yield this.plugin.saveSettings();
  });
}
var ModalJump = class extends import_obsidian4.SuggestModal {
  constructor(app2, view, category, suggestType, onSubmit) {
    super(app2);
    this.view = view;
    this.category = category;
    this.suggestType = suggestType;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    this.setPlaceholder("Jump to " + this.suggestType + " " + this.category + "s");
    this.setInstructions([
      { command: "Enter", purpose: "Jump to item" },
      { command: "Ctrl + Enter", purpose: "Add to Favorites" },
      { command: "Delete", purpose: "Remove from the list" },
      { command: "ESC", purpose: "Dismiss" }
    ]);
    this.scope.register(["Ctrl"], "Enter", (evt) => {
      var _a;
      const item = (_a = this.chooser.values) == null ? void 0 : _a[this.chooser.selectedItem];
      updateFavAndRecent.call(this.view, item, this.category, "favorite");
      this.close();
    });
    this.scope.register([], "Delete", (evt) => {
      var _a;
      const item = (_a = this.chooser.values) == null ? void 0 : _a[this.chooser.selectedItem];
      deleteFavAndRecent.call(this.view, item, this.category, this.suggestType);
      this.close();
    });
    super.onOpen();
  }
  getSuggestions(query) {
    return this.view.plugin.settings[this.suggestType][this.category].filter((target) => target.toLowerCase().includes(query.toLowerCase()));
  }
  renderSuggestion(value, el) {
    el.createEl("div", { text: value });
  }
  onChooseSuggestion(item, evt) {
    return __async(this, null, function* () {
      updateFavAndRecent.call(this.view, item, this.category, this.suggestType);
      yield this.view.plugin.saveSettings();
      this.onSubmit(item);
    });
  }
};
function handleRenameFavAndRecentFiles(renamedFile, oldPath, settings) {
  let renameType = renamedFile instanceof import_obsidian4.TFile ? "file" : "folder";
  let renamed = false;
  for (let i = 0; i < settings.recent[renameType].length; i++) {
    if (settings.recent[renameType][i] == oldPath) {
      settings.recent[renameType][i] = renamedFile.path;
      renamed = true;
    }
  }
  for (let i = 0; i < settings.favorite[renameType].length; i++) {
    if (settings.favorite[renameType][i] == oldPath) {
      settings.favorite[renameType][i] = renamedFile.path;
      renamed = true;
    }
  }
  return renamed;
}
function handleDeleteFavAndRecentFiles(deletedFile, settings) {
  let deleteType = deletedFile instanceof import_obsidian4.TFile ? "file" : "folder";
  let deleted = false;
  for (let i = 0; i < settings.recent[deleteType].length; i++) {
    if (settings.recent[deleteType][i] == deletedFile.path) {
      settings.recent[deleteType].splice(i, 1);
      deleted = true;
    }
  }
  for (let i = 0; i < settings.favorite[deleteType].length; i++) {
    if (settings.favorite[deleteType][i] == deletedFile.path) {
      settings.favorite[deleteType].splice(i, 1);
      deleted = true;
    }
  }
  return deleted;
}
function checkFavAndRecentFiles(app2, settings, checkType) {
  for (let i = 0; i < settings.favorite[checkType].length; i++) {
    if (!app2.vault.getAbstractFileByPath(settings.favorite[checkType][i])) {
      settings.favorite[checkType].splice(i, 1);
    }
  }
  for (let i = 0; i < settings.recent[checkType].length; i++) {
    if (!app2.vault.getAbstractFileByPath(settings.recent[checkType][i])) {
      settings.recent[checkType].splice(i, 1);
    }
  }
}

// src/drawUI.ts
function drawUI() {
  const navHeader = createDiv("nav-header");
  const navButtonContainer = navHeader.createDiv("nav-buttons-container");
  uiUpdate.call(this, navButtonContainer);
  uiFavAndRecent.call(this, navButtonContainer);
  uiSetting.call(this, navButtonContainer);
  uiToggleHeading.call(this, navButtonContainer);
  uiToggleLink.call(this, navButtonContainer);
  uiToggleListItems.call(this, navButtonContainer);
  uiToggleBacklinks.call(this, navButtonContainer);
  uiCollapse.call(this, navButtonContainer);
  this.contentEl.empty();
  this.contentEl.appendChild(navHeader);
}
function drawUIFolderView() {
  const navHeader = createDiv("nav-header");
  const navButtonContainer = navHeader.createDiv("nav-buttons-container");
  uiUpdateFolderView.call(this, navButtonContainer);
  uiFavAndRecent.call(this, navButtonContainer);
  uiSettingFolderView.call(this, navButtonContainer);
  uiToggleHeading.call(this, navButtonContainer);
  uiToggleLink.call(this, navButtonContainer);
  uiToggleListItems.call(this, navButtonContainer);
  uiToggleBacklinks.call(this, navButtonContainer);
  uiCollapse.call(this, navButtonContainer);
  this.contentEl.empty();
  this.contentEl.appendChild(navHeader);
}
function uiUpdate(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  if (this.pinnedMode == false) {
    navActionButton.ariaLabel = "update view";
    (0, import_obsidian5.setIcon)(navActionButton, "refresh-cw");
    navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
      const file = this.app.workspace.getActiveFile();
      if (file instanceof import_obsidian5.TFile) {
        this.activeFile = file;
        this.targetFiles.main[0] = this.activeFile;
        updateFavAndRecent.call(this, this.activeFile.path, "file", "recent");
        this.refreshView(true, true);
      }
    }));
    navActionButton.addEventListener("contextmenu", (event) => {
      const menu = new import_obsidian5.Menu();
      menu.addItem((item) => item.setTitle("Pin").setIcon("pin").onClick(() => {
        this.pinnedMode = true;
        this.refreshView(false, false);
      }));
      menu.showAtMouseEvent(event);
    });
  } else {
    navActionButton.ariaLabel = "unpin and update view";
    (0, import_obsidian5.setIcon)(navActionButton, "pin");
    navActionButton.classList.add("is-active");
    navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
      this.pinnedMode = false;
      const file = this.app.workspace.getActiveFile();
      if (file instanceof import_obsidian5.TFile) {
        this.activeFile = file;
        this.targetFiles.main[0] = this.activeFile;
        updateFavAndRecent.call(this, this.activeFile.path, "file", "recent");
        this.refreshView(true, true);
      }
    }));
    navActionButton.addEventListener("contextmenu", (event) => {
      const menu = new import_obsidian5.Menu();
      menu.addItem((item) => item.setTitle("Unpin").setIcon("pin-off").onClick(() => {
        this.pinnedMode = false;
        this.refreshView(false, false);
      }));
      menu.showAtMouseEvent(event);
    });
  }
}
function uiUpdateFolderView(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "update view";
  (0, import_obsidian5.setIcon)(navActionButton, "refresh-cw");
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    const file = this.app.workspace.getActiveFile();
    if (file instanceof import_obsidian5.TFile) {
      this.targetFolder = file.parent;
      this.hasMainChanged = true;
      updateFavAndRecent.call(this, this.targetFolder.path, "folder", "recent");
      this.refreshView(true, true);
    }
  }));
}
function uiFavAndRecent(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "favorite/recent";
  (0, import_obsidian5.setIcon)(navActionButton, "bookmark");
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    const onSubmit = (target) => {
      const targetObj = this.app.vault.getAbstractFileByPath(target);
      if (targetObj instanceof import_obsidian5.TFile) {
        this.targetFiles.main[0] = targetObj;
        this.hasMainChanged = true;
        if (this.settings.pinAfterJump && this.settings.autoupdateFileView) {
          this.pinnedMode = true;
        }
        updateFavAndRecent.call(this, targetObj.path, "file", "recent");
        this.refreshView(true, true);
      }
      if (targetObj instanceof import_obsidian5.TFolder) {
        this.targetFolder = targetObj;
        this.hasMainChanged = true;
        updateFavAndRecent.call(this, targetObj.path, "folder", "recent");
        this.refreshView(true, true);
      }
    };
    new ModalJump(this.app, this, this.viewType, "favorite", onSubmit).open();
  }));
  navActionButton.addEventListener("contextmenu", (event) => __async(this, null, function* () {
    event.preventDefault();
    const onSubmit = (target) => {
      const targetObj = this.app.vault.getAbstractFileByPath(target);
      if (targetObj instanceof import_obsidian5.TFile) {
        this.targetFiles.main[0] = targetObj;
        this.hasMainChanged = true;
        if (this.settings.pinAfterJump && this.settings.autoupdateFileView) {
          this.pinnedMode = true;
        }
        updateFavAndRecent.call(this, targetObj.path, "file", "recent");
        this.refreshView(true, true);
      }
      if (targetObj instanceof import_obsidian5.TFolder) {
        this.targetFolder = targetObj;
        this.hasMainChanged = true;
        updateFavAndRecent.call(this, targetObj.path, "folder", "recent");
        this.refreshView(true, true);
      }
    };
    new ModalJump(this.app, this, this.viewType, "recent", onSubmit).open();
  }));
}
function uiSetting(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "open settings";
  (0, import_obsidian5.setIcon)(navActionButton, "settings");
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    this.app.setting.open();
    this.app.setting.openTabById(this.plugin.manifest.id);
  }));
  navActionButton.addEventListener("contextmenu", (event) => {
    const menu = new import_obsidian5.Menu();
    for (const category in this.settings.showFiles) {
      const icon2 = this.settings.showFiles[category] == true ? "check" : "";
      menu.addItem((item) => item.setTitle(`show ${category} section`).setIcon(icon2).onClick(() => __async(this, null, function* () {
        this.settings.showFiles[category] = !this.settings.showFiles[category];
        yield this.plugin.saveSettings();
        this.refreshView(false, false);
      })));
    }
    menu.addSeparator();
    for (const element in this.settings.showElements) {
      const icon2 = this.settings.showElements[element] == true ? "check" : "";
      menu.addItem((item) => item.setTitle(`show ${element}`).setIcon(icon2).onClick(() => __async(this, null, function* () {
        this.settings.showElements[element] = !this.settings.showElements[element];
        yield this.plugin.saveSettings();
        this.refreshView(false, false);
      })));
    }
    if (this.settings.showElements.listItems) {
      const icon2 = this.settings.taskOnly ? "check" : "";
      menu.addItem((item) => item.setTitle("tasks only").setIcon(icon2).onClick(() => __async(this, null, function* () {
        this.settings.taskOnly = !this.settings.taskOnly;
        yield this.plugin.saveSettings();
        this.refreshView(false, false);
      })));
    }
    let icon = this.settings.showBacklinks ? "check" : "";
    menu.addItem((item) => item.setTitle("show 2-hop backlinks").setIcon(icon).onClick(() => __async(this, null, function* () {
      this.settings.showBacklinks = !this.settings.showBacklinks;
      yield this.plugin.saveSettings();
      this.refreshView(false, false);
    })));
    menu.addSeparator();
    icon = this.settings.tooltipPreview ? "check" : "";
    menu.addItem((item) => item.setTitle("show tooltip preview").setIcon(icon).onClick(() => __async(this, null, function* () {
      this.settings.tooltipPreview = !this.settings.tooltipPreview;
      yield this.plugin.saveSettings();
      this.refreshView(false, false);
    })));
    menu.showAtMouseEvent(event);
  });
}
function uiSettingFolderView(parentEl, instance) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "open settings";
  (0, import_obsidian5.setIcon)(navActionButton, "settings");
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    this.app.setting.open();
    this.app.setting.openTabById(this.plugin.manifest.id);
  }));
  navActionButton.addEventListener("contextmenu", (event) => {
    const menu = new import_obsidian5.Menu();
    for (const element in this.settings.showElements) {
      const icon2 = this.settings.showElements[element] == true ? "check" : "";
      menu.addItem((item) => item.setTitle(`show ${element}`).setIcon(icon2).onClick(() => __async(this, null, function* () {
        this.settings.showElements[element] = !this.settings.showElements[element];
        yield this.plugin.saveSettings();
        this.refreshView(false, false);
      })));
    }
    if (this.settings.showElements.listItems) {
      const icon2 = this.settings.taskOnly ? "check" : "";
      menu.addItem((item) => item.setTitle("tasks only").setIcon(icon2).onClick(() => __async(this, null, function* () {
        this.settings.taskOnly = !this.settings.taskOnly;
        yield this.plugin.saveSettings();
        this.refreshView(false, false);
      })));
    }
    let icon = this.settings.showBacklinks ? "check" : "";
    menu.addItem((item) => item.setTitle("show 2-hop backlinks").setIcon(icon).onClick(() => __async(this, null, function* () {
      this.settings.showBacklinks = !this.settings.showBacklinks;
      yield this.plugin.saveSettings();
      this.refreshView(false, false);
    })));
    menu.addSeparator();
    icon = this.settings.tooltipPreview ? "check" : "";
    menu.addItem((item) => item.setTitle("show tooltip preview").setIcon(icon).onClick(() => __async(this, null, function* () {
      this.settings.tooltipPreview = !this.settings.tooltipPreview;
      yield this.plugin.saveSettings();
      this.refreshView(false, false);
    })));
    menu.addSeparator();
    icon = this.settings.collapseFolder ? "check" : "";
    menu.addItem((item) => item.setTitle("collapse subfolder").setIcon(icon).onClick(() => __async(this, null, function* () {
      this.settings.collapseFolder = !this.settings.collapseFolder;
      yield this.plugin.saveSettings();
      this.refreshView(true, true);
    })));
    menu.showAtMouseEvent(event);
  });
}
function uiToggleHeading(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "toggle headings";
  (0, import_obsidian5.setIcon)(navActionButton, "heading");
  if (this.settings.showElements.heading) {
    navActionButton.classList.add("is-active");
  }
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    this.settings.showElements.heading = !this.settings.showElements.heading;
    yield this.plugin.saveSettings();
    this.refreshView(false, false);
  }));
  navActionButton.addEventListener("contextmenu", (event) => {
    const menu = new import_obsidian5.Menu();
    menu.addItem((item) => item.setTitle("heading level to display"));
    for (let i = 0; i < 6; i++) {
      const dispText = i == 0 ? "H1" : "H1 - H" + (i + 1).toString();
      menu.addItem((item) => item.setTitle(dispText).onClick(() => __async(this, null, function* () {
        for (let j = 0; j < 6; j++) {
          if (j <= i) {
            this.settings.headingLevel[j] = true;
          } else {
            this.settings.headingLevel[j] = false;
          }
        }
        yield this.plugin.saveSettings();
        this.refreshView(false, false);
      })));
    }
    menu.showAtMouseEvent(event);
  });
}
function uiToggleLink(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "toggle links";
  (0, import_obsidian5.setIcon)(navActionButton, "link");
  if (this.settings.showElements.link) {
    navActionButton.classList.add("is-active");
  }
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    this.settings.showElements.link = !this.settings.showElements.link;
    yield this.plugin.saveSettings();
    this.refreshView(false, false);
  }));
}
function uiToggleListItems(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "toggle list items";
  (0, import_obsidian5.setIcon)(navActionButton, "list");
  if (this.settings.showElements.listItems) {
    navActionButton.classList.add("is-active");
  }
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    this.settings.showElements.listItems = !this.settings.showElements.listItems;
    yield this.plugin.saveSettings();
    this.refreshView(false, false);
  }));
}
function uiToggleBacklinks(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  navActionButton.ariaLabel = "toggle backlinks";
  (0, import_obsidian5.setIcon)(navActionButton, "links-coming-in");
  if (this.settings.showBacklinks) {
    navActionButton.classList.add("is-active");
  }
  navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
    this.settings.showBacklinks = !this.settings.showBacklinks;
    yield this.plugin.saveSettings();
    this.refreshView(false, false);
  }));
}
function uiCollapse(parentEl) {
  let navActionButton = parentEl.createDiv("clickable-icon nav-action-button");
  if (this.collapseAll) {
    navActionButton.classList.add("is-active");
  }
  if (!this.collapseAll) {
    navActionButton.ariaLabel = "collapse all";
    (0, import_obsidian5.setIcon)(navActionButton, "chevrons-down-up");
    navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
      this.collapseAll = true;
      this.refreshView(false, false);
    }));
  } else {
    navActionButton.ariaLabel = "expand";
    (0, import_obsidian5.setIcon)(navActionButton, "chevrons-down-up");
    navActionButton.addEventListener("click", (event) => __async(this, null, function* () {
      this.collapseAll = false;
      this.refreshView(false, false);
    }));
  }
}

// src/constructDOM.ts
var import_obsidian6 = __toModule(require("obsidian"));
function constructNoteDOM(files, status, info, data, parentEl, category, aotEl, srcFile, order) {
  var _a, _b, _c;
  for (let i = 0; i < files.length; i++) {
    const si = order[i];
    if (Object.values(status[si].duplicated).includes(true) && this.settings.hideDuplicated) {
      continue;
    }
    const noteType = status[si].isFolder ? "folder" : "file";
    const belongsAOT = Boolean(status[si].isTop == true && !Object.values(status[si].duplicated).includes(true)) && category != "main";
    let noteEl;
    if (belongsAOT) {
      noteEl = aotEl.createDiv("tree-item nav-folder");
    } else {
      noteEl = parentEl.createDiv("tree-item nav-folder");
    }
    const noteTitleEl = noteEl.createDiv("tree-item-self is-clickable mod-collapsible nav-folder-title");
    let nIcon;
    if (belongsAOT) {
      nIcon = "pin";
    } else {
      if (noteType == "folder") {
        nIcon = "folder";
      } else {
        nIcon = "file";
      }
    }
    (0, import_obsidian6.setIcon)(noteTitleEl, nIcon);
    if (!noteEl.parentElement.classList.contains("mod-root")) {
      noteTitleEl.classList.add("is-subfolder");
    }
    const noteChildrenEl = noteEl.createDiv("tree-item-children nav-folder-children");
    noteChildrenEl.id = "MNO" + this.viewType + files[si].path;
    const noteCollapseIcon = noteTitleEl.createDiv("tree-item-icon collapse-icon nav-folder-collapse-indicator");
    (0, import_obsidian6.setIcon)(noteCollapseIcon, "right-triangle");
    noteCollapseIcon.addEventListener("click", (event) => __async(this, null, function* () {
      event.stopPropagation();
      if (!status[si].outlineReady) {
        if (noteType == "file") {
          info[si] = yield getFileInfo(this.app, files[si], this.settings, false, this.isDataviewEnabled);
          data[si] = yield getOutline(this.app, files[si], status[si], info[si], this.settings);
          status[si].outlineReady = true;
          noteEl.classList.remove("is-collapsed");
          noteCollapseIcon.classList.remove("is-collapsed");
          attachFileInfo(noteTitleEl, status[si], info[si], data[si], this.settings.displayFileInfo);
          constructOutlineDOM.call(this, files[si], info[si], data[si], noteChildrenEl, category);
        } else {
          yield this.processFolder(files[si]);
          status[si].outlineReady = true;
          noteEl.classList.remove("is-collapsed");
          noteCollapseIcon.classList.remove("is-collapsed");
          constructNoteDOM.call(this, this.targetFiles[files[si].path], this.fileStatus[files[si].path], this.fileInfo[files[si].path], this.outlineData[files[si].path], noteChildrenEl, "folder", aotEl, srcFile, this.fileOrder[files[si].path]);
          noteEl.appendChild(noteChildrenEl);
        }
      } else if (status[si].isFolded) {
        if (!this.collapseAll && (!status[si].duplicated.main || !this.settings.showFiles.main) && (!status[si].duplicated.outgoing || !this.settings.showFiles.outgoing) && !status[si].duplicated.self) {
          if (checkFlag(srcFile, files[si], "fold", this.settings)) {
            removeFlag(srcFile, files[si], "fold", this.settings);
            yield this.plugin.saveSettings();
          }
        }
        noteEl.classList.remove("is-collapsed");
        noteCollapseIcon.classList.remove("is-collapsed");
        status[si].isFolded = false;
        noteChildrenEl.style.display = "block";
      } else {
        if (!this.collapseAll && (!status[si].duplicated.main || !this.settings.showFiles.main) && (!status[si].duplicated.outgoing || !this.settings.showFiles.outgoing) && !status[si].duplicated.self) {
          addFlag(srcFile, files[si], "fold", this.settings);
        }
        yield this.plugin.saveSettings();
        noteEl.classList.add("is-collapsed");
        noteCollapseIcon.classList.add("is-collapsed");
        status[si].isFolded = true;
        noteChildrenEl.style.display = "none";
      }
    }));
    const nameLabel = noteType == "folder" ? files[si].name : files[si].basename;
    noteTitleEl.createDiv("tree-item-inner nav-folder-title-content").setText(nameLabel);
    attachFileInfo(noteTitleEl, status[si], info[si], data[si], this.settings.displayFileInfo);
    if (noteType == "file") {
      noteTitleEl.addEventListener("click", (event) => {
        if (files[si] != this.activeFile) {
          this.holdUpdateOnce = true;
        }
        this.app.workspace.getLeaf().openFile(files[si]);
      }, false);
      noteTitleEl.addEventListener("mouseover", (event) => {
        this.app.workspace.trigger("hover-link", {
          event,
          source: MultipleNotesOutlineViewType,
          hoverParent: parentEl,
          targetEl: noteTitleEl,
          linktext: files[si].path
        });
      });
    }
    noteTitleEl.addEventListener("contextmenu", (event) => {
      const menu = new import_obsidian6.Menu();
      menu.addSeparator();
      if (checkFlag(srcFile, files[si], "top", this.settings)) {
        menu.addItem((item) => item.setTitle("MNO: Stop displaying at the top").setIcon("pin-off").onClick(() => __async(this, null, function* () {
          removeFlag(srcFile, files[si], "top", this.settings);
          yield this.plugin.saveSettings();
          this.refreshView(true, true);
        })));
      } else {
        menu.addItem((item) => item.setTitle("MNO: Always display at the top").setIcon("pin").onClick(() => __async(this, null, function* () {
          addFlag(srcFile, files[si], "top", this.settings);
          yield this.plugin.saveSettings();
          this.refreshView(true, true);
        })));
      }
      if (this.settings.favorite[noteType].includes(files[si].path)) {
        menu.addItem((item) => item.setTitle("MNO: Remove from favorites").setIcon("bookmark-minus").onClick(() => __async(this, null, function* () {
          deleteFavAndRecent.call(this, files[si].path, noteType, "favorite");
          yield this.plugin.saveSettings();
        })));
      } else {
        menu.addItem((item) => item.setTitle("MNO: Add to favorites").setIcon("bookmark-plus").onClick(() => __async(this, null, function* () {
          updateFavAndRecent.call(this, files[si].path, noteType, "favorite");
          yield this.plugin.saveSettings();
        })));
      }
      if (noteType == "file") {
        menu.addItem((item) => item.setTitle("Open in new tab").setIcon("file-plus").onClick(() => {
          if (files[si] != this.activeFile) {
            this.holdUpdateOnce = true;
          }
          event.preventDefault();
          this.app.workspace.getLeaf("tab").openFile(files[si]);
        }));
        menu.addItem((item) => item.setTitle("Open to the right").setIcon("separator-vertical").onClick(() => {
          if (files[si] != this.activeFile) {
            this.holdUpdateOnce = true;
          }
          event.preventDefault();
          this.app.workspace.getLeaf("split").openFile(files[si]);
        }));
      }
      this.app.workspace.trigger("file-menu", menu, files[si], "link-context-menu");
      menu.showAtMouseEvent(event);
    });
    if (!status[si].outlineReady) {
      noteEl.classList.add("is-collapsed");
      noteCollapseIcon.classList.add("is-collapsed");
      continue;
    }
    if (noteType == "folder") {
      constructNoteDOM.call(this, this.targetFiles[files[si].path], this.fileStatus[files[si].path], this.fileInfo[files[si].path], this.outlineData[files[si].path], noteChildrenEl, "folder", aotEl, srcFile, this.fileOrder[files[si].path]);
    } else {
      constructOutlineDOM.call(this, files[si], info[si], data[si], noteChildrenEl, category);
    }
    if (this.collapseAll || status[si].duplicated.main && this.settings.showFiles.main || status[si].duplicated.outgoing && this.settings.showFiles.outgoing || status[si].duplicated.self || ((_c = (_b = (_a = this.settings.relatedFiles) == null ? void 0 : _a[srcFile.path]) == null ? void 0 : _b[files[si].path]) == null ? void 0 : _c.fold)) {
      noteEl.classList.add("is-collapsed");
      noteCollapseIcon.classList.add("is-collapsed");
      status[si].isFolded = true;
      noteChildrenEl.style.display = "none";
    } else {
      status[si].isFolded = false;
    }
  }
}
function constructOutlineDOM(file, info, data, parentEl, category) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  if (this.settings.showPropertyLinks && info.frontmatterLinks) {
    frontmatterlinksloop:
      for (let j = 0; j < info.frontmatterLinks.length; j++) {
        const linkTarget = this.app.metadataCache.getFirstLinkpathDest((0, import_obsidian6.parseLinktext)(info.frontmatterLinks[j].link).path, file.path);
        if (!(linkTarget instanceof import_obsidian6.TFile)) {
          continue;
        }
        const linkSubpath = (0, import_obsidian6.parseLinktext)(info.frontmatterLinks[j].link).subpath;
        if (this.settings.hideLinksBetweenRelatedFiles == "mainOnly") {
          if (category == "main") {
            continue;
          }
          if (linkTarget.path == ((_a = this.targetFiles.main) == null ? void 0 : _a[0].path)) {
            continue;
          }
        }
        if (this.settings.hideLinksBetweenRelatedFiles == "toMainOnly") {
          if (linkTarget.path == ((_b = this.targetFiles.main) == null ? void 0 : _b[0].path)) {
            continue;
          }
        }
        if (this.settings.hideLinksBetweenRelatedFiles == "all") {
          for (let category2 in this.targetFiles) {
            if (this.targetFiles[category2].some((targetfile) => targetfile.path == linkTarget.path)) {
              continue frontmatterlinksloop;
            }
          }
        }
        const outlineEl = parentEl.createDiv("tree-item nav-file");
        const outlineTitle = outlineEl.createDiv("tree-item-self is-clickable nav-file-title");
        (0, import_obsidian6.setIcon)(outlineTitle, "link");
        outlineTitle.style.paddingLeft = "0.5em";
        outlineTitle.createDiv("tree-item-inner nav-file-title-content").setText(info.frontmatterLinks[j].displayText);
        outlineTitle.addEventListener("click", (event) => {
          event.preventDefault();
          this.app.workspace.getLeaf().openFile(file);
        }, false);
        outlineTitle.addEventListener("mouseover", (event) => {
          var _a2;
          if (linkTarget) {
            let posInfo = {};
            if (linkSubpath) {
              const subpathPosition = getSubpathPosition(this.app, linkTarget, linkSubpath);
              if ((_a2 = subpathPosition == null ? void 0 : subpathPosition.start) == null ? void 0 : _a2.line) {
                posInfo = { scroll: subpathPosition.start.line };
              }
            }
            this.app.workspace.trigger("hover-link", {
              event,
              source: MultipleNotesOutlineViewType,
              hoverParent: parentEl,
              targetEl: outlineTitle,
              linktext: linkTarget.path,
              state: posInfo
            });
          }
        });
        outlineTitle.addEventListener("contextmenu", (event) => {
          const menu = new import_obsidian6.Menu();
          menu.addItem((item) => item.setTitle("Open linked file").setIcon("links-going-out").onClick(() => __async(this, null, function* () {
            var _a2, _b2, _c2;
            yield this.app.workspace.getLeaf().openFile(linkTarget);
            if (linkSubpath) {
              const view = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
              const subpathPosition = getSubpathPosition(this.app, linkTarget, linkSubpath);
              if (view && subpathPosition) {
                view.editor.focus();
                view.editor.setCursor((_a2 = subpathPosition.start) == null ? void 0 : _a2.line, 0);
                view.editor.scrollIntoView({
                  from: {
                    line: (_b2 = subpathPosition.start) == null ? void 0 : _b2.line,
                    ch: 0
                  },
                  to: {
                    line: (_c2 = subpathPosition.start) == null ? void 0 : _c2.line,
                    ch: 0
                  }
                }, true);
              }
            }
          })));
          menu.addSeparator();
          menu.addItem((item) => item.setTitle("Open in new tab").setIcon("file-plus").onClick(() => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            yield this.app.workspace.getLeaf("tab").openFile(file);
          })));
          menu.addItem((item) => item.setTitle("Open to the right").setIcon("separator-vertical").onClick(() => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            yield this.app.workspace.getLeaf("split").openFile(file);
          })));
          menu.addItem((item) => item.setTitle("Open in new window").setIcon("scan").onClick(() => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            yield this.app.workspace.getLeaf("window").openFile(file);
          })));
          menu.showAtMouseEvent(event);
        });
      }
  }
  let latestHeadingLevel = 0;
  if (data.length > 0) {
    elementloop:
      for (let j = 0; j < data.length; j++) {
        const element = data[j].typeOfElement;
        const linkTarget = element !== "link" ? null : this.app.metadataCache.getFirstLinkpathDest((0, import_obsidian6.parseLinktext)((_c = data[j]) == null ? void 0 : _c.link).path, file.path);
        const linkSubpath = !linkTarget ? void 0 : (0, import_obsidian6.parseLinktext)((_d = data[j]) == null ? void 0 : _d.link).subpath;
        if (this.settings.showElements[element] == false) {
          continue;
        }
        if (element == "heading") {
          latestHeadingLevel = data[j].level;
          if (!this.settings.headingLevel[data[j].level - 1]) {
            continue;
          }
        }
        if (element == "link") {
          if (this.settings.hideLinksBetweenRelatedFiles == "mainOnly") {
            if (category == "main") {
              continue;
            }
            if (((_e = this.app.metadataCache.getFirstLinkpathDest(data[j].link, file.path)) == null ? void 0 : _e.path) == ((_f = this.targetFiles.main) == null ? void 0 : _f[0].path)) {
              continue;
            }
          }
          if (this.settings.hideLinksBetweenRelatedFiles == "toMainOnly") {
            if (((_g = this.app.metadataCache.getFirstLinkpathDest(data[j].link, file.path)) == null ? void 0 : _g.path) == ((_h = this.targetFiles.main) == null ? void 0 : _h[0].path)) {
              continue;
            }
          }
          if (this.settings.hideLinksBetweenRelatedFiles == "all") {
            if (linkTarget.path) {
              for (let category2 in this.targetFiles) {
                if (this.targetFiles[category2].some((targetfile) => targetfile.path == linkTarget.path)) {
                  continue elementloop;
                }
              }
            }
          }
        }
        if (element == "tag") {
        }
        if (element == "listItems") {
          if (this.settings.hideCompletedTasks == true && data[j].task == "x") {
            continue;
          } else if (this.settings.taskOnly == true && data[j].task === void 0) {
            continue;
          } else if (this.settings.allTasks == false || data[j].task === void 0) {
            if (data[j].level == 2 || data[j].level == 1 && this.settings.allRootItems == false) {
              continue;
            }
          }
        }
        const outlineEl = parentEl.createDiv("tree-item nav-file");
        const outlineTitle = outlineEl.createDiv("tree-item-self is-clickable nav-file-title");
        switch (this.settings.icon[element]) {
          case "none":
            break;
          case "headingwithnumber":
            (0, import_obsidian6.setIcon)(outlineTitle, `heading-${data[j].level}`);
            break;
          case "custom":
            (0, import_obsidian6.setIcon)(outlineTitle, this.settings.customIcon[element]);
            break;
          default:
            (0, import_obsidian6.setIcon)(outlineTitle, this.settings.icon[element]);
            break;
        }
        if (element == "listItems" && data[j].task !== void 0) {
          if (data[j].task == "x") {
            (0, import_obsidian6.setIcon)(outlineTitle, this.settings.icon.taskDone == "custom" ? this.settings.customIcon.taskDone : this.settings.icon.taskDone);
          } else {
            (0, import_obsidian6.setIcon)(outlineTitle, this.settings.icon.task == "custom" ? this.settings.customIcon.task : this.settings.icon.task);
          }
        }
        let prefix = this.settings.prefix[element];
        if (element == "heading") {
          switch (this.settings.repeatHeadingPrefix) {
            case "level":
              prefix = prefix.repeat(data[j].level);
              break;
            case "levelminus1":
              prefix = prefix.repeat(data[j].level - 1);
              break;
          }
        }
        let indent = 0.5;
        if (element == "heading" && this.settings.indent.heading == true) {
          indent = indent + (data[j].level - (this.maxLevel + 1)) * 1.5;
        }
        if (element != "heading" && this.settings.indentFollowHeading) {
          const additionalIndent = (latestHeadingLevel - (this.maxLevel + 1) + (this.settings.indentFollowHeading == 2 ? 1 : 0)) * 1.5;
          indent = indent + (additionalIndent > 0 ? additionalIndent : 0);
        }
        if (element == "link" && data[j].position.start.line == ((_i = data[j - 1]) == null ? void 0 : _i.position.start.line)) {
          indent = indent + 1.5;
        }
        outlineTitle.style.paddingLeft = `${indent}em`;
        if (element == "listItems" && data[j].task !== void 0) {
          prefix = data[j].task == "x" ? this.settings.prefix.taskDone : this.settings.prefix.task;
          if (this.settings.addCheckboxText) {
            prefix = prefix + "[" + data[j].task + "] ";
          }
        }
        outlineTitle.createDiv("tree-item-inner nav-file-title-content").setText(prefix + data[j].displayText);
        if (this.settings.inlinePreview) {
          let previewText = "";
          if ((element == "link" || element == "tag") && data[j].position.end.col < info.lines[data[j].position.start.line].length) {
            previewText = info.lines[data[j].position.start.line].slice(data[j].position.end.col);
          } else {
            previewText = data[j].position.start.line < info.numOfLines - 1 ? info.lines[data[j].position.start.line + 1] : "";
          }
          outlineTitle.createDiv("nav-file-title-preview").setText(previewText);
        }
        if (this.settings.tooltipPreview) {
          let previewText2 = "";
          let endLine = info.numOfLines - 1;
          let k = j + 1;
          endpreviewloop:
            while (k < data.length) {
              if (this.settings.showElements[data[k].typeOfElement]) {
                if (data[k].typeOfElement == "listItems" && (data[k].level >= 2 || this.settings.allRootItems == false && data[k].level == 1 && (this.settings.allTasks == false || data[k].task === void 0) || this.settings.taskOnly && data[k].task === void 0 || this.settings.hideCompletedTasks && data[k].task == "x")) {
                  k++;
                  continue;
                } else if (data[k].typeOfElement == "heading" && this.settings.headingLevel[data[k].level - 1] == false) {
                  k++;
                  continue;
                } else {
                  for (const value of this.settings.wordsToIgnore[data[k].typeOfElement]) {
                    if (value && data[k].displayText.includes(value)) {
                      k++;
                      continue endpreviewloop;
                    }
                  }
                  endLine = data[k].position.start.line - 1;
                  break;
                }
              }
              k++;
            }
          for (let l = data[j].position.start.line; l <= endLine; l++) {
            previewText2 = previewText2 + info.lines[l] + "\n";
          }
          previewText2 = previewText2.replace(/\n$|\n(?=\n)/g, "");
          (0, import_obsidian6.setTooltip)(outlineTitle, previewText2, { classes: ["daily-note-preview"] });
          outlineTitle.dataset.tooltipPosition = this.settings.tooltipPreviewDirection;
          outlineTitle.setAttribute("data-tooltip-delay", "10");
        }
        outlineTitle.addEventListener("click", (event) => __async(this, null, function* () {
          event.preventDefault();
          if (file != this.activeFile) {
            this.holdUpdateOnce = true;
          }
          yield this.app.workspace.getLeaf().openFile(file);
          const view = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
          if (view) {
            view.editor.focus();
            view.editor.setCursor(data[j].position.start.line, data[j].position.start.col);
            view.editor.scrollIntoView({
              from: {
                line: data[j].position.start.line,
                ch: 0
              },
              to: {
                line: data[j].position.start.line,
                ch: 0
              }
            }, true);
          }
        }), false);
        outlineTitle.addEventListener("mouseover", (event) => {
          var _a2;
          if (element == "link" && linkTarget) {
            let posInfo = {};
            if (linkSubpath) {
              const subpathPosition = getSubpathPosition(this.app, linkTarget, linkSubpath);
              if ((_a2 = subpathPosition == null ? void 0 : subpathPosition.start) == null ? void 0 : _a2.line) {
                posInfo = { scroll: subpathPosition.start.line };
              }
            }
            this.app.workspace.trigger("hover-link", {
              event,
              source: MultipleNotesOutlineViewType,
              hoverParent: parentEl,
              targetEl: outlineTitle,
              linktext: linkTarget.path,
              state: posInfo
            });
          } else {
            this.app.workspace.trigger("hover-link", {
              event,
              source: MultipleNotesOutlineViewType,
              hoverParent: parentEl,
              targetEl: outlineTitle,
              linktext: file.path,
              state: { scroll: data[j].position.start.line }
            });
          }
        });
        outlineTitle.addEventListener("contextmenu", (event) => {
          const menu = new import_obsidian6.Menu();
          if (element == "link") {
            menu.addItem((item) => item.setTitle("Open linked file").setIcon("links-going-out").onClick(() => __async(this, null, function* () {
              var _a2, _b2, _c2;
              yield this.app.workspace.getLeaf().openFile(linkTarget);
              if (linkSubpath) {
                const view = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
                const subpathPosition = getSubpathPosition(this.app, linkTarget, linkSubpath);
                if (view && subpathPosition) {
                  view.editor.focus();
                  view.editor.setCursor((_a2 = subpathPosition.start) == null ? void 0 : _a2.line, 0);
                  view.editor.scrollIntoView({
                    from: {
                      line: (_b2 = subpathPosition.start) == null ? void 0 : _b2.line,
                      ch: 0
                    },
                    to: {
                      line: (_c2 = subpathPosition.start) == null ? void 0 : _c2.line,
                      ch: 0
                    }
                  }, true);
                }
              }
            })));
            menu.addSeparator();
          }
          if (element == "tag") {
            menu.addItem((item) => item.setTitle("Search this tag").setIcon("search").onClick(() => __async(this, null, function* () {
              var _a2;
              const searchString = "tag: #" + data[j].displayText;
              (_a2 = this.app.internalPlugins.plugins["global-search"]) == null ? void 0 : _a2.instance.openGlobalSearch(searchString);
            })));
            menu.addSeparator();
          }
          menu.addItem((item) => item.setTitle("Open in new tab").setIcon("file-plus").onClick(() => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            yield this.app.workspace.getLeaf("tab").openFile(file);
            scrollToElement(data[j].position.start.line, data[j].position.start.col, this.app);
          })));
          menu.addItem((item) => item.setTitle("Open to the right").setIcon("separator-vertical").onClick(() => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            yield this.app.workspace.getLeaf("split").openFile(file);
            scrollToElement(data[j].position.start.line, data[j].position.start.col, this.app);
          })));
          menu.addItem((item) => item.setTitle("Open in new window").setIcon("scan").onClick(() => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            yield this.app.workspace.getLeaf("window").openFile(file);
            scrollToElement(data[j].position.start.line, data[j].position.start.col, this.app);
          })));
          menu.showAtMouseEvent(event);
        });
      }
  } else {
    if (true) {
      for (let j = 0; j < info.lines.length; j++) {
        if (info.lines[j] == "") {
          continue;
        } else {
          const outlineEl = parentEl.createDiv("tree-item nav-file");
          const outlineTitle = outlineEl.createDiv("tree-item-self is-clickable nav-file-title");
          outlineTitle.createDiv("tree-item-inner nav-file-title-content").setText(info.lines[j]);
          outlineTitle.addEventListener("click", (event) => __async(this, null, function* () {
            if (file != this.activeFile) {
              this.holdUpdateOnce = true;
            }
            event.preventDefault();
            yield this.app.workspace.getLeaf().openFile(file);
          }), false);
          break;
        }
      }
    }
  }
  if (category == "main" || this.settings.showBacklinks == false || !info.backlinks) {
    return;
  }
  backlinkfileloop:
    for (let i = 0; i < ((_j = info.backlinks) == null ? void 0 : _j.length); i++) {
      for (const targetCategory in this.targetFiles) {
        if (this.targetFiles[targetCategory].includes(info.backlinks[i])) {
          continue backlinkfileloop;
        }
      }
      const outlineEl = parentEl.createDiv("tree-item nav-file");
      const outlineTitle = outlineEl.createDiv("tree-item-self is-clickable nav-file-title");
      (0, import_obsidian6.setIcon)(outlineTitle, "links-coming-in");
      outlineTitle.style.paddingLeft = "0.5em";
      outlineTitle.createDiv("tree-item-inner nav-file-title-content").setText(info.backlinks[i].basename);
      outlineTitle.addEventListener("click", (event) => __async(this, null, function* () {
        event.preventDefault();
        if (file != this.activeFile) {
          this.holdUpdateOnce = true;
        }
        yield this.app.workspace.getLeaf().openFile(info.backlinks[i]);
        const view = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      }), false);
      outlineTitle.addEventListener("mouseover", (event) => {
        this.app.workspace.trigger("hover-link", {
          event,
          source: MultipleNotesOutlineViewType,
          hoverParent: parentEl,
          targetEl: outlineTitle,
          linktext: info.backlinks[i].path
        });
      });
    }
}
function scrollToElement(line, col, app2) {
  const view = app2.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
  if (view) {
    view.editor.focus();
    view.editor.setCursor(line, col);
    view.editor.scrollIntoView({
      from: {
        line,
        ch: 0
      },
      to: {
        line,
        ch: 0
      }
    }, true);
  }
}
function attachFileInfo(targetEl, status, info, data, displayFileInfo) {
  if (!status.isFolder) {
    switch (displayFileInfo) {
      case "lines":
        targetEl.dataset.subinfo = status.outlineReady ? info.numOfLines.toString() : "";
        break;
      case "tag":
        if (status.outlineReady) {
          let firsttagIndex = data.findIndex((element, index) => data[index].typeOfElement == "tag");
          if (firsttagIndex >= 0) {
            targetEl.dataset.subinfo = data[firsttagIndex].displayText;
          }
        }
        break;
      case "none":
        break;
      default:
        break;
    }
  }
}

// src/fileView.ts
var MultipleNotesOutlineViewType = "multiple-notes-outline";
var MultipleNotesOutlineView = class extends import_obsidian8.ItemView {
  constructor(leaf, plugin, settings) {
    super(leaf);
    this.targetFiles = {
      main: [],
      outgoing: [],
      backlink: []
    };
    this.fileStatus = {
      main: [],
      outgoing: [],
      backlink: []
    };
    this.fileInfo = {
      main: [],
      outgoing: [],
      backlink: []
    };
    this.outlineData = {
      main: [],
      outgoing: [],
      backlink: []
    };
    this.fileOrder = {
      main: [],
      outgoing: [],
      backlink: []
    };
    this.flagChanged = false;
    this.flagRegetTarget = false;
    this.flagSaveSettings = false;
    this.extractMode = false;
    this.extractTask = false;
    this.collapseAll = false;
    this.collapseCategory = {
      outgoing: false,
      backlink: false
    };
    this.holdUpdateOnce = false;
    this.hasMainChanged = false;
    this.filecount = 0;
    this.changedFiles = [];
    this.viewType = "file";
    this.pinnedMode = false;
    this.isDataviewEnabled = false;
    this.plugin = plugin;
    this.settings = settings;
  }
  getViewType() {
    return MultipleNotesOutlineViewType;
  }
  getDisplayText() {
    return "MNO - file view";
  }
  getIcon() {
    return "files";
  }
  onOpen() {
    return __async(this, null, function* () {
      yield this.initView();
    });
  }
  onClose() {
    return __async(this, null, function* () {
    });
  }
  initView() {
    return __async(this, null, function* () {
      yield this.bootDelay();
      checkRelatedFiles(this.app, this.settings);
      checkFavAndRecentFiles(this.app, this.settings, this.viewType);
      this.collapseAll = this.settings.collapseAllAtStartup;
      this.theme = getTheme();
      setNoteTitleBackgroundColor(this.theme, this.settings);
      this.activeFile = this.app.workspace.getActiveFile();
      if (this.activeFile) {
        this.targetFiles.main[0] = this.activeFile;
        this.refreshView(true, true);
      } else {
        console.log("Multiple Notes Outline: failed to get active file");
      }
      const debouncerRequestRefresh = (0, import_obsidian7.debounce)(this.autoRefresh, 3e3, true);
      this.flagChanged = false;
      this.flagRegetTarget = false;
      this.registerEvent(this.app.workspace.on("file-open", (file) => {
        if (file instanceof import_obsidian8.TFile && file !== this.activeFile) {
          this.activeFile = file;
          if (!this.settings.autoupdateFileView || this.settings.suspendUpdateByClickingView && this.holdUpdateOnce || this.pinnedMode == true) {
          } else {
            this.targetFiles.main[0] = this.activeFile;
            this.hasMainChanged = true;
            updateFavAndRecent.call(this, this.activeFile.path, "file", "recent");
            this.refreshView(true, true);
          }
          this.holdUpdateOnce = false;
        }
      }));
      this.registerEvent(this.app.metadataCache.on("changed", (file) => {
        let category;
        for (category in this.targetFiles) {
          if (this.targetFiles[category].includes(file)) {
            if (!this.changedFiles.includes(file)) {
              this.changedFiles.push(file);
            }
            this.flagChanged = true;
            debouncerRequestRefresh.call(this);
            break;
          }
        }
      }));
      this.registerEvent(this.app.vault.on("delete", (file) => {
        if (file instanceof import_obsidian8.TFile) {
          if (file == this.activeFile && file != this.targetFiles.main[0]) {
            this.holdUpdateOnce = true;
          }
          let changedRelatedFiles = handleDeleteRelatedFiles(file, this.settings);
          if (changedRelatedFiles) {
            this.flagSaveSettings = true;
          }
          let changedFavAndRecent = handleDeleteFavAndRecentFiles(file, this.settings);
          if (changedFavAndRecent) {
            this.flagSaveSettings = true;
          }
          this.flagRegetTarget = true;
          debouncerRequestRefresh.call(this);
        }
      }));
      this.registerEvent(this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian8.TFile) {
          let changedRelatedFiles = handleRenameRelatedFiles(file, oldPath, this.settings);
          if (changedRelatedFiles) {
            this.flagSaveSettings = true;
          }
          let changedFavAndRecent = handleRenameFavAndRecentFiles(file, oldPath, this.settings);
          if (changedFavAndRecent) {
            this.flagSaveSettings = true;
          }
          this.flagRegetTarget = true;
          debouncerRequestRefresh.call(this);
        }
      }));
      this.registerEvent(this.app.workspace.on("css-change", (e) => {
        const newTheme = getTheme();
        if (newTheme !== this.theme) {
          this.theme = newTheme;
          setNoteTitleBackgroundColor(this.theme, this.settings);
        }
      }));
    });
  }
  bootDelay() {
    return __async(this, null, function* () {
      return new Promise((resolve) => {
        setTimeout(resolve, 500);
      });
    });
  }
  autoRefresh() {
    return __async(this, null, function* () {
      if (!(this.flagChanged || this.flagRegetTarget || this.flagSaveSettings)) {
        return;
      }
      if (this.flagChanged && !this.flagRegetTarget) {
        for (let i = 0; i < this.changedFiles.length; i++) {
          let category;
          for (category in this.targetFiles) {
            let index = this.targetFiles[category].indexOf(this.changedFiles[i]);
            if (index < 0) {
              continue;
            }
            this.fileInfo[category][index] = yield getFileInfo(this.app, this.targetFiles[category][index], this.settings, true, this.isDataviewEnabled);
            const newData = yield getOutline(this.app, this.targetFiles[category][index], this.fileStatus[category][index], this.fileInfo[category][index], this.settings);
            if (newData) {
              this.outlineData[category][index] = newData;
              this.fileStatus[category][index].outlineReady = true;
            }
            const updateNoteChildrenEl = document.getElementById("MNO" + this.viewType + this.targetFiles[category][index].path);
            updateNoteChildrenEl.empty();
            constructOutlineDOM.call(this, this.targetFiles[category][index], this.fileInfo[category][index], this.outlineData[category][index], updateNoteChildrenEl, category);
          }
        }
      }
      if (this.flagSaveSettings) {
        yield this.plugin.saveSettings();
      }
      if (this.flagRegetTarget) {
        this.refreshView(this.flagRegetTarget, this.flagRegetTarget);
      }
      this.changedFiles = [];
      this.flagRegetTarget = false;
      this.flagChanged = false;
      this.flagSaveSettings = false;
    });
  }
  refreshView(flagGetTarget, flagGetOutline) {
    return __async(this, null, function* () {
      const startTime = performance.now();
      this.isDataviewEnabled = checkDataview(this.app);
      const containerEl = document.getElementById("MNOfileview-listcontainer");
      const previousY = (containerEl == null ? void 0 : containerEl.scrollTop) ? containerEl.scrollTop : 0;
      this.filecount = 0;
      if (flagGetTarget) {
        this.fileStatus.main = initFileStatus(this.targetFiles.main);
        this.fileOrder.main = [...Array(this.targetFiles.main.length)].map((_, i) => i);
        [this.fileStatus.main, this.fileInfo.main, this.outlineData.main] = yield this.getOutlines(this.targetFiles.main, this.fileStatus.main);
        this.targetFiles.outgoing = getOutgoingLinkFiles(this.app, this.targetFiles.main[0], this.fileInfo.main[0], this.outlineData.main[0]);
        this.fileStatus.outgoing = initFileStatus(this.targetFiles.outgoing);
        this.fileOrder.outgoing = [...Array(this.targetFiles.outgoing.length)].map((_, i) => i);
        this.targetFiles.backlink = this.fileInfo.main[0].backlinks;
        this.fileStatus.backlink = initFileStatus(this.targetFiles.backlink);
        this.fileOrder.backlink = [...Array(this.targetFiles.backlink.length)].map((_, i) => i);
        this.checkDuplicated(this.targetFiles.outgoing, this.targetFiles.main, "main", this.fileStatus.outgoing);
        this.checkDuplicated(this.targetFiles.outgoing, this.targetFiles.outgoing, "self", this.fileStatus.outgoing);
        this.checkDuplicated(this.targetFiles.backlink, this.targetFiles.main, "main", this.fileStatus.backlink);
        this.checkDuplicated(this.targetFiles.backlink, this.targetFiles.outgoing, "outgoing", this.fileStatus.backlink);
        this.checkDuplicated(this.targetFiles.backlink, this.targetFiles.backlink, "self", this.fileStatus.backlink);
      }
      if (flagGetOutline && this.targetFiles.outgoing.length + this.targetFiles.backlink.length <= this.settings.processLimit) {
        [this.fileStatus.outgoing, this.fileInfo.outgoing, this.outlineData.outgoing] = yield this.getOutlines(this.targetFiles.outgoing, this.fileStatus.outgoing);
        [this.fileStatus.backlink, this.fileInfo.backlink, this.outlineData.backlink] = yield this.getOutlines(this.targetFiles.backlink, this.fileStatus.backlink);
        sortFileOrder(this.fileOrder.backlink, this.targetFiles.backlink, this.fileStatus.backlink, this.fileInfo.backlink, this.settings);
      }
      const midTime = performance.now();
      if (this.settings.showDebugInfo) {
        console.log("Multiple Notes Outline: time required to get outlines, file view: ", this.targetFiles.main[0].path, midTime - startTime);
      }
      drawUI.call(this);
      this.drawOutline(previousY);
      const endTime = performance.now();
      if (this.settings.showDebugInfo) {
        console.log("Multiple Notes Outline: time required to draw outlines, file view: ", this.targetFiles.main[0].path, endTime - midTime, previousY);
        console.log("Multiple Notes Outline: time required to refresh view, file view", this.targetFiles.main[0].path, endTime - startTime);
      }
    });
  }
  getOutlines(files, status) {
    return __async(this, null, function* () {
      let fileInfo = [];
      let outlineData = [];
      for (let i = 0; i < files.length; i++) {
        if (checkFlag(this.targetFiles.main[0], files[i], "top", this.settings) == true) {
          status[i].isTop = true;
        }
        if ((this.filecount < this.settings.readLimit || status[i].isTop) && !Object.values(status[i].duplicated).includes(true)) {
          const info = yield getFileInfo(this.app, files[i], this.settings, Boolean(files.length == 1), this.isDataviewEnabled);
          fileInfo.push(info);
          const data = yield getOutline(this.app, files[i], status[i], info, this.settings);
          if (data) {
            outlineData.push(data);
            status[i].outlineReady = true;
          } else {
            outlineData.push(void 0);
          }
        } else {
          fileInfo.push(void 0);
          outlineData.push(void 0);
        }
        this.filecount++;
      }
      return [status, fileInfo, outlineData];
    });
  }
  drawOutline(previousY) {
    this.maxLevel = this.settings.headingLevel.indexOf(true);
    const containerEl = createDiv("nav-files-container node-insert-event");
    const rootEl = containerEl.createDiv("tree-item nav-folder mod-root");
    const rootChildrenEl = rootEl.createDiv("tree-item-children nav-folder-children");
    containerEl.id = "MNOfileview-listcontainer";
    const categoryAOTEl = rootChildrenEl.createDiv("tree-item nav-folder mod-root");
    if (this.settings.showFiles.main) {
      const categoryMainEl = rootChildrenEl.createDiv("tree-item nav-folder mod-root");
      constructNoteDOM.call(this, this.targetFiles.main, this.fileStatus.main, this.fileInfo.main, this.outlineData.main, categoryMainEl, "main", categoryAOTEl, this.targetFiles.main[0], this.fileOrder.main);
    }
    if (this.settings.showFiles.outgoing) {
      this.constructCategoryDOM("outgoing", "links-going-out", "Outgoing Link Files", rootChildrenEl, categoryAOTEl);
    }
    if (this.settings.showFiles.backlink) {
      this.constructCategoryDOM("backlink", "links-coming-in", "Backlink Files", rootChildrenEl, categoryAOTEl);
    }
    this.contentEl.appendChild(containerEl);
    if (this.hasMainChanged == false && previousY != 0) {
      containerEl.scrollTop = previousY;
    }
    this.hasMainChanged = false;
  }
  constructCategoryDOM(category, cIcon, cText, parentEl, aotEl) {
    const categoryEl = parentEl.createDiv("tree-item nav-folder");
    const categoryTitleEl = categoryEl.createDiv("tree-item-self is-clickable mod-collapsible nav-folder-title");
    (0, import_obsidian7.setIcon)(categoryTitleEl, cIcon);
    categoryTitleEl.createDiv("tree-item-inner nav-folder-title-content").setText(cText);
    const categoryCollapseIcon = categoryTitleEl.createDiv("tree-item-icon collapse-icon nav-folder-collapse-indicator");
    (0, import_obsidian7.setIcon)(categoryCollapseIcon, "right-triangle");
    categoryCollapseIcon.addEventListener("click", (event) => __async(this, null, function* () {
      event.stopPropagation();
      if (this.collapseCategory[category]) {
        this.collapseCategory[category] = false;
        this.refreshView(false, false);
      } else {
        this.collapseCategory[category] = true;
        categoryEl.classList.add("is-collapsed");
        categoryCollapseIcon.classList.add("is-collapsed");
        categoryChildrenEl.style.display = "none";
      }
    }));
    const categoryChildrenEl = categoryEl.createDiv("tree-item-children nav-folder-children");
    if (!this.collapseCategory[category]) {
      constructNoteDOM.call(this, this.targetFiles[category], this.fileStatus[category], this.fileInfo[category], this.outlineData[category], categoryChildrenEl, category, aotEl, this.targetFiles.main[0], this.fileOrder[category]);
    } else {
      categoryEl.classList.add("is-collapsed");
      categoryCollapseIcon.classList.add("is-collapsed");
    }
  }
  checkDuplicated(files, compare, category, status) {
    fileloop:
      for (let i = 0; i < files.length; i++) {
        for (let j = 0; j < compare.length; j++) {
          if (category == "self" && j >= i) {
            break;
          }
          if (compare[j].path === files[i].path) {
            status[i].duplicated[category] = true;
            continue fileloop;
          }
        }
      }
    return status;
  }
};

// src/setting.ts
var import_obsidian9 = __toModule(require("obsidian"));
var MultipleNotesOutlineSettingTab = class extends import_obsidian9.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian9.Setting(containerEl).setName("Show headings").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showElements.heading).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showElements.heading = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Show links").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showElements.link).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showElements.link = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Show tags").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showElements.tag).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showElements.tag = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Show list items & tasks").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showElements.listItems).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showElements.listItems = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    if (this.plugin.settings.showElements.listItems) {
      new import_obsidian9.Setting(containerEl).setName("Show all root list items").setDesc("if disabled, only top item of the list is displayed").setClass("setting-indent").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.allRootItems).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.allRootItems = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      new import_obsidian9.Setting(containerEl).setName("Show all tasks").setDesc("show all task items regardless of their level").setClass("setting-indent").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.allTasks).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.allTasks = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      new import_obsidian9.Setting(containerEl).setName("Task only").setDesc("if enabled, normal list items are hidden").setClass("setting-indent").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.taskOnly).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.taskOnly = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      new import_obsidian9.Setting(containerEl).setName("Hide completed tasks").setClass("setting-indent").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.hideCompletedTasks).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.hideCompletedTasks = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
    }
    new import_obsidian9.Setting(containerEl).setName("Show backlink files").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showBacklinks).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showBacklinks = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Collapse all at startup").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.collapseAllAtStartup).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.collapseAllAtStartup = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Display file information").setDesc("display the number of lines of the file / the first tag with the file name").addDropdown((dropdown) => {
      dropdown.addOption("none", "none").addOption("lines", "lines of the note").addOption("tag", "first tag").setValue(this.plugin.settings.displayFileInfo).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFileInfo = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Position of the plugin view").setDesc("Specify default position where this plugin's view appears").addDropdown((dropdown) => {
      dropdown.addOption("right", "right side pane").addOption("left", "left side pane").addOption("tab", "new tab in main pane").addOption("split", "splitted pane").addOption("popout", "popout window").setValue(this.plugin.settings.viewPosition).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.viewPosition = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Sort type").setDesc("Specify sort order").addDropdown((dropdown) => {
      dropdown.addOption("alphabetAscending", "File name (A to Z)").addOption("alphabetDescending", "File name (Z to A)").addOption("mtimeDescending", "Modified time (new to old) ").addOption("mtimeAscending", "Modified time (old to new) ").addOption("ctimeDescending", "Created time (new to old) ").addOption("ctimeAscending", "Created time (old to new) ").setValue(this.plugin.settings.sortType).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.sortType = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(true);
      }));
    });
    this.containerEl.createEl("h4", {
      text: "File View",
      cls: "setting-category"
    });
    new import_obsidian9.Setting(containerEl).setName("Open File View at startup").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openAtStartup.file).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.openAtStartup.file = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Show the main target file section").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showFiles.main).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showFiles.main = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Show the the outgoing files section").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showFiles.outgoing).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showFiles.outgoing = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Show the the backlink files section").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showFiles.backlink).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showFiles.backlink = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Update File View when another file becomes active").setDesc("Automatically update the view when another file becomes active(default = on). The view is not updated if the transition is made via clicking on the MNO view items.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.autoupdateFileView).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.autoupdateFileView = value;
        this.display();
        yield this.plugin.saveSettings();
      }));
    });
    if (this.plugin.settings.autoupdateFileView) {
      new import_obsidian9.Setting(containerEl).setName("Suspend update by clicking on view item").setClass("setting-indent").setDesc("suspend updating the view when the active file is changed by clicking on items in the File View(default = on)").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.suspendUpdateByClickingView).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.suspendUpdateByClickingView = value;
          this.display();
          yield this.plugin.saveSettings();
        }));
      });
    }
    new import_obsidian9.Setting(containerEl).setName("Hide duplicate notes").setDesc("hides notes that appear multiple times in the outline.(default = on)").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.hideDuplicated).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.hideDuplicated = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Hide link elements between displayed files").setDesc("main file only: hide links between the main file and other displayed. other files to main file only: hide links from other displayed files to the main file. all: hide links between all displayed files.").addDropdown((dropdown) => {
      dropdown.addOption("none", "none").addOption("mainOnly", "main file only").addOption("toMainOnly", "other files to main file only").addOption("all", "all").setValue(this.plugin.settings.hideLinksBetweenRelatedFiles).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.hideLinksBetweenRelatedFiles = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    this.containerEl.createEl("h4", {
      text: "Folder View",
      cls: "setting-category"
    });
    new import_obsidian9.Setting(containerEl).setName("Open Folder View at startup").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openAtStartup.folder).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.openAtStartup.folder = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Collapse subfolder").setDesc("display subfolders in collapsed state").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.collapseFolder).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.collapseFolder = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    this.containerEl.createEl("h4", {
      text: "Headings",
      cls: "setting-category"
    });
    if (this.plugin.settings.showElements.heading) {
      this.containerEl.createEl("p", {
        text: "Heading level to display",
        cls: "setting-item-description"
      });
      this.plugin.settings.headingLevel.forEach((value, index, arry) => {
        new import_obsidian9.Setting(containerEl).setName(`Level${index + 1}`).setClass("setting-indent").addToggle((toggle) => {
          toggle.setValue(this.plugin.settings.headingLevel[index]).onChange((value2) => __async(this, null, function* () {
            this.plugin.settings.headingLevel[index] = value2;
            this.display();
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          }));
        });
      });
    } else {
      this.containerEl.createEl("p", {
        text: "To display this section, activate 'Show headings' in Basics section.",
        cls: "setting-item-description"
      });
    }
    this.containerEl.createEl("h4", {
      text: "Preview"
    });
    new import_obsidian9.Setting(containerEl).setName("Inline preview").setDesc("Show a few subsequent words next to the outline element name").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.inlinePreview).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.inlinePreview = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Tooltip preview").setDesc("Show subsequent sentences as a tooltip when hover").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.tooltipPreview).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.tooltipPreview = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    if (this.plugin.settings.tooltipPreview) {
      new import_obsidian9.Setting(containerEl).setName("Tooltip preview direction").setClass("setting-indent").setDesc("specify the direction to display tooltip preview").addDropdown((dropdown) => {
        dropdown.addOption("left", "left").addOption("right", "right").addOption("bottom", "bottom").addOption("top", "top").setValue(this.plugin.settings.tooltipPreviewDirection).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.tooltipPreviewDirection = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
    }
    this.containerEl.createEl("h4", {
      text: "Always on top",
      cls: "setting-category"
    });
    new import_obsidian9.Setting(containerEl).setName("Tags").setDesc("Notes with tags which match listed words are displayed on the top of the list. Separate with a new line.").addTextArea((textArea) => {
      textArea.setValue(this.plugin.settings.tagsAOT.join("\n"));
      textArea.inputEl.onblur = (e) => __async(this, null, function* () {
        const inputedValue = e.target.value;
        this.plugin.settings.tagsAOT = inputedValue.split("\n");
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      });
    });
    this.containerEl.createEl("h4", {
      text: "Recent/favorites",
      cls: "setting-category"
    });
    new import_obsidian9.Setting(containerEl).setName("Number of recent files/folders to be stored").addText((text) => {
      text.inputEl.setAttr("type", "number");
      text.setPlaceholder(String(DEFAULT_SETTINGS.numOfRecentFiles)).setValue(String(this.plugin.settings.numOfRecentFiles));
      text.inputEl.onblur = (e) => __async(this, null, function* () {
        let parsed = parseInt(e.target.value, 10);
        if (parsed <= 0) {
          parsed = DEFAULT_SETTINGS.numOfRecentFiles;
        }
        this.plugin.settings.numOfRecentFiles = parsed;
        yield this.plugin.saveSettings();
      });
    });
    new import_obsidian9.Setting(containerEl).setName("Auto pin").setDesc("When File View is updated from recent/favorite files, automatically pin the view.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.pinAfterJump).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.pinAfterJump = value;
        this.display();
        yield this.plugin.saveSettings();
      }));
    });
    this.containerEl.createEl("h4", {
      text: "Appearnce",
      cls: "setting-category"
    });
    new import_obsidian9.Setting(containerEl).setName("Indent other than headings").setDesc("Whether other elements should be indented to preceding headings (default = preceding heading +1)").addDropdown((dropdown) => {
      dropdown.addOption("0", "none").addOption("1", "follow preceding heading").addOption("2", "preceding heading + 1").setValue(String(this.plugin.settings.indentFollowHeading)).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.indentFollowHeading = Number(value);
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    new import_obsidian9.Setting(containerEl).setName("Note title background color").setDesc("No change: use the current CSS theme setting values(Texts may be overlapped). Same as outlines: default theme explorer color. Accent: highlight file names. Custom: Specify any color code. Please update the view when you toggled Obsidian's base theme(light/dark). (default = accent)").addDropdown((dropdown) => {
      dropdown.addOption("none", "no change").addOption("default", "same as outlines").addOption("accent", "accent").addOption("custom", "custom").setValue(this.plugin.settings.noteTitleBackgroundColor).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.noteTitleBackgroundColor = value;
        this.display();
        yield this.plugin.saveSettings();
        this.callRefreshView(false);
      }));
    });
    if (this.plugin.settings.noteTitleBackgroundColor == "custom") {
      new import_obsidian9.Setting(containerEl).setName("Custom note title background color (light)").setClass("setting-indent").setDesc("Specify background color (ex. #FFFFFF or rgb(255,255,255))").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setValue(this.plugin.settings.customNoteTitleBackgroundColor.light);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.customNoteTitleBackgroundColor.light = inputedValue;
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
      new import_obsidian9.Setting(containerEl).setName("Custom note title background color (light, on hover)").setClass("setting-indent").setDesc("Specify background color on hover (ex. #FFFFFF or rgb(255,255,255))").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setValue(this.plugin.settings.customNoteTitleBackgroundColorHover.light);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.customNoteTitleBackgroundColorHover.light = inputedValue;
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
      new import_obsidian9.Setting(containerEl).setName("Custom note title background color (dark)").setClass("setting-indent").setDesc("Specify background color (ex. #FFFFFF or rgb(255,255,255))").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setValue(this.plugin.settings.customNoteTitleBackgroundColor.dark);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.customNoteTitleBackgroundColor.dark = inputedValue;
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
      new import_obsidian9.Setting(containerEl).setName("Custom note title background color (dark, on hover)").setClass("setting-indent").setDesc("Specify background color on hover (ex. #FFFFFF or rgb(255,255,255))").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setValue(this.plugin.settings.customNoteTitleBackgroundColorHover.dark);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.customNoteTitleBackgroundColorHover.dark = inputedValue;
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
    }
    if (this.plugin.settings.showElements.heading) {
      this.containerEl.createEl("p", {
        text: "Headings",
        cls: "setting-category"
      });
      new import_obsidian9.Setting(containerEl).setName("Icon").setClass("setting-indent").addDropdown((dropdown) => {
        dropdown.addOption("none", "none").addOption("hash", "hash").addOption("chevron-right", "chevron-right").addOption("custom", "custom").setValue(this.plugin.settings.icon.heading).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.icon.heading = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      if (this.plugin.settings.icon.heading == "custom") {
        new import_obsidian9.Setting(containerEl).setName("Custom icon").setClass("setting-indent-2").setDesc("enter Lucide Icon name").addText((text) => {
          text.inputEl.setAttr("type", "string");
          text.setPlaceholder(DEFAULT_SETTINGS.customIcon.heading).setValue(this.plugin.settings.customIcon.heading);
          text.inputEl.onblur = (e) => __async(this, null, function* () {
            const inputedValue = e.target.value;
            this.plugin.settings.customIcon.heading = inputedValue;
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          });
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Prefix").setClass("setting-indent").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setPlaceholder(DEFAULT_SETTINGS.prefix.heading).setValue(this.plugin.settings.prefix.heading);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.prefix.heading = inputedValue;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
      if (this.plugin.settings.prefix.heading != "") {
        new import_obsidian9.Setting(containerEl).setName("Repeat heading prefix").setClass("setting-indent-2").addDropdown((dropdown) => {
          dropdown.addOption("none", "none").addOption("level", "as many times as its level").addOption("levelminus1", "level - 1").setValue(this.plugin.settings.repeatHeadingPrefix).onChange((value) => __async(this, null, function* () {
            this.plugin.settings.repeatHeadingPrefix = value;
            this.display();
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          }));
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Add indent").setClass("setting-indent").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.indent.heading).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.indent.heading = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
    }
    if (this.plugin.settings.showElements.link) {
      this.containerEl.createEl("p", {
        text: "Links",
        cls: "setting-category"
      });
      new import_obsidian9.Setting(containerEl).setName("Icon").setClass("setting-indent").addDropdown((dropdown) => {
        dropdown.addOption("none", "none").addOption("link", "link").addOption("link-2", "link-2").addOption("custom", "custom").setValue(this.plugin.settings.icon.link).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.icon.link = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      if (this.plugin.settings.icon.link == "custom") {
        new import_obsidian9.Setting(containerEl).setName("Custom icon").setClass("setting-indent-2").setDesc("enter Lucide Icon name").addText((text) => {
          text.inputEl.setAttr("type", "string");
          text.setPlaceholder(DEFAULT_SETTINGS.customIcon.link).setValue(this.plugin.settings.customIcon.link);
          text.inputEl.onblur = (e) => __async(this, null, function* () {
            const inputedValue = e.target.value;
            this.plugin.settings.customIcon.link = inputedValue;
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          });
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Prefix").setClass("setting-indent").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setPlaceholder(DEFAULT_SETTINGS.prefix.link).setValue(this.plugin.settings.prefix.link);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.prefix.link = inputedValue;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
    }
    if (this.plugin.settings.showElements.tag) {
      this.containerEl.createEl("p", {
        text: "Tags",
        cls: "setting-category"
      });
      new import_obsidian9.Setting(containerEl).setName("Icon").setClass("setting-indent").addDropdown((dropdown) => {
        dropdown.addOption("none", "none").addOption("tag", "tag").addOption("hash", "hash").addOption("custom", "custom").setValue(this.plugin.settings.icon.tag).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.icon.tag = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      if (this.plugin.settings.icon.tag == "custom") {
        new import_obsidian9.Setting(containerEl).setName("Custom icon").setClass("setting-indent-2").setDesc("enter Lucide Icon name").addText((text) => {
          text.inputEl.setAttr("type", "string");
          text.setPlaceholder(DEFAULT_SETTINGS.customIcon.tag).setValue(this.plugin.settings.customIcon.tag);
          text.inputEl.onblur = (e) => __async(this, null, function* () {
            const inputedValue = e.target.value;
            this.plugin.settings.customIcon.tag = inputedValue;
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          });
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Prefix").setClass("setting-indent").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setPlaceholder(DEFAULT_SETTINGS.prefix.tag).setValue(this.plugin.settings.prefix.tag);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.prefix.tag = inputedValue;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
    }
    if (this.plugin.settings.showElements.link) {
      this.containerEl.createEl("p", {
        text: "List items",
        cls: "setting-category"
      });
      new import_obsidian9.Setting(containerEl).setName("Icon").setClass("setting-indent").addDropdown((dropdown) => {
        dropdown.addOption("none", "none").addOption("list", "list").addOption("chevron-right", "chevron-right").addOption("minus", "minus").addOption("circle-dot", "circle-dot").addOption("asterisk", "asterisk").addOption("custom", "custom").setValue(this.plugin.settings.icon.listItems).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.icon.listItems = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      if (this.plugin.settings.icon.listItems == "custom") {
        new import_obsidian9.Setting(containerEl).setName("Custom icon").setClass("setting-indent-2").setDesc("enter Lucide Icon name").addText((text) => {
          text.inputEl.setAttr("type", "string");
          text.setPlaceholder(DEFAULT_SETTINGS.customIcon.listItems).setValue(this.plugin.settings.customIcon.listItems);
          text.inputEl.onblur = (e) => __async(this, null, function* () {
            const inputedValue = e.target.value;
            this.plugin.settings.customIcon.listItems = inputedValue;
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          });
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Prefix").setClass("setting-indent").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setPlaceholder(DEFAULT_SETTINGS.prefix.listItems).setValue(this.plugin.settings.prefix.listItems);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.prefix.listItems = inputedValue;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
      this.containerEl.createEl("p", {
        text: "Tasks",
        cls: "setting-category"
      });
      new import_obsidian9.Setting(containerEl).setName("Icon").setClass("setting-indent").addDropdown((dropdown) => {
        dropdown.addOption("none", "none").addOption("square", "square").addOption("circle", "circle").addOption("list-checks", "list-checks").addOption("custom", "custom").setValue(this.plugin.settings.icon.task).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.icon.task = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      if (this.plugin.settings.icon.task == "custom") {
        new import_obsidian9.Setting(containerEl).setName("Custom icon").setClass("setting-indent-2").setDesc("enter Lucide Icon name").addText((text) => {
          text.inputEl.setAttr("type", "string");
          text.setPlaceholder(DEFAULT_SETTINGS.customIcon.task).setValue(this.plugin.settings.customIcon.task);
          text.inputEl.onblur = (e) => __async(this, null, function* () {
            const inputedValue = e.target.value;
            this.plugin.settings.customIcon.task = inputedValue;
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          });
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Prefix").setClass("setting-indent").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setPlaceholder(DEFAULT_SETTINGS.prefix.task).setValue(this.plugin.settings.prefix.task);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.prefix.task = inputedValue;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
      new import_obsidian9.Setting(containerEl).setName("Add checkbox text to prefix").setDesc("add [ ] or [x]").setClass("setting-indent").addToggle((toggle) => {
        toggle.setValue(this.plugin.settings.addCheckboxText).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.addCheckboxText = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      this.containerEl.createEl("p", {
        text: "Completed tasks",
        cls: "setting-category"
      });
      new import_obsidian9.Setting(containerEl).setName("Icon").setClass("setting-indent").addDropdown((dropdown) => {
        dropdown.addOption("none", "none").addOption("check-square", "check-square").addOption("check-circle", "check-circle").addOption("check", "check").addOption("custom", "custom").setValue(this.plugin.settings.icon.taskDone).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.icon.taskDone = value;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        }));
      });
      if (this.plugin.settings.icon.taskDone == "custom") {
        new import_obsidian9.Setting(containerEl).setName("Custom icon").setClass("setting-indent-2").setDesc("enter Lucide Icon name").addText((text) => {
          text.inputEl.setAttr("type", "string");
          text.setPlaceholder(DEFAULT_SETTINGS.customIcon.taskDone).setValue(this.plugin.settings.customIcon.taskDone);
          text.inputEl.onblur = (e) => __async(this, null, function* () {
            const inputedValue = e.target.value;
            this.plugin.settings.customIcon.taskDone = inputedValue;
            yield this.plugin.saveSettings();
            this.callRefreshView(false);
          });
        });
      }
      new import_obsidian9.Setting(containerEl).setName("Prefix").setClass("setting-indent").addText((text) => {
        text.inputEl.setAttr("type", "string");
        text.setPlaceholder(DEFAULT_SETTINGS.prefix.taskDone).setValue(this.plugin.settings.prefix.taskDone);
        text.inputEl.onblur = (e) => __async(this, null, function* () {
          const inputedValue = e.target.value;
          this.plugin.settings.prefix.taskDone = inputedValue;
          this.display();
          yield this.plugin.saveSettings();
          this.callRefreshView(false);
        });
      });
    }
    this.containerEl.createEl("h4", {
      text: "Others",
      cls: "setting-category"
    });
    new import_obsidian9.Setting(containerEl).setName("Maximum number of files to read").setDesc("To avoid overloading, files that exceed this number will be initially collapsed. (default = 50)").addText((text) => {
      text.inputEl.setAttr("type", "number");
      text.setPlaceholder(String(DEFAULT_SETTINGS.readLimit)).setValue(String(this.plugin.settings.readLimit));
      text.inputEl.onblur = (e) => __async(this, null, function* () {
        let parsed = parseInt(e.target.value, 10);
        if (parsed <= 0) {
          parsed = DEFAULT_SETTINGS.readLimit;
        }
        this.plugin.settings.readLimit = parsed;
        yield this.plugin.saveSettings();
        this.callRefreshView(true);
      });
    });
    new import_obsidian9.Setting(containerEl).setName("Maximum number of files to process").setDesc("To avoid overloading, if the number of files to be displayed exceeds this number, all files will be initially collapsed. (default = 100)").addText((text) => {
      text.inputEl.setAttr("type", "number");
      text.setPlaceholder(String(DEFAULT_SETTINGS.processLimit)).setValue(String(this.plugin.settings.processLimit));
      text.inputEl.onblur = (e) => __async(this, null, function* () {
        let parsed = parseInt(e.target.value, 10);
        if (parsed <= 0) {
          parsed = DEFAULT_SETTINGS.processLimit;
        }
        this.plugin.settings.processLimit = parsed;
        yield this.plugin.saveSettings();
        this.callRefreshView(true);
      });
    });
    new import_obsidian9.Setting(containerEl).setName("show debug information").setDesc("display debug information in the console").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showDebugInfo).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.showDebugInfo = value;
        this.display();
        yield this.plugin.saveSettings();
      }));
    });
  }
  callRefreshView(reload) {
    if (this.plugin.view) {
      this.plugin.view.refreshView(reload, reload);
    }
    if (this.plugin.folderview) {
      this.plugin.folderview.refreshView(reload, reload);
    }
  }
};

// src/folderView.ts
var import_obsidian10 = __toModule(require("obsidian"));
var import_obsidian11 = __toModule(require("obsidian"));
var MultipleNotesOutlineFolderViewType = "multiple-notes-outline-folder-view";
var MultipleNotesOutlineFolderView = class extends import_obsidian11.ItemView {
  constructor(leaf, plugin, settings) {
    super(leaf);
    this.targetFiles = {};
    this.fileStatus = {};
    this.fileInfo = {};
    this.outlineData = {};
    this.fileOrder = {};
    this.flagChanged = false;
    this.flagRegetTarget = false;
    this.flagSaveSettings = false;
    this.extractMode = false;
    this.extractTask = false;
    this.collapseAll = false;
    this.hasMainChanged = false;
    this.filecount = 0;
    this.changedFiles = [];
    this.viewType = "folder";
    this.pinnedMode = false;
    this.isDataviewEnabled = false;
    this.plugin = plugin;
    this.settings = settings;
  }
  getViewType() {
    return MultipleNotesOutlineFolderViewType;
  }
  getDisplayText() {
    return "MNO - folder view";
  }
  getIcon() {
    return "folders";
  }
  onOpen() {
    return __async(this, null, function* () {
      yield this.initView();
    });
  }
  onClose() {
    return __async(this, null, function* () {
    });
  }
  initView() {
    return __async(this, null, function* () {
      yield this.bootDelay();
      checkRelatedFiles(this.app, this.settings);
      checkFavAndRecentFiles(this.app, this.settings, this.viewType);
      this.collapseAll = this.settings.collapseAllAtStartup;
      this.theme = getTheme();
      setNoteTitleBackgroundColor(this.theme, this.settings);
      if (this.targetFolder) {
        this.refreshView(true, true);
      } else {
        this.activeFile = this.app.workspace.getActiveFile();
        if (this.activeFile) {
          this.targetFolder = this.activeFile.parent;
          this.refreshView(true, true);
        } else {
          console.log("Multiple Notes Outline: failed to get active file");
        }
      }
      const debouncerRequestRefresh = (0, import_obsidian10.debounce)(this.autoRefresh, 3e3, true);
      this.flagChanged = false;
      this.flagRegetTarget = false;
      this.registerEvent(this.app.metadataCache.on("changed", (file) => {
        for (const folder in this.targetFiles) {
          if (this.targetFiles[folder].includes(file)) {
            if (!this.changedFiles.includes(file)) {
              this.changedFiles.push(file);
            }
            this.flagChanged = true;
            debouncerRequestRefresh.call(this);
            break;
          }
        }
      }));
      this.registerEvent(this.app.vault.on("create", (file) => {
        this.flagRegetTarget = true;
        debouncerRequestRefresh.call(this);
      }));
      this.registerEvent(this.app.vault.on("delete", (file) => {
        let changedRelatedFiles = handleDeleteRelatedFiles(file, this.settings);
        if (changedRelatedFiles) {
          this.flagSaveSettings = true;
        }
        let changedFavAndRecent = handleDeleteFavAndRecentFiles(file, this.settings);
        if (changedFavAndRecent) {
          this.flagSaveSettings = true;
        }
        this.flagRegetTarget = true;
        debouncerRequestRefresh.call(this);
      }));
      this.registerEvent(this.app.vault.on("rename", (file, oldPath) => {
        let changedRelatedFiles = handleRenameRelatedFiles(file, oldPath, this.settings);
        if (changedRelatedFiles) {
          this.flagSaveSettings = true;
        }
        let changedFavAndRecent = handleRenameFavAndRecentFiles(file, oldPath, this.settings);
        if (changedFavAndRecent) {
          this.flagSaveSettings = true;
        }
        this.flagRegetTarget = true;
        debouncerRequestRefresh.call(this);
      }));
      this.registerEvent(this.app.workspace.on("css-change", (e) => {
        const newTheme = getTheme();
        if (newTheme !== this.theme) {
          this.theme = newTheme;
          setNoteTitleBackgroundColor(this.theme, this.settings);
        }
      }));
    });
  }
  bootDelay() {
    return __async(this, null, function* () {
      return new Promise((resolve) => {
        setTimeout(resolve, 600);
      });
    });
  }
  autoRefresh() {
    return __async(this, null, function* () {
      if (!(this.flagChanged || this.flagRegetTarget || this.flagSaveSettings)) {
        return;
      }
      if (this.flagChanged && !this.flagRegetTarget) {
        for (let i = 0; i < this.changedFiles.length; i++) {
          for (const folder in this.targetFiles) {
            let index = this.targetFiles[folder].indexOf(this.changedFiles[i]);
            if (index < 0) {
              continue;
            }
            this.fileInfo[folder][index] = yield getFileInfo(this.app, this.targetFiles[folder][index], this.settings, false, this.isDataviewEnabled);
            const newData = yield getOutline(this.app, this.targetFiles[folder][index], this.fileStatus[folder][index], this.fileInfo[folder][index], this.settings);
            if (newData) {
              this.outlineData[folder][index] = newData;
              this.fileStatus[folder][index].outlineReady = true;
            }
            const updateNoteChildrenEl = document.getElementById("MNO" + this.viewType + this.targetFiles[folder][index].path);
            updateNoteChildrenEl.empty();
            constructOutlineDOM.call(this, this.targetFiles[folder][index], this.fileInfo[folder][index], this.outlineData[folder][index], updateNoteChildrenEl, "folder");
          }
        }
      }
      if (this.flagSaveSettings) {
        yield this.plugin.saveSettings();
      }
      if (this.flagRegetTarget) {
        this.refreshView(this.flagRegetTarget, this.flagRegetTarget);
      }
      this.changedFiles = [];
      this.flagRegetTarget = false;
      this.flagChanged = false;
      this.flagSaveSettings = false;
    });
  }
  refreshView(flagGetTarget, flagGetOutline) {
    return __async(this, null, function* () {
      const startTime = performance.now();
      this.isDataviewEnabled = checkDataview(this.app);
      const containerEl = document.getElementById("MNOfolderview-listcontainer");
      const previousY = (containerEl == null ? void 0 : containerEl.scrollTop) ? containerEl.scrollTop : 0;
      this.filecount = 0;
      if (flagGetTarget) {
        if (this.targetFolder) {
          this.clearDatas();
          yield this.processFolder(this.targetFolder);
        }
      }
      const midTime = performance.now();
      if (this.settings.showDebugInfo) {
        console.log("Multiple Notes Outline: time required to get outlines, folder view: ", this.targetFolder.path, midTime - startTime);
      }
      drawUIFolderView.call(this);
      this.drawOutline(previousY);
      const endTime = performance.now();
      if (this.settings.showDebugInfo) {
        console.log("Multiple Notes Outline: time required to draw outlines, folder view: ", this.targetFolder.path, endTime - midTime);
        console.log("Multiple Notes Outline: time required to refresh view, folder view: ", this.targetFolder.path, endTime - startTime);
      }
    });
  }
  processFolder(folder) {
    return __async(this, null, function* () {
      this.targetFiles[folder.path] = folder.children;
      this.fileStatus[folder.path] = initFileStatus(this.targetFiles[folder.path]);
      this.fileOrder[folder.path] = [...Array(this.targetFiles[folder.path].length)].map((_, i) => i);
      sortFileOrder(this.fileOrder[folder.path], this.targetFiles[folder.path], this.fileStatus[folder.path], this.fileInfo[folder.path], this.settings);
      this.fileInfo[folder.path] = [];
      this.outlineData[folder.path] = [];
      if (folder.children.length <= this.settings.processLimit) {
        [this.fileStatus[folder.path], this.fileInfo[folder.path], this.outlineData[folder.path]] = yield this.getOutlines(this.targetFiles[folder.path], this.fileStatus[folder.path]);
      }
    });
  }
  getOutlines(files, status) {
    return __async(this, null, function* () {
      let fileInfo = [];
      let outlineData = [];
      for (let i = 0; i < files.length; i++) {
        if (checkFlag(this.targetFolder, files[i], "top", this.settings) == true) {
          status[i].isTop = true;
        }
        if (status[i].isFolder) {
          fileInfo.push(void 0);
          outlineData.push(void 0);
          if (!this.settings.collapseFolder) {
            yield this.processFolder(files[i]);
            status[i].outlineReady = true;
          }
        } else {
          if (this.filecount < this.settings.readLimit || status[i].isTop) {
            const info = yield getFileInfo(this.app, files[i], this.settings, false, this.isDataviewEnabled);
            fileInfo.push(info);
            const data = yield getOutline(this.app, files[i], status[i], info, this.settings);
            if (data) {
              outlineData.push(data);
              status[i].outlineReady = true;
            } else {
              outlineData.push(void 0);
            }
          } else {
            fileInfo.push(void 0);
            outlineData.push(void 0);
          }
          this.filecount++;
        }
      }
      return [status, fileInfo, outlineData];
    });
  }
  drawOutline(previousY) {
    this.maxLevel = this.settings.headingLevel.indexOf(true);
    const containerEl = createDiv("nav-files-container node-insert-event");
    const rootEl = containerEl.createDiv("tree-item nav-folder mod-root");
    const rootChildrenEl = rootEl.createDiv("tree-item-children nav-folder-children");
    containerEl.id = "MNOfolderview-listcontainer";
    const folderEl = rootChildrenEl.createDiv("tree-itme nav-folder");
    const folderTitleEl = folderEl.createDiv("tree-item-self is-clickable mod-collapsible nav-folder-title is-targetfolder");
    folderTitleEl.createDiv("tree-item-inner nav-folder-title-content").setText(this.targetFolder.path);
    folderTitleEl.addEventListener("contextmenu", (event) => {
      const menu = new import_obsidian10.Menu();
      if (this.settings.favorite.folder.includes(this.targetFolder.path)) {
        menu.addItem((item) => item.setTitle("MNO: Remove from favorites").setIcon("bookmark-minus").onClick(() => __async(this, null, function* () {
          deleteFavAndRecent.call(this, this.targetFolder.path, "folder", "favorite");
          yield this.plugin.saveSettings();
        })));
      } else {
        menu.addItem((item) => item.setTitle("MNO: Add to favorites").setIcon("bookmark-plus").onClick(() => __async(this, null, function* () {
          updateFavAndRecent.call(this, this.targetFolder.path, "folder", "favorite");
          yield this.plugin.saveSettings();
        })));
      }
      menu.showAtMouseEvent(event);
    });
    const folderChildrenEl = folderEl.createDiv("tree-item-children nav-folder-children");
    const categoryAOTEl = folderChildrenEl.createDiv("tree-item nav-folder");
    const categoryMainEl = folderChildrenEl.createDiv("tree-item nav-folder");
    constructNoteDOM.call(this, this.targetFiles[this.targetFolder.path], this.fileStatus[this.targetFolder.path], this.fileInfo[this.targetFolder.path], this.outlineData[this.targetFolder.path], categoryMainEl, "folder", categoryAOTEl, this.targetFolder, this.fileOrder[this.targetFolder.path]);
    this.contentEl.appendChild(containerEl);
    if (this.hasMainChanged == false && previousY != 0) {
      containerEl.scrollTop = previousY;
    }
    this.hasMainChanged = false;
  }
  clearDatas() {
    this.targetFiles = {};
    this.fileStatus = {};
    this.fileInfo = {};
    this.outlineData = {};
    this.fileOrder = {};
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  autoupdateFileView: true,
  suspendUpdateByClickingView: true,
  autoupdateFolderView: false,
  showFiles: {
    main: true,
    outgoing: true,
    backlink: true
  },
  showElements: {
    heading: true,
    link: true,
    tag: true,
    listItems: true
  },
  headingLevel: [true, true, true, false, false, false],
  hideLinksBetweenRelatedFiles: "none",
  allRootItems: false,
  allTasks: true,
  taskOnly: false,
  hideCompletedTasks: false,
  displayFileInfo: "lines",
  viewPosition: "right",
  wordsToIgnore: {
    heading: [],
    link: [],
    tag: [],
    listItems: []
  },
  inlinePreview: true,
  tooltipPreview: true,
  tooltipPreviewDirection: "left",
  includeOnly: "none",
  wordsToInclude: [],
  includeBeginning: true,
  primeElement: "none",
  wordsToExclude: {
    heading: [],
    link: [],
    tag: [],
    listItems: []
  },
  wordsToExtract: "",
  icon: {
    heading: "none",
    link: "link",
    tag: "tag",
    listItems: "list",
    note: "file",
    task: "square",
    taskDone: "check-square"
  },
  customIcon: {
    heading: "hash",
    link: "link",
    tag: "tag",
    listItems: "list",
    note: "file",
    task: "square",
    taskDone: "check-square"
  },
  indent: {
    heading: true,
    link: true,
    tag: true,
    listItems: true
  },
  indentFollowHeading: 2,
  prefix: {
    heading: "",
    link: "",
    tag: "",
    listItems: "",
    task: "",
    taskDone: ""
  },
  repeatHeadingPrefix: "none",
  addCheckboxText: false,
  hideDuplicated: true,
  readLimit: 50,
  processLimit: 100,
  noteTitleBackgroundColor: "accent",
  customNoteTitleBackgroundColor: {
    light: "#BEBEBE",
    dark: "#4E4E4E"
  },
  customNoteTitleBackgroundColorHover: {
    light: "#AEAEAE",
    dark: "#5E5E5E"
  },
  tagsAOT: [],
  showBacklinks: true,
  relatedFiles: {},
  openAtStartup: {
    file: false,
    folder: false
  },
  collapseFolder: true,
  sortType: "alphabetAscending",
  showDebugInfo: false,
  collapseAllAtStartup: false,
  showPropertyLinks: true,
  recent: {
    file: [],
    folder: []
  },
  favorite: {
    file: [],
    folder: []
  },
  numOfRecentFiles: 30,
  pinAfterJump: true
};
var FILE_TITLE_BACKGROUND_COLOR = {
  default: {
    light: "#F6F6F6",
    dark: "#262626"
  },
  accent: {
    light: "#E3E3E3",
    dark: "#363636"
  }
};
var FILE_TITLE_BACKGROUND_COLOR_HOVER = {
  default: {
    light: "#E3E3E3",
    dark: "#363636"
  },
  accent: {
    light: "#D3D3D3",
    dark: "#464646"
  }
};
var MultipleNotesOutlinePlugin3 = class extends import_obsidian12.Plugin {
  constructor() {
    super(...arguments);
    this.checkFileView = (activateView) => __async(this, null, function* () {
      let [leaf] = this.app.workspace.getLeavesOfType(MultipleNotesOutlineViewType);
      if (!leaf) {
        switch (this.settings.viewPosition) {
          case "right":
            leaf = this.app.workspace.getRightLeaf(false);
            break;
          case "left":
            leaf = this.app.workspace.getLeftLeaf(false);
            break;
          case "tab":
            leaf = this.app.workspace.getLeaf("tab");
            break;
          case "split":
            leaf = this.app.workspace.getLeaf("split");
            break;
          case "popout":
            leaf = this.app.workspace.getLeaf("window");
            break;
        }
        yield leaf.setViewState({ type: MultipleNotesOutlineViewType });
      }
      if (activateView) {
        this.app.workspace.revealLeaf(leaf);
      }
    });
    this.checkFolderView = (activateView) => __async(this, null, function* () {
      let [leaf] = this.app.workspace.getLeavesOfType(MultipleNotesOutlineFolderViewType);
      if (!leaf) {
        switch (this.settings.viewPosition) {
          case "right":
            leaf = this.app.workspace.getRightLeaf(false);
            break;
          case "left":
            leaf = this.app.workspace.getLeftLeaf(false);
            break;
          case "tab":
            leaf = this.app.workspace.getLeaf("tab");
            break;
          case "split":
            leaf = this.app.workspace.getLeaf("split");
            break;
          case "popout":
            leaf = this.app.workspace.getLeaf("window");
            break;
        }
        yield leaf.setViewState({ type: MultipleNotesOutlineFolderViewType });
      }
      if (activateView) {
        this.app.workspace.revealLeaf(leaf);
      }
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.registerView(MultipleNotesOutlineViewType, (leaf) => this.view = new MultipleNotesOutlineView(leaf, this, this.settings));
      this.registerView(MultipleNotesOutlineFolderViewType, (leaf) => this.folderview = new MultipleNotesOutlineFolderView(leaf, this, this.settings));
      this.addCommand({
        id: "open-file-view",
        name: "Open File View",
        callback: () => __async(this, null, function* () {
          this.checkFileView(true);
        })
      });
      this.addCommand({
        id: "open-folder-view",
        name: "Open Folder View",
        callback: () => __async(this, null, function* () {
          this.checkFolderView(true);
        })
      });
      this.addCommand({
        id: "erase-all-fold-AOT-information",
        name: "Erase all folding/always-on-top information",
        callback: () => __async(this, null, function* () {
          const onSubmit = () => __async(this, null, function* () {
            this.settings.relatedFiles = {};
            yield this.saveSettings();
          });
          new ModalConfirm(this.app, this, "Are you sure you want to erase all folding/always-on-top information?", onSubmit).open();
        })
      });
      this.addCommand({
        id: "erase-non-favorite-fold-AOT-information",
        name: "Erase folding/always-on-top information except favorite files/folders",
        callback: () => __async(this, null, function* () {
          const onSubmit = () => __async(this, null, function* () {
            for (let srcFilePath in this.settings.relatedFiles) {
              if (!this.settings.favorite.file.includes(srcFilePath) && !this.settings.favorite.folder.includes(srcFilePath)) {
                delete this.settings.relatedFiles[srcFilePath];
              } else {
              }
            }
            yield this.saveSettings();
          });
          new ModalConfirm(this.app, this, "Are you sure you want to erase folding/always-on-top information of not favorite files/folders?", onSubmit).open();
        })
      });
      this.app.workspace.onLayoutReady(() => __async(this, null, function* () {
        if (this.settings.openAtStartup.file) {
          this.checkFileView(false);
        }
        if (this.settings.openAtStartup.folder) {
          this.checkFolderView(false);
        }
      }));
      this.addSettingTab(new MultipleNotesOutlineSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL2ZpbGVWaWV3LnRzIiwgInNyYy9nZXRUYXJnZXRGaWxlcy50cyIsICJzcmMvZ2V0T3V0bGluZS50cyIsICJzcmMvdXRpbC50cyIsICJzcmMvZHJhd1VJLnRzIiwgInNyYy9GYXZBbmRSZWNlbnQudHMiLCAic3JjL2NvbnN0cnVjdERPTS50cyIsICJzcmMvc2V0dGluZy50cyIsICJzcmMvZm9sZGVyVmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBQb3MsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IHsgTXVsdGlwbGVOb3Rlc091dGxpbmVWaWV3LCBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXdUeXBlIH0gZnJvbSAnc3JjL2ZpbGVWaWV3J1xyXG5pbXBvcnQgeyBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdUYWIgfSBmcm9tICdzcmMvc2V0dGluZydcclxuXHJcbmltcG9ydCB7IE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlldywgTXVsdGlwbGVOb3Rlc091dGxpbmVGb2xkZXJWaWV3VHlwZX0gZnJvbSAnc3JjL2ZvbGRlclZpZXcnO1xyXG5pbXBvcnQgeyBNb2RhbENvbmZpcm0gfSBmcm9tICcuL3V0aWwnO1xyXG5cclxuLy8gXHU4QTJEXHU1QjlBXHU5ODA1XHU3NkVFIFxyXG5leHBvcnQgaW50ZXJmYWNlIE11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3Mge1xyXG5cdGF1dG91cGRhdGVGaWxlVmlldzogYm9vbGVhbjtcclxuXHRzdXNwZW5kVXBkYXRlQnlDbGlja2luZ1ZpZXc6IGJvb2xlYW47XHJcblx0YXV0b3VwZGF0ZUZvbGRlclZpZXc6IGJvb2xlYW47XHJcblxyXG5cdHNob3dGaWxlczp7XHJcblx0XHRtYWluOiBib29sZWFuLFxyXG5cdFx0b3V0Z29pbmc6IGJvb2xlYW4sXHJcblx0XHRiYWNrbGluazogYm9vbGVhblxyXG5cdH07XHJcblxyXG5cdHNob3dFbGVtZW50czp7XHJcblx0XHRoZWFkaW5nOiBib29sZWFuLFxyXG5cdFx0bGluazogYm9vbGVhbixcclxuXHRcdHRhZzogYm9vbGVhbixcclxuXHRcdGxpc3RJdGVtczogYm9vbGVhblxyXG5cdH07XHJcblx0XHJcblx0aGVhZGluZ0xldmVsOiBib29sZWFuW107XHJcblxyXG5cdGhpZGVMaW5rc0JldHdlZW5SZWxhdGVkRmlsZXM6ICdub25lJyB8ICdtYWluT25seSd8J3RvTWFpbk9ubHknfCdhbGwnO1xyXG5cclxuXHRhbGxSb290SXRlbXM6IGJvb2xlYW47XHJcblx0YWxsVGFza3M6IGJvb2xlYW47XHJcblx0dGFza09ubHk6IGJvb2xlYW47XHJcblx0aGlkZUNvbXBsZXRlZFRhc2tzOiBib29sZWFuO1xyXG5cdGRpc3BsYXlGaWxlSW5mbzogc3RyaW5nOyAvLyBub25lIHx8IGxpbmVzIHx8IHRhZ1xyXG5cdHZpZXdQb3NpdGlvbjogc3RyaW5nO1x0Ly9yaWdodCB8fCBsZWZ0IHx8IHRhYiB8fCBzcGxpdCB8fCBwb3BvdXQgXHJcblxyXG5cdHdvcmRzVG9JZ25vcmU6e1x0XHQvL2ZpbHRlclxyXG5cdFx0aGVhZGluZzogc3RyaW5nW10sXHJcblx0XHRsaW5rOiBzdHJpbmdbXSxcclxuXHRcdHRhZzogc3RyaW5nW10sXHJcblx0XHRsaXN0SXRlbXM6IHN0cmluZ1tdXHJcblx0fTtcclxuXHJcblx0aW5saW5lUHJldmlldzogYm9vbGVhbjtcclxuXHR0b29sdGlwUHJldmlldzogYm9vbGVhbjtcclxuXHR0b29sdGlwUHJldmlld0RpcmVjdGlvbjogc3RyaW5nOyAvLyBsZWZ0IHx8IHJpZ2h0IHx8IGJvdHRvbSB8fCB0b3BcclxuXHJcblxyXG5cdGluY2x1ZGVPbmx5OiBzdHJpbmc7XHQvLyBub25lIHx8IGhlYWRpbmcsIGxpbmssIHRhZywgbGlzdEl0ZW1zXHJcblx0d29yZHNUb0luY2x1ZGU6IHN0cmluZ1tdO1xyXG5cdGluY2x1ZGVCZWdpbm5pbmc6IGJvb2xlYW47XHJcblxyXG5cdHByaW1lRWxlbWVudDogc3RyaW5nOyAvLyBub25lIHx8IGhlYWRpbmcsIGxpbmssIHRhZywgbGlzdEl0ZW1zXHJcblx0d29yZHNUb0V4Y2x1ZGU6e1xyXG5cdFx0aGVhZGluZzogc3RyaW5nW10sXHJcblx0XHRsaW5rOiBzdHJpbmdbXSxcclxuXHRcdHRhZzogc3RyaW5nW10sXHJcblx0XHRsaXN0SXRlbXM6IHN0cmluZ1tdXHJcblx0fTtcclxuXHR3b3Jkc1RvRXh0cmFjdDogc3RyaW5nO1xyXG5cclxuXHRpY29uOntcdC8vaWNvbiBmb3IgZWFjaCB0eXBlIG9mIGVsZW1lbnRcclxuXHRcdGhlYWRpbmc6IHN0cmluZyxcclxuXHRcdGxpbms6IHN0cmluZyxcclxuXHRcdHRhZzogc3RyaW5nLFxyXG5cdFx0bGlzdEl0ZW1zOiBzdHJpbmcsXHJcblx0XHRub3RlOiBzdHJpbmcsXHJcblx0XHR0YXNrOiBzdHJpbmcsXHJcblx0XHR0YXNrRG9uZTogc3RyaW5nLFxyXG5cdH07XHJcblxyXG5cdGN1c3RvbUljb246e1xyXG5cdFx0aGVhZGluZzogc3RyaW5nLFxyXG5cdFx0bGluazogc3RyaW5nLFxyXG5cdFx0dGFnOiBzdHJpbmcsXHJcblx0XHRsaXN0SXRlbXM6IHN0cmluZyxcclxuXHRcdG5vdGU6IHN0cmluZyxcclxuXHRcdHRhc2s6IHN0cmluZyxcclxuXHRcdHRhc2tEb25lOiBzdHJpbmcsXHJcblx0fTtcclxuXHJcblx0aW5kZW50OntcclxuXHRcdGhlYWRpbmc6IGJvb2xlYW47XHJcblx0XHRsaW5rOiBib29sZWFuO1xyXG5cdFx0dGFnOiBib29sZWFuO1xyXG5cdFx0bGlzdEl0ZW1zOiBib29sZWFuO1xyXG5cdH07XHJcblx0aW5kZW50Rm9sbG93SGVhZGluZzogbnVtYmVyOyAvLyAwIGRvbid0IGZvbGxvdyAxOnNhbWUgbGV2ZWwgMjogbGV2ZWwrMVxyXG5cclxuXHRwcmVmaXg6e1xyXG5cdFx0aGVhZGluZzogc3RyaW5nO1xyXG5cdFx0bGluazogc3RyaW5nO1xyXG5cdFx0dGFnOiBzdHJpbmc7XHJcblx0XHRsaXN0SXRlbXM6IHN0cmluZztcclxuXHRcdHRhc2s6IHN0cmluZztcclxuXHRcdHRhc2tEb25lOiBzdHJpbmc7XHJcblx0fTtcclxuXHRyZXBlYXRIZWFkaW5nUHJlZml4OiBzdHJpbmc7IC8vIG5vbmUsIGxldmVsLCBsZXZlbC0xXHJcblx0YWRkQ2hlY2tib3hUZXh0OiBib29sZWFuO1xyXG5cclxuXHRyZWFkTGltaXQ6IG51bWJlcjtcclxuXHRwcm9jZXNzTGltaXQ6IG51bWJlcjtcclxuXHJcblx0aGlkZUR1cGxpY2F0ZWQ6IGJvb2xlYW47XHJcblxyXG5cdC8vIFx1MzBDRVx1MzBGQ1x1MzBDOFx1MzBCRlx1MzBBNFx1MzBDOFx1MzBFQlx1MzA2RVx1ODBDQ1x1NjY2Rlx1ODI3MlxyXG5cdG5vdGVUaXRsZUJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xyXG5cdGN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvcjoge1xyXG5cdFx0bGlnaHQ6IHN0cmluZztcclxuXHRcdGRhcms6IHN0cmluZztcclxuXHR9XHJcblx0Y3VzdG9tTm90ZVRpdGxlQmFja2dyb3VuZENvbG9ySG92ZXI6IHtcclxuXHRcdGxpZ2h0OiBzdHJpbmc7XHJcblx0XHRkYXJrOiBzdHJpbmc7XHJcblx0fVxyXG5cclxuXHR0YWdzQU9UOiBzdHJpbmdbXTtcclxuXHJcblx0c2hvd0JhY2tsaW5rczogYm9vbGVhbjtcclxuXHJcblx0Ly8gXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHU5NUEyXHU0RkMyXHU2MDI3XHUzMDZCXHU5NUEyXHUzMDU5XHUzMDhCXHU2MEM1XHU1ODMxIHNyY1BhdGhcdTMwNkVcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwNENcdTMwRTFcdTMwQTRcdTMwRjNcdTMwNkVcdTU4MzRcdTU0MDhcdTMwMDFkc3RQYXRoXHUzMDZFXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDRDZm9sZFx1RkYxQVx1NjI5OFx1MzA4QVx1MzA1Rlx1MzA1Rlx1MzA3RVx1MzA4Q1x1MzA4Qlx1MzAwMXRvcFx1RkYxQVx1MzBDOFx1MzBDM1x1MzBEN1x1MzA2Qlx1ODg2OFx1NzkzQVxyXG5cdHJlbGF0ZWRGaWxlczoge1xyXG5cdFx0W3NyY1BhdGg6IHN0cmluZ106IHtcclxuXHRcdFx0W2RzdFBhdGg6c3RyaW5nXToge1xyXG5cdFx0XHRcdCdmb2xkJz86IGJvb2xlYW47XHJcblx0XHRcdFx0J3RvcCc/OiBib29sZWFuXHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH07IFxyXG5cclxuXHRvcGVuQXRTdGFydHVwOntcclxuXHRcdGZpbGU6IGJvb2xlYW47XHJcblx0XHRmb2xkZXI6IGJvb2xlYW47XHJcblx0fVxyXG5cclxuXHRjb2xsYXBzZUZvbGRlcjogYm9vbGVhbjtcclxuXHRzb3J0VHlwZTogJ2FscGhhYmV0QXNjZW5kaW5nJyB8ICdhbHBoYWJldERlc2NlbmRpbmcnIHwgJ2N0aW1lRGVzY2VuZGluZycgfCAnY3RpbWVBc2NlbmRpbmcnIHwgJ210aW1lRGVzY2VuZGluZycgfCAnbXRpbWVBc2NlbmRpbmcnO1xyXG5cdFxyXG5cclxuXHRzaG93RGVidWdJbmZvOiBib29sZWFuO1xyXG5cclxuXHRjb2xsYXBzZUFsbEF0U3RhcnR1cDogYm9vbGVhbjtcclxuXHJcblx0c2hvd1Byb3BlcnR5TGlua3M6IGJvb2xlYW47XHJcblxyXG5cdHJlY2VudDoge1xyXG5cdFx0ZmlsZTogc3RyaW5nW107XHJcblx0XHRmb2xkZXI6IHN0cmluZ1tdO1xyXG5cdH07XHJcblx0ZmF2b3JpdGU6IHtcclxuXHRcdGZpbGU6IHN0cmluZ1tdO1xyXG5cdFx0Zm9sZGVyOiBzdHJpbmdbXTtcclxuXHR9XHJcblxyXG5cdG51bU9mUmVjZW50RmlsZXM6IG51bWJlcjtcclxuXHRwaW5BZnRlckp1bXA6IGJvb2xlYW47ICAvLyBmaWxlVmlld1x1MzA2Qlx1MzA0QVx1MzA0NFx1MzA2Nlx1NUM2NVx1NkI3NC9cdTMwNEFcdTZDMTdcdTMwNkJcdTUxNjVcdTMwOEFcdTMwOTJcdTk1OEJcdTMwNDRcdTMwNUZcdTMwNjhcdTMwNERcdTMwNkJcdTMwRDRcdTMwRjNcdTMwOTJcdTRFRDhcdTUyQTBcdTMwNTlcdTMwOEJcdTMwNEJcdTMwNjlcdTMwNDZcdTMwNEJcclxuXHJcbn0gXHJcblxyXG4vLyBcdThBMkRcdTVCOUFcdTk4MDVcdTc2RUVcdTMwQzdcdTMwRDVcdTMwQTlcdTMwRUJcdTMwQzhcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3MgPSB7XHJcblx0YXV0b3VwZGF0ZUZpbGVWaWV3OiB0cnVlLFxyXG5cdHN1c3BlbmRVcGRhdGVCeUNsaWNraW5nVmlldzogdHJ1ZSxcclxuXHRhdXRvdXBkYXRlRm9sZGVyVmlldzogZmFsc2UsXHJcblxyXG5cdHNob3dGaWxlczp7XHJcblx0XHRtYWluOiB0cnVlLFxyXG5cdFx0b3V0Z29pbmc6IHRydWUsXHJcblx0XHRiYWNrbGluazogdHJ1ZVxyXG5cdH0sXHJcblx0XHJcblx0c2hvd0VsZW1lbnRzOiB7XHJcblx0XHRoZWFkaW5nOiB0cnVlLFxyXG5cdFx0bGluazogdHJ1ZSxcclxuXHRcdHRhZzogdHJ1ZSxcclxuXHRcdGxpc3RJdGVtczogdHJ1ZVxyXG5cdH0sXHJcblx0XHJcblx0aGVhZGluZ0xldmVsOiBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV0sXHJcblxyXG5cdGhpZGVMaW5rc0JldHdlZW5SZWxhdGVkRmlsZXM6ICdub25lJyxcclxuXHJcblx0YWxsUm9vdEl0ZW1zOiBmYWxzZSxcclxuXHRhbGxUYXNrczogdHJ1ZSxcclxuXHR0YXNrT25seTogZmFsc2UsXHJcblx0aGlkZUNvbXBsZXRlZFRhc2tzOiBmYWxzZSxcclxuXHRkaXNwbGF5RmlsZUluZm86ICdsaW5lcycsXHJcblx0dmlld1Bvc2l0aW9uOiAncmlnaHQnLFxyXG5cclxuXHR3b3Jkc1RvSWdub3JlOntcclxuXHRcdGhlYWRpbmc6IFtdLFxyXG5cdFx0bGluazogW10sXHJcblx0XHR0YWc6IFtdLFxyXG5cdFx0bGlzdEl0ZW1zOiBbXVxyXG5cdH0sXHJcblxyXG5cdGlubGluZVByZXZpZXc6IHRydWUsXHJcblx0dG9vbHRpcFByZXZpZXc6IHRydWUsXHJcblx0dG9vbHRpcFByZXZpZXdEaXJlY3Rpb246ICdsZWZ0JyxcclxuXHJcblx0XHJcblx0aW5jbHVkZU9ubHk6ICdub25lJyxcclxuXHR3b3Jkc1RvSW5jbHVkZTogW10sXHJcblx0aW5jbHVkZUJlZ2lubmluZzogdHJ1ZSxcclxuXHJcblx0cHJpbWVFbGVtZW50OiAnbm9uZScsXHJcblx0d29yZHNUb0V4Y2x1ZGU6e1xyXG5cdFx0aGVhZGluZzogW10sXHJcblx0XHRsaW5rOiBbXSxcclxuXHRcdHRhZzogW10sXHJcblx0XHRsaXN0SXRlbXM6IFtdXHJcblx0fSxcclxuXHR3b3Jkc1RvRXh0cmFjdDogJycsXHJcblxyXG5cdGljb246e1x0XHJcblx0XHRoZWFkaW5nOiAnbm9uZScsXHJcblx0XHRsaW5rOiAnbGluaycsXHJcblx0XHR0YWc6ICd0YWcnLFxyXG5cdFx0bGlzdEl0ZW1zOiAnbGlzdCcsXHJcblx0XHRub3RlOiAnZmlsZScsXHJcblx0XHR0YXNrOiAnc3F1YXJlJyxcclxuXHRcdHRhc2tEb25lOiAnY2hlY2stc3F1YXJlJ1xyXG5cdH0sXHJcblx0Y3VzdG9tSWNvbjp7XHJcblx0XHRoZWFkaW5nOiAnaGFzaCcsXHJcblx0XHRsaW5rOiAnbGluaycsXHJcblx0XHR0YWc6ICd0YWcnLFxyXG5cdFx0bGlzdEl0ZW1zOiAnbGlzdCcsXHJcblx0XHRub3RlOidmaWxlJyxcclxuXHRcdHRhc2s6J3NxdWFyZScsXHJcblx0XHR0YXNrRG9uZTonY2hlY2stc3F1YXJlJ1xyXG5cdH0sXHJcblxyXG5cdGluZGVudDp7XHJcblx0XHRoZWFkaW5nOiB0cnVlLFxyXG5cdFx0bGluazogdHJ1ZSxcclxuXHRcdHRhZzogdHJ1ZSxcclxuXHRcdGxpc3RJdGVtczogdHJ1ZSxcclxuXHR9LFxyXG5cdGluZGVudEZvbGxvd0hlYWRpbmc6IDIsXHJcblx0cHJlZml4OntcclxuXHRcdGhlYWRpbmc6ICcnLFxyXG5cdFx0bGluazogJycsXHJcblx0XHR0YWc6ICcnLFxyXG5cdFx0bGlzdEl0ZW1zOiAnJyxcclxuXHRcdHRhc2s6ICcnLFxyXG5cdFx0dGFza0RvbmU6ICcnXHJcblx0fSxcclxuXHRyZXBlYXRIZWFkaW5nUHJlZml4Oidub25lJyxcclxuXHRhZGRDaGVja2JveFRleHQ6IGZhbHNlLFxyXG5cdFxyXG5cdGhpZGVEdXBsaWNhdGVkOiB0cnVlLFxyXG5cclxuXHRyZWFkTGltaXQ6IDUwLFxyXG5cdHByb2Nlc3NMaW1pdDogMTAwLFxyXG5cclxuXHRub3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3I6ICdhY2NlbnQnLFxyXG5cdGN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvcjoge1xyXG5cdFx0bGlnaHQ6ICcjQkVCRUJFJyxcclxuXHRcdGRhcms6ICcjNEU0RTRFJ1xyXG5cdH0sXHJcblx0Y3VzdG9tTm90ZVRpdGxlQmFja2dyb3VuZENvbG9ySG92ZXI6IHtcclxuXHRcdGxpZ2h0OiAnI0FFQUVBRScsXHJcblx0XHRkYXJrOicjNUU1RTVFJ1xyXG5cdH0sXHJcblx0XHJcblx0dGFnc0FPVDpbXSxcclxuXHJcblx0c2hvd0JhY2tsaW5rczogdHJ1ZSxcclxuXHJcblx0cmVsYXRlZEZpbGVzOiB7fSxcclxuXHJcblx0b3BlbkF0U3RhcnR1cDp7XHJcblx0XHRmaWxlOiBmYWxzZSxcclxuXHRcdGZvbGRlcjogZmFsc2VcclxuXHR9LFxyXG5cclxuXHRjb2xsYXBzZUZvbGRlcjogdHJ1ZSxcclxuXHRzb3J0VHlwZTogICdhbHBoYWJldEFzY2VuZGluZycsXHJcblxyXG5cdHNob3dEZWJ1Z0luZm86IGZhbHNlLFxyXG5cdGNvbGxhcHNlQWxsQXRTdGFydHVwOiBmYWxzZSxcclxuXHJcblx0c2hvd1Byb3BlcnR5TGlua3M6IHRydWUsXHJcblxyXG5cdHJlY2VudDoge1xyXG5cdFx0ZmlsZTogW10sXHJcblx0XHRmb2xkZXI6W11cclxuXHR9LFxyXG5cdGZhdm9yaXRlOiB7XHJcblx0XHRmaWxlOltdLFxyXG5cdFx0Zm9sZGVyOltdXHJcblx0fSxcclxuXHJcblx0bnVtT2ZSZWNlbnRGaWxlczogMzAsXHJcblx0cGluQWZ0ZXJKdW1wOiB0cnVlLFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGaWxlU3RhdHVzIHtcclxuXHRpc0ZvbGRlZDogYm9vbGVhbjsgLy8gXHU3M0ZFXHU1NzI4XHUzMEQ1XHUzMEE5XHUzMEZDXHUzMEVCXHUzMEM5XHUzMDU1XHUzMDhDXHUzMDY2XHUzMDQ0XHUzMDhCXHUzMDRCXHJcblx0aXNUb3A6IGJvb2xlYW47IC8vIEFsd2F5cyBvbiB0b3AgXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDRDXHU3QUNCXHUzMDYzXHUzMDY2XHUzMDQ0XHUzMDhCXHUzMDRCXHJcblx0ZHVwbGljYXRlZDoge1xyXG5cdFx0bWFpbjpib29sZWFuLFxyXG5cdFx0b3V0Z29pbmc6Ym9vbGVhbixcclxuXHRcdGJhY2tsaW5rOmJvb2xlYW4sXHJcblx0XHRzZWxmOmJvb2xlYW5cclxuXHR9O1x0IC8vIFx1NTQwQ1x1MzA1OFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA0Q1x1NjVFMlx1MzA2Qlx1MzBFQVx1MzBCOVx1MzBDOFx1NTE4NVx1MzA2Qlx1MzA0Mlx1MzA4Qlx1MzA0QiAoZmlsZSB2aWV3KVxyXG5cdG91dGxpbmVSZWFkeTogYm9vbGVhbjsgLy8gb3V0bGluZVx1MzA5Mlx1NTNENlx1NUY5N1x1MzA1N1x1MzA1Rlx1MzA0Qlx1MzA2OVx1MzA0Nlx1MzA0QlxyXG5cdGlzRm9sZGVyOmJvb2xlYW4gOyBcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGaWxlSW5mbyB7XHJcblx0bGluZXM6IHN0cmluZ1tdO1xyXG5cdG51bU9mTGluZXM6IG51bWJlcjtcclxuXHRiYWNrbGlua3M/OiBURmlsZVtdO1xyXG5cdGZyb250bWF0dGVyTGlua3M/OiB7XHJcblx0XHRkaXNwbGF5VGV4dD86IHN0cmluZztcclxuXHRcdGtleTogc3RyaW5nO1xyXG5cdFx0bGluazogc3RyaW5nO1xyXG5cdFx0b3JpZ2luYWw6IHN0cmluZztcclxuXHR9W107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3V0bGluZURhdGEge1x0XHJcblxyXG5cdHR5cGVPZkVsZW1lbnQ6J2hlYWRpbmcnfCdsaW5rJ3wndGFnJ3wnbGlzdEl0ZW1zJztcclxuXHRwb3NpdGlvbjpQb3M7XHJcblx0bGluaz86c3RyaW5nO1xyXG5cdGRpc3BsYXlUZXh0Pzogc3RyaW5nO1xyXG5cdC8vIGxldmVsIFx1RkYxQWxpc3RJdGVtc1x1MzA2Qlx1MzA2NFx1MzA0NFx1MzA2Nlx1MzA2RjBcdUZGMUFcdTMwQzhcdTMwQzNcdTMwRDdcdTMwMDExXHVGRjFBXHUzMEVCXHUzMEZDXHUzMEM4XHUzMDAxMlx1RkYxQVx1MzA1RFx1MzA4Q1x1NEVFNVx1NEUwQlxyXG5cdGxldmVsPzpudW1iZXI7XHJcblx0dGFzaz86IHN0cmluZ3x1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBGSUxFX1RJVExFX0JBQ0tHUk9VTkRfQ09MT1IgPSB7XHJcblx0ZGVmYXVsdDoge1xyXG5cdFx0bGlnaHQ6ICcjRjZGNkY2JyxcclxuXHRcdGRhcms6ICcjMjYyNjI2J1xyXG5cdH0sXHJcblx0YWNjZW50OiB7XHJcblx0XHRsaWdodDogJyNFM0UzRTMnLFxyXG5cdFx0ZGFyazogJyMzNjM2MzYnXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRklMRV9USVRMRV9CQUNLR1JPVU5EX0NPTE9SX0hPVkVSID0ge1xyXG5cdGRlZmF1bHQ6IHtcclxuXHRcdGxpZ2h0OiAnI0UzRTNFMycsXHJcblx0XHRkYXJrOiAnIzM2MzYzNidcclxuXHR9LFxyXG5cdGFjY2VudDoge1xyXG5cdFx0bGlnaHQ6ICcjRDNEM0QzJyxcclxuXHRcdGRhcms6ICcjNDY0NjQ2J1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlwbGVOb3Rlc091dGxpbmVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cclxuXHRzZXR0aW5nczogTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncztcclxuXHR2aWV3OiBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXc7XHJcblxyXG5cdGZvbGRlcnZpZXc6IE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlldztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0XHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cdFx0Ly9yZWdpc3RlciBjdXN0b21lIHZpZXcgYWNjb3JkaW5nIHRvIERldmxvcGVyIERvY3NcclxuXHRcdHRoaXMucmVnaXN0ZXJWaWV3KFxyXG5cdFx0XHRNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXdUeXBlLFxyXG5cdFx0XHQobGVhZikgPT4gKHRoaXMudmlldyA9bmV3IE11bHRpcGxlTm90ZXNPdXRsaW5lVmlldyhsZWFmLCB0aGlzLCB0aGlzLnNldHRpbmdzKSlcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlclZpZXcoXHJcblx0XHRcdE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlld1R5cGUsXHJcblx0XHRcdChsZWFmKSA9PiAodGhpcy5mb2xkZXJ2aWV3ID1uZXcgTXVsdGlwbGVOb3Rlc091dGxpbmVGb2xkZXJWaWV3KGxlYWYsIHRoaXMsIHRoaXMuc2V0dGluZ3MpKVxyXG5cdFx0KTtcclxuXHRcclxuXHRcdC8vXHUzMEIzXHUzMERFXHUzMEYzXHUzMEM5XHU4RkZEXHU1MkEwXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ29wZW4tZmlsZS12aWV3JyxcclxuXHRcdFx0bmFtZTogJ09wZW4gRmlsZSBWaWV3JyxcclxuXHJcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKT0+IHtcclxuXHRcdFx0XHR0aGlzLmNoZWNrRmlsZVZpZXcodHJ1ZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdvcGVuLWZvbGRlci12aWV3JyxcclxuXHRcdFx0bmFtZTogJ09wZW4gRm9sZGVyIFZpZXcnLFxyXG5cclxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpPT4ge1xyXG5cdFx0XHRcdHRoaXMuY2hlY2tGb2xkZXJWaWV3KHRydWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ2VyYXNlLWFsbC1mb2xkLUFPVC1pbmZvcm1hdGlvbicsXHJcblx0XHRcdG5hbWU6ICdFcmFzZSBhbGwgZm9sZGluZy9hbHdheXMtb24tdG9wIGluZm9ybWF0aW9uJyxcclxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jKCk9PntcclxuXHRcdFx0XHRjb25zdCBvblN1Ym1pdCA9IGFzeW5jKCk9PntcclxuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MucmVsYXRlZEZpbGVzID17fTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5ldyBNb2RhbENvbmZpcm0odGhpcy5hcHAsIHRoaXMsICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZXJhc2UgYWxsIGZvbGRpbmcvYWx3YXlzLW9uLXRvcCBpbmZvcm1hdGlvbj8nLCBvblN1Ym1pdCkub3BlbigpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnZXJhc2Utbm9uLWZhdm9yaXRlLWZvbGQtQU9ULWluZm9ybWF0aW9uJyxcclxuXHRcdFx0bmFtZTogJ0VyYXNlIGZvbGRpbmcvYWx3YXlzLW9uLXRvcCBpbmZvcm1hdGlvbiBleGNlcHQgZmF2b3JpdGUgZmlsZXMvZm9sZGVycycsXHJcblx0XHRcdGNhbGxiYWNrOiBhc3luYygpPT57XHJcblx0XHRcdFx0Y29uc3Qgb25TdWJtaXQgPSBhc3luYygpPT57XHJcblx0XHRcdFx0XHRmb3IgKGxldCBzcmNGaWxlUGF0aCBpbiB0aGlzLnNldHRpbmdzLnJlbGF0ZWRGaWxlcyl7XHJcblx0XHRcdFx0XHRcdGlmKCF0aGlzLnNldHRpbmdzLmZhdm9yaXRlLmZpbGUuaW5jbHVkZXMoc3JjRmlsZVBhdGgpICYmICF0aGlzLnNldHRpbmdzLmZhdm9yaXRlLmZvbGRlci5pbmNsdWRlcyhzcmNGaWxlUGF0aCkpe1xyXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnNldHRpbmdzLnJlbGF0ZWRGaWxlc1tzcmNGaWxlUGF0aF07XHJcblx0XHRcdFx0XHRcdH0gZWxzZXtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmV3IE1vZGFsQ29uZmlybSh0aGlzLmFwcCwgdGhpcywgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBlcmFzZSBmb2xkaW5nL2Fsd2F5cy1vbi10b3AgaW5mb3JtYXRpb24gb2Ygbm90IGZhdm9yaXRlIGZpbGVzL2ZvbGRlcnM/Jywgb25TdWJtaXQpLm9wZW4oKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHJcblx0XHQvLyB2aWV3XHUzMDZFXHU2NkY0XHU2NUIwKFx1MzBBMlx1MzBDM1x1MzBEN1x1MzBDN1x1MzBGQ1x1MzBDOFx1NjY0Mlx1NzUyOClcclxuXHJcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeShhc3luYygpPT57XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLm9wZW5BdFN0YXJ0dXAuZmlsZSl7XHJcblx0XHRcdFx0dGhpcy5jaGVja0ZpbGVWaWV3KGZhbHNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5vcGVuQXRTdGFydHVwLmZvbGRlcil7XHJcblx0XHRcdFx0dGhpcy5jaGVja0ZvbGRlclZpZXcoZmFsc2UpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuXHRjaGVja0ZpbGVWaWV3ID0gYXN5bmMoYWN0aXZhdGVWaWV3OiBib29sZWFuKTpQcm9taXNlPHZvaWQ+ID0+IHtcclxuXHJcblx0XHRsZXQgW2xlYWZdID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXdUeXBlKTtcclxuXHRcdGlmICghbGVhZikge1xyXG5cdFx0XHRzd2l0Y2ggKHRoaXMuc2V0dGluZ3Mudmlld1Bvc2l0aW9uKSB7XHJcblx0XHRcdFx0Y2FzZSAncmlnaHQnOlxyXG5cdFx0XHRcdFx0bGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnbGVmdCc6XHJcblx0XHRcdFx0XHRsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlZnRMZWFmKGZhbHNlKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ3RhYic6XHJcblx0XHRcdFx0XHRsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnc3BsaXQnOlxyXG5cdFx0XHRcdFx0bGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCdzcGxpdCcpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAncG9wb3V0JzpcclxuXHRcdFx0XHRcdGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZignd2luZG93Jyk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IE11bHRpcGxlTm90ZXNPdXRsaW5lVmlld1R5cGV9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYWN0aXZhdGVWaWV3KXtcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XHJcblx0XHR9XHJcblxyXG5cdH0gXHJcblxyXG5cdGNoZWNrRm9sZGVyVmlldyA9IGFzeW5jKGFjdGl2YXRlVmlldzogYm9vbGVhbik6UHJvbWlzZTx2b2lkPiA9PiB7XHJcblxyXG5cdFx0bGV0IFtsZWFmXSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoTXVsdGlwbGVOb3Rlc091dGxpbmVGb2xkZXJWaWV3VHlwZSk7XHJcblx0XHRpZiAoIWxlYWYpIHtcclxuXHRcdFx0c3dpdGNoICh0aGlzLnNldHRpbmdzLnZpZXdQb3NpdGlvbikge1xyXG5cdFx0XHRcdGNhc2UgJ3JpZ2h0JzpcclxuXHRcdFx0XHRcdGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2xlZnQnOlxyXG5cdFx0XHRcdFx0bGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWZ0TGVhZihmYWxzZSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICd0YWInOlxyXG5cdFx0XHRcdFx0bGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ3NwbGl0JzpcclxuXHRcdFx0XHRcdGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZignc3BsaXQnKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ3BvcG91dCc6XHJcblx0XHRcdFx0XHRsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3dpbmRvdycpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoeyB0eXBlOiBNdWx0aXBsZU5vdGVzT3V0bGluZUZvbGRlclZpZXdUeXBlfSk7XHJcblx0XHR9XHJcblx0XHRpZiAoYWN0aXZhdGVWaWV3KXtcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XHJcblx0XHR9XHJcblxyXG5cdH0gXHJcbiBcclxufSIsICJpbXBvcnQgeyBzZXRJY29uLCBkZWJvdW5jZSwgRGVib3VuY2VyIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBUQWJzdHJhY3RGaWxlfSBmcm9tICdvYnNpZGlhbidcclxuXHJcblxyXG5pbXBvcnQgTXVsdGlwbGVOb3Rlc091dGxpbmVQbHVnaW4sIHsgTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncywgT3V0bGluZURhdGEsIEZpbGVJbmZvLCBGaWxlU3RhdHVzIH0gZnJvbSAnc3JjL21haW4nO1xyXG5cclxuaW1wb3J0IHsgZ2V0T3V0Z29pbmdMaW5rRmlsZXMgfSBmcm9tICdzcmMvZ2V0VGFyZ2V0RmlsZXMnO1xyXG5pbXBvcnQgeyBpbml0RmlsZVN0YXR1cywgZ2V0RmlsZUluZm8sIGdldE91dGxpbmUgfSBmcm9tICdzcmMvZ2V0T3V0bGluZSdcclxuaW1wb3J0IHsgY2hlY2tGbGFnLCBzb3J0RmlsZU9yZGVyLCBnZXRUaGVtZSwgc2V0Tm90ZVRpdGxlQmFja2dyb3VuZENvbG9yLCBoYW5kbGVEZWxldGVSZWxhdGVkRmlsZXMsIGhhbmRsZVJlbmFtZVJlbGF0ZWRGaWxlcywgY2hlY2tSZWxhdGVkRmlsZXMsIGNoZWNrRGF0YXZpZXcgfSBmcm9tICdzcmMvdXRpbCc7XHJcblxyXG5pbXBvcnQgeyBkcmF3VUkgfSBmcm9tICdzcmMvZHJhd1VJJztcclxuaW1wb3J0IHsgY29uc3RydWN0Tm90ZURPTSwgY29uc3RydWN0T3V0bGluZURPTSB9IGZyb20gJ3NyYy9jb25zdHJ1Y3RET00nO1xyXG5pbXBvcnQgeyBjaGVja0ZhdkFuZFJlY2VudEZpbGVzLCBoYW5kbGVEZWxldGVGYXZBbmRSZWNlbnRGaWxlcywgaGFuZGxlUmVuYW1lRmF2QW5kUmVjZW50RmlsZXMsIHVwZGF0ZUZhdkFuZFJlY2VudCB9IGZyb20gJy4vRmF2QW5kUmVjZW50JztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgTXVsdGlwbGVOb3Rlc091dGxpbmVWaWV3VHlwZSA9ICdtdWx0aXBsZS1ub3Rlcy1vdXRsaW5lJztcclxuXHJcbmV4cG9ydCB0eXBlIENhdGVnb3J5ID0gJ21haW4nfCdvdXRnb2luZyd8J2JhY2tsaW5rJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcblx0XHJcblx0cGx1Z2luOiBNdWx0aXBsZU5vdGVzT3V0bGluZVBsdWdpbjtcdFx0XHJcblx0c2V0dGluZ3M6TXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncztcclxuXHJcblx0YWN0aXZlRmlsZTogVEZpbGU7XHJcblx0dGFyZ2V0RmlsZXM6IHtcclxuXHRcdG1haW46VEZpbGVbXSxcclxuXHRcdG91dGdvaW5nOlRGaWxlW10sXHJcblx0XHRiYWNrbGluazpURmlsZVtdLFxyXG5cdH0gPSB7XHJcblx0XHRtYWluOltdLFxyXG5cdFx0b3V0Z29pbmc6W10sXHJcblx0XHRiYWNrbGluazpbXVxyXG5cdH07XHJcblxyXG5cdGZpbGVTdGF0dXM6IHtcclxuXHRcdG1haW46IEZpbGVTdGF0dXNbXSxcclxuXHRcdG91dGdvaW5nOiBGaWxlU3RhdHVzW10sXHJcblx0XHRiYWNrbGluazogRmlsZVN0YXR1c1tdLFxyXG5cdH0gPSB7XHJcblx0XHRtYWluOltdLFxyXG5cdFx0b3V0Z29pbmc6W10sXHJcblx0XHRiYWNrbGluazpbXVxyXG5cdH1cclxuXHRcclxuXHRmaWxlSW5mbzoge1xyXG5cdFx0bWFpbjogRmlsZUluZm9bXSxcclxuXHRcdG91dGdvaW5nOiBGaWxlSW5mb1tdLFxyXG5cdFx0YmFja2xpbms6IEZpbGVJbmZvW10sXHJcblx0fSA9IHtcclxuXHRcdG1haW46W10sXHJcblx0XHRvdXRnb2luZzpbXSxcclxuXHRcdGJhY2tsaW5rOltdXHJcblx0fTtcclxuXHRcclxuXHRvdXRsaW5lRGF0YToge1xyXG5cdFx0bWFpbjpPdXRsaW5lRGF0YVtdW10sXHJcblx0XHRvdXRnb2luZzogT3V0bGluZURhdGFbXVtdLFxyXG5cdFx0YmFja2xpbms6IE91dGxpbmVEYXRhW11bXVxyXG5cdH0gPSB7XHJcblx0XHRtYWluOltdLFxyXG5cdFx0b3V0Z29pbmc6W10sXHJcblx0XHRiYWNrbGluazpbXVxyXG5cdH07XHJcblxyXG5cdGZpbGVPcmRlcjoge1xyXG5cdFx0bWFpbjogbnVtYmVyW10sXHJcblx0XHRvdXRnb2luZzogbnVtYmVyW10sXHJcblx0XHRiYWNrbGluazogbnVtYmVyW10sXHJcblx0fSA9IHtcclxuXHRcdG1haW46W10sXHJcblx0XHRvdXRnb2luZzpbXSxcclxuXHRcdGJhY2tsaW5rOltdXHJcblx0fVxyXG5cclxuXHRmbGFnQ2hhbmdlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdGZsYWdSZWdldFRhcmdldDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdC8vIGZsYWdSZW5hbWVkOiBib29sZWFuO1xyXG5cdGZsYWdTYXZlU2V0dGluZ3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0ZXh0cmFjdE1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRleHRyYWN0VGFzazogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHQvLyBpbmNsdWRlIG1vZGUgXHUzMEQ1XHUzMEEzXHUzMEVCXHUzMEJGXHUzMEZDXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0Ly8gaW5jbHVkZU1vZGU6IGJvb2xlYW47XHJcblxyXG5cdG1heExldmVsOiBudW1iZXI7XHJcblxyXG5cdC8vXHU1MTY4XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHU2Mjk4XHUzMDhBXHUzMDVGXHUzMDVGXHUzMDdGXHJcblx0Y29sbGFwc2VBbGw6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHQvL1x1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1NTM1OFx1NEY0RFx1MzA2RVx1NjI5OFx1MzA4QVx1MzA1Rlx1MzA1Rlx1MzA3RlxyXG5cdGNvbGxhcHNlQ2F0ZWdvcnk6IHtvdXRnb2luZzogYm9vbGVhbiwgYmFja2xpbms6IGJvb2xlYW59ID0ge1xyXG5cdFx0b3V0Z29pbmc6ZmFsc2UsXHJcblx0XHRiYWNrbGluazogZmFsc2VcclxuXHR9XHJcblxyXG5cdC8vXHUzMEQ3XHUzMEU5XHUzMEIwXHUzMEE0XHUzMEYzXHUzMEQzXHUzMEU1XHUzMEZDXHU3RDRDXHU3NTMxXHUzMDY3XHU1MjI1XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDkyXHU5NThCXHUzMDQ0XHUzMDVGXHU5NjlCXHUzMDZCXHUzMDAxXHUzMEQzXHUzMEU1XHUzMEZDXHUzMDZFXHU2NkY0XHU2NUIwXHUzMDkyXHU0RkREXHU3NTU5XHUzMDU5XHUzMDhCXHUzMDVGXHUzMDgxXHUzMDZFXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDAyXHJcblx0Ly9cdTMwRDNcdTMwRTVcdTMwRkNcdTMwNEJcdTMwODlcdTUyMjVcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwNkJcdTc5RkJcdTUyRDVcdTMwNTdcdTMwNUZcdTMwODl0cnVlXHUzMDZCXHUzMDU3XHUzMDY2XHUzMDAxXHU0RTAwXHU1NkRFXHUzMDYwXHUzMDUxXHUzMEQzXHUzMEU1XHUzMEZDXHUzMDZFXHU2NkY0XHU2NUIwXHUzMDkyXHUzMEI5XHUzMEFEXHUzMEMzXHUzMEQ3XHUzMDU5XHUzMDhCXHUzMDAyXHJcblx0aG9sZFVwZGF0ZU9uY2U6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0Ly8gdGFyZ2V0RmlsZXMubWFpbiBcdTMwNENcdTU5MDlcdTY2RjRcdTMwNTVcdTMwOENcdTMwNUZcdTMwODl0cnVlXHUzMDZCXHUzMDU3XHUzMDY2XHUzMDAxXHUzMEI5XHUzMEFGXHUzMEVEXHUzMEZDXHUzMEVCXHU0RjREXHU3RjZFXHUzMDkyXHU0RkREXHU2MzAxXHUzMDU3XHUzMDZBXHUzMDQ0XHUzMDVGXHUzMDgxXHUzMDZFXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDAyXHJcblx0aGFzTWFpbkNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0Ly9cdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTMwOTJcdTUzRDZcdTVGOTdcdTMwNTdcdTMwNUZcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTY1NzBcdTMwNkVcdTMwQUJcdTMwQTZcdTMwRjNcdTMwQzhcdTMwMDJcdThBMkRcdTVCOUFcdTUwMjQocmVhZExpbWl0KVx1MzA5Mlx1OEQ4NVx1MzA0OFx1MzA1Rlx1MzA4OVx1OEFBRFx1MzA3Rlx1OEZCQ1x1MzA3Rlx1MzA5Mlx1NkI2Mlx1MzA4MVx1MzA4Qlx1MzAwMlxyXG5cdGZpbGVjb3VudDogbnVtYmVyID0gMDtcclxuXHJcblx0Ly8gXHU1OTA5XHU2NkY0XHUzMDU1XHUzMDhDXHUzMDVGXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHU5MTREXHU1MjE3XHUzMDAyIFx1NEUwMFx1NUI5QVx1OTU5M1x1OTY5NFx1MzA1NFx1MzA2OFx1MzA2Qlx1MzA1M1x1MzA2RVx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA2RVx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1MzA5Mlx1NTE4RFx1OEFBRFx1MzA3Rlx1OEZCQ1x1MzA3Rlx1MzA1N1x1MzA2Nlx1MzAwMVx1NjZGNFx1NjVCMFx1MzA1N1x1MzA1Rlx1MzA4OVx1MzA1M1x1MzA2RVx1OTE0RFx1NTIxN1x1MzA5Mlx1N0E3QVx1MzA2Qlx1MzA1OVx1MzA4QlxyXG5cdGNoYW5nZWRGaWxlczogVEZpbGVbXSA9IFtdO1xyXG5cdC8vIHJlbmFtZWRGaWxlczogeyBmaWxlOiBURmlsZSwgb2xkUGF0aDogc3RyaW5nIH1bXSA9IFtdO1xyXG5cclxuXHQvLyB2aWV3XHUzMEJGXHUzMEE0XHUzMEQ3IERPTVx1MzA2RWlkXHUzMDZCXHUzMDgyXHU0RUQ4XHU1MkEwXHJcblx0dmlld1R5cGU6ICdmaWxlJ3wnZm9sZGVyJyA9ICdmaWxlJztcclxuXHJcblx0Ly8gXHU3M0ZFXHU1NzI4XHUzMDZFXHUzMEU5XHUzMEE0XHUzMEM4XHUzMEUyXHUzMEZDXHUzMEM5L1x1MzBDMFx1MzBGQ1x1MzBBRlx1MzBFMlx1MzBGQ1x1MzBDOVx1MzA2RVx1NzJCNlx1NjE0QlxyXG5cdHRoZW1lOiAnbGlnaHQnIHwgJ2RhcmsnO1xyXG5cclxuXHRwaW5uZWRNb2RlID0gZmFsc2U7XHJcblxyXG5cdGlzRGF0YXZpZXdFbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0bGVhZjogV29ya3NwYWNlTGVhZixcclxuXHRcdHBsdWdpbjogTXVsdGlwbGVOb3Rlc091dGxpbmVQbHVnaW4sXHJcblx0XHRzZXR0aW5nczogTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncyxcclxuXHQpIHtcclxuXHRcdHN1cGVyKGxlYWYpO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0XHR0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcblx0fVxyXG4gIFxyXG5cdGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gTXVsdGlwbGVOb3Rlc091dGxpbmVWaWV3VHlwZTtcclxuXHR9XHJcbiAgXHJcblx0Z2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiAnTU5PIC0gZmlsZSB2aWV3JztcclxuXHR9XHJcbiAgXHJcblx0Z2V0SWNvbigpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuICdmaWxlcyc7XHJcblx0fVxyXG5cclxuXHRcclxuXHRhc3luYyBvbk9wZW4oKXtcclxuXHRcdGF3YWl0IHRoaXMuaW5pdFZpZXcoKTtcclxuXHJcblx0XHQvLyBEYXRhdmlld1x1MzA2RVx1MzBFRFx1MzBGQ1x1MzBDOVx1MzA5Mlx1NUY4NVx1NkE1Rlx1MzA1N1x1MzA1Rlx1MzA2OFx1MzA1M1x1MzA4RFx1MzAwMVx1NTM3NFx1MzA2M1x1MzA2Nlx1OTA0NVx1MzA0Qlx1MzA2M1x1MzA1Rlx1MzAwMlxyXG5cdFx0Ly8gaWYgKGNoZWNrRGF0YXZpZXcodGhpcy5hcHApKXtcclxuXHRcdC8vIFx0Y29uc3QgZGF0YXZpZXdBUEkgPSBnZXRBUEkoKTtcclxuXHRcdC8vIFx0Ly8gZGF0YXZpZXdcdTMwNENpbmRleC1yZWFkeVx1MzA2N1x1MzA2QVx1MzA0NFx1NTgzNFx1NTQwOFx1MzA2RVx1MzA3Rlx1NjNDRlx1NzUzQlx1MzA5Mlx1NUY4NVx1NkE1RlxyXG5cdFx0Ly8gXHRpZiAoIWRhdGF2aWV3QVBJLmluZGV4LmluaXRpYWxpemVkKXtcclxuXHRcdC8vIFx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAubWV0YWRhdGFDYWNoZS5vbihcImRhdGF2aWV3OmluZGV4LXJlYWR5XCIsIGFzeW5jKCkgPT4ge1xyXG5cdFx0Ly8gXHRcdFx0YXdhaXQgdGhpcy5pbml0VmlldygpO1xyXG5cdFx0Ly8gXHRcdH0pKTtcclxuXHRcdC8vIFx0fSBlbHNlIHtcclxuXHRcdC8vIFx0XHRhd2FpdCB0aGlzLmluaXRWaWV3KCk7XHJcblx0XHQvLyBcdH1cclxuXHRcdC8vIH0gZWxzZSB7XHJcblx0XHQvLyBcdGF3YWl0IHRoaXMuaW5pdFZpZXcoKTtcclxuXHRcdC8vIH1cclxuXHRcdFxyXG5cdH1cclxuXHJcblx0YXN5bmMgb25DbG9zZSgpe1xyXG5cdFx0Ly8gTm90aGluIHRvIGNsZWFuIHVwXHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIGluaXRWaWV3KCkge1xyXG5cdFx0YXdhaXQgdGhpcy5ib290RGVsYXkoKTsgXHJcblxyXG5cdFx0Y2hlY2tSZWxhdGVkRmlsZXModGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0Y2hlY2tGYXZBbmRSZWNlbnRGaWxlcyh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncywgdGhpcy52aWV3VHlwZSk7XHJcblx0XHRcclxuXHRcdHRoaXMuY29sbGFwc2VBbGwgPSB0aGlzLnNldHRpbmdzLmNvbGxhcHNlQWxsQXRTdGFydHVwO1xyXG5cclxuXHRcdC8vIFx1MzBDRVx1MzBGQ1x1MzBDOFx1MzBCRlx1MzBBNFx1MzBDOFx1MzBFQlx1ODBDQ1x1NjY2Rlx1ODI3Mlx1MzA2RVx1OEEyRFx1NUI5QVxyXG5cdFx0dGhpcy50aGVtZSA9IGdldFRoZW1lKCk7XHJcblx0XHRzZXROb3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3IodGhpcy50aGVtZSwgdGhpcy5zZXR0aW5ncyk7XHJcblxyXG5cclxuXHRcdHRoaXMuYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcblx0XHRpZiAodGhpcy5hY3RpdmVGaWxlKXtcclxuXHRcdFx0dGhpcy50YXJnZXRGaWxlcy5tYWluWzBdPSB0aGlzLmFjdGl2ZUZpbGU7XHJcblx0XHRcdHRoaXMucmVmcmVzaFZpZXcodHJ1ZSwgdHJ1ZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIk11bHRpcGxlIE5vdGVzIE91dGxpbmU6IGZhaWxlZCB0byBnZXQgYWN0aXZlIGZpbGVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cdTgxRUFcdTUyRDVcdTY2RjRcdTY1QjBcdTMwNkVcdTMwNUZcdTMwODFcdTMwNkVcdTMwQzdcdTMwRkNcdTMwQkZcdTU5MDlcdTY2RjRcdTMwMDFcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdThGRkRcdTUyQTAvXHU1MjRBXHU5NjY0XHUzMDZFXHU3NkUzXHU4OTk2IG9ic2VydmUgZmlsZSBjaGFuZ2UvY3JlYXRlL2RlbGV0ZVxyXG5cdFx0Y29uc3QgZGVib3VuY2VyUmVxdWVzdFJlZnJlc2g6RGVib3VuY2VyPFtdPiA9IGRlYm91bmNlKHRoaXMuYXV0b1JlZnJlc2gsMzAwMCx0cnVlKTtcclxuXHRcdHRoaXMuZmxhZ0NoYW5nZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuZmxhZ1JlZ2V0VGFyZ2V0ID0gZmFsc2U7IFxyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtb3BlbicsIChmaWxlKSA9PiB7XHJcblx0XHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZmlsZSAhPT0gdGhpcy5hY3RpdmVGaWxlKXtcclxuXHRcdFx0XHR0aGlzLmFjdGl2ZUZpbGUgPSBmaWxlO1xyXG5cclxuXHRcdFx0XHRpZiAoIXRoaXMuc2V0dGluZ3MuYXV0b3VwZGF0ZUZpbGVWaWV3IHx8ICh0aGlzLnNldHRpbmdzLnN1c3BlbmRVcGRhdGVCeUNsaWNraW5nVmlldyAmJiB0aGlzLmhvbGRVcGRhdGVPbmNlKSB8fCB0aGlzLnBpbm5lZE1vZGUgPT0gdHJ1ZSl7XHJcblx0XHRcdFx0XHQvLyBhdXRvdXBkYXRlXHUzMDRDZmFsc2VcdTMwNEJcdTMwMDEgdmlld1x1MzA0Qlx1MzA4OVx1MzA2RVx1NzZGNFx1NjNBNVx1MzA2RVx1OTA3N1x1NzlGQlx1MzA2RVx1NTgzNFx1NTQwOFx1NjZGNFx1NjVCMFx1MzA1N1x1MzA2QVx1MzA0NFx1OEEyRFx1NUI5QVx1MzA2N1x1MzA0Mlx1MzA4Q1x1MzA3MFx1NjZGNFx1NjVCMFx1MzA5Mlx1MzBCOVx1MzBBRFx1MzBDM1x1MzBEN1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLnRhcmdldEZpbGVzLm1haW5bMF0gPSB0aGlzLmFjdGl2ZUZpbGU7XHJcblx0XHRcdFx0XHR0aGlzLmhhc01haW5DaGFuZ2VkID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHR1cGRhdGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLCB0aGlzLmFjdGl2ZUZpbGUucGF0aCwnZmlsZScsICdyZWNlbnQnKTtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnJlZnJlc2hWaWV3KHRydWUsdHJ1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLm9uKCdjaGFuZ2VkJywgKGZpbGUpID0+IHtcclxuXHRcdFx0bGV0IGNhdGVnb3J5OiBDYXRlZ29yeTtcclxuXHRcdFx0Zm9yIChjYXRlZ29yeSBpbiB0aGlzLnRhcmdldEZpbGVzKXtcclxuXHRcdFx0XHRpZiAodGhpcy50YXJnZXRGaWxlc1tjYXRlZ29yeV0uaW5jbHVkZXMoZmlsZSkpe1xyXG5cdFx0XHRcdFx0aWYgKCF0aGlzLmNoYW5nZWRGaWxlcy5pbmNsdWRlcyhmaWxlKSl7XHJcblx0XHRcdFx0XHRcdHRoaXMuY2hhbmdlZEZpbGVzLnB1c2goZmlsZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR0aGlzLmZsYWdDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGRlYm91bmNlclJlcXVlc3RSZWZyZXNoLmNhbGwodGhpcyk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pKTtcclxuXHJcblx0XHQvLyBcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwRDNcdTMwRTVcdTMwRkNcdTMwNkJcdTMwNEFcdTMwNDRcdTMwNjZcdTMwNkZjcmVhdGVcdTMwNkZcdTczRkVcdTcyQjZcdTcxMjFcdTk1QTJcdTRGQzJcclxuXHRcdC8vIHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignY3JlYXRlJywoZmlsZSk9PntcclxuXHRcdC8vIFx0aWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHQvLyBcdFx0dGhpcy5mbGFnUmVnZXRBbGwgPSB0cnVlO1xyXG5cdFx0Ly8gXHRcdGRlYm91bmNlclJlcXVlc3RSZWZyZXNoLmNhbGwodGhpcyk7XHJcblx0XHQvLyBcdH1cclxuXHRcdC8vIH0pKTtcclxuXHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLnZhdWx0Lm9uKCdkZWxldGUnLChmaWxlKT0+e1xyXG5cdFx0XHRpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuXHJcblx0XHRcdFx0Ly8gXHUzMEUxXHUzMEE0XHUzMEYzXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU0RUU1XHU1OTE2XHUzMDZFXHU1MjRBXHU5NjY0XHUzMDZFXHU1ODM0XHU1NDA4XHUzMEQzXHUzMEU1XHUzMEZDXHUzMDkyXHU5MDc3XHU3OUZCXHUzMDU3XHUzMDZBXHUzMDQ0XHU1MUU2XHU3NDA2XHJcblx0XHRcdFx0aWYgKGZpbGUgPT0gdGhpcy5hY3RpdmVGaWxlICYmIGZpbGUgIT0gdGhpcy50YXJnZXRGaWxlcy5tYWluWzBdKXtcclxuXHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgY2hhbmdlZFJlbGF0ZWRGaWxlcyA9IGhhbmRsZURlbGV0ZVJlbGF0ZWRGaWxlcyhmaWxlLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRpZiAoY2hhbmdlZFJlbGF0ZWRGaWxlcyl7XHJcblx0XHRcdFx0XHR0aGlzLmZsYWdTYXZlU2V0dGluZ3MgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bGV0IGNoYW5nZWRGYXZBbmRSZWNlbnQgPSBoYW5kbGVEZWxldGVGYXZBbmRSZWNlbnRGaWxlcyhmaWxlLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRpZiAoY2hhbmdlZEZhdkFuZFJlY2VudCl7XHJcblx0XHRcdFx0XHR0aGlzLmZsYWdTYXZlU2V0dGluZ3MgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLmZsYWdSZWdldFRhcmdldCA9IHRydWU7XHJcblx0XHRcdFx0ZGVib3VuY2VyUmVxdWVzdFJlZnJlc2guY2FsbCh0aGlzKTtcclxuXHRcdFx0fVxyXG5cdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbigncmVuYW1lJywoZmlsZSwgb2xkUGF0aCk9PntcclxuXHRcdFx0aWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSl7XHJcblx0XHRcdFx0bGV0IGNoYW5nZWRSZWxhdGVkRmlsZXMgPSBoYW5kbGVSZW5hbWVSZWxhdGVkRmlsZXMoZmlsZSwgb2xkUGF0aCwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdFx0aWYgKGNoYW5nZWRSZWxhdGVkRmlsZXMpe1xyXG5cdFx0XHRcdFx0dGhpcy5mbGFnU2F2ZVNldHRpbmdzID0gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bGV0IGNoYW5nZWRGYXZBbmRSZWNlbnQgPSBoYW5kbGVSZW5hbWVGYXZBbmRSZWNlbnRGaWxlcyhmaWxlLG9sZFBhdGgsIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHRcdGlmIChjaGFuZ2VkRmF2QW5kUmVjZW50KXtcclxuXHRcdFx0XHRcdHRoaXMuZmxhZ1NhdmVTZXR0aW5ncyA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0aGlzLmZsYWdSZWdldFRhcmdldCA9IHRydWU7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0ZGVib3VuY2VyUmVxdWVzdFJlZnJlc2guY2FsbCh0aGlzKTtcclxuXHRcdFx0fVxyXG5cdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2Nzcy1jaGFuZ2UnLCAoZSk9PntcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IG5ld1RoZW1lID0gZ2V0VGhlbWUoKTtcclxuXHRcdFx0aWYgKG5ld1RoZW1lICE9PSB0aGlzLnRoZW1lKXtcclxuXHRcdFx0XHR0aGlzLnRoZW1lID0gbmV3VGhlbWU7XHJcblx0XHRcdFx0c2V0Tm90ZVRpdGxlQmFja2dyb3VuZENvbG9yKHRoaXMudGhlbWUsIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSkpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBib290RGVsYXkoKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKTt9KTtcclxuXHR9XHJcblxyXG5cdC8vIFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1NEZFRVx1NkI2M1x1MzAwMVx1NTI0QVx1OTY2NFx1MzAwMVx1MzBFQVx1MzBDRFx1MzBGQ1x1MzBFMFx1MzA2QVx1MzA2OVx1MzA2RVx1OTY5Qlx1MzA2RVx1ODFFQVx1NTJENVx1NjZGNFx1NjVCMFxyXG5cdHByaXZhdGUgYXN5bmMgYXV0b1JlZnJlc2goKXtcclxuXHRcdGlmICghKHRoaXMuZmxhZ0NoYW5nZWQgfHwgdGhpcy5mbGFnUmVnZXRUYXJnZXQgfHwgdGhpcy5mbGFnU2F2ZVNldHRpbmdzKSl7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYgKHRoaXMuZmxhZ0NoYW5nZWQgJiYgIXRoaXMuZmxhZ1JlZ2V0VGFyZ2V0KXtcclxuXHRcdFx0Zm9yIChsZXQgaT0wOyBpIDwgdGhpcy5jaGFuZ2VkRmlsZXMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdGxldCBjYXRlZ29yeTogQ2F0ZWdvcnk7XHJcblx0XHRcdFx0Zm9yIChjYXRlZ29yeSBpbiB0aGlzLnRhcmdldEZpbGVzKXtcclxuXHRcdFx0XHRcdGxldCBpbmRleCA9IHRoaXMudGFyZ2V0RmlsZXNbY2F0ZWdvcnldLmluZGV4T2YodGhpcy5jaGFuZ2VkRmlsZXNbaV0pO1xyXG5cdFx0XHRcdFx0aWYgKGluZGV4PDApe1xyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvL1x1NTkwOVx1NjZGNFx1MzA1N1x1MzA1Rlx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA2RVx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1NjBDNVx1NTgzMVx1MzA2OFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1MzA5Mlx1NjZGNFx1NjVCMFxyXG5cdFx0XHRcdFx0dGhpcy5maWxlSW5mb1tjYXRlZ29yeV1baW5kZXhdID0gYXdhaXQgZ2V0RmlsZUluZm8odGhpcy5hcHAsIHRoaXMudGFyZ2V0RmlsZXNbY2F0ZWdvcnldW2luZGV4XSx0aGlzLnNldHRpbmdzLCB0cnVlLCB0aGlzLmlzRGF0YXZpZXdFbmFibGVkKTtcclxuXHRcdFx0XHRcdGNvbnN0IG5ld0RhdGEgPSBhd2FpdCBnZXRPdXRsaW5lKHRoaXMuYXBwLCB0aGlzLnRhcmdldEZpbGVzW2NhdGVnb3J5XVtpbmRleF0sIHRoaXMuZmlsZVN0YXR1c1tjYXRlZ29yeV1baW5kZXhdLCB0aGlzLmZpbGVJbmZvW2NhdGVnb3J5XVtpbmRleF0sIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHRcdFx0aWYgKG5ld0RhdGEpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5vdXRsaW5lRGF0YVtjYXRlZ29yeV1baW5kZXhdID0gbmV3RGF0YTtcclxuXHRcdFx0XHRcdFx0dGhpcy5maWxlU3RhdHVzW2NhdGVnb3J5XVtpbmRleF0ub3V0bGluZVJlYWR5ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBET01cdTMwOTJcdTY2RjRcdTY1QjBcclxuXHRcdFx0XHRcdGNvbnN0IHVwZGF0ZU5vdGVDaGlsZHJlbkVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ01OTycrdGhpcy52aWV3VHlwZSt0aGlzLnRhcmdldEZpbGVzW2NhdGVnb3J5XVtpbmRleF0ucGF0aCk7XHJcblx0XHRcdFx0XHR1cGRhdGVOb3RlQ2hpbGRyZW5FbC5lbXB0eSgpO1xyXG5cdFx0XHRcdFx0Y29uc3RydWN0T3V0bGluZURPTS5jYWxsKHRoaXMsIHRoaXMudGFyZ2V0RmlsZXNbY2F0ZWdvcnldW2luZGV4XSwgdGhpcy5maWxlSW5mb1tjYXRlZ29yeV1baW5kZXhdLHRoaXMub3V0bGluZURhdGFbY2F0ZWdvcnldW2luZGV4XSwgdXBkYXRlTm90ZUNoaWxkcmVuRWwsIGNhdGVnb3J5KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBpZiAodGhpcy5mbGFnUmVuYW1lZCl7XHJcblx0XHQvLyBcdGZvciAobGV0IGk9MDsgaSA8IHRoaXMucmVuYW1lZEZpbGVzLmxlbmd0aDsgaSsrKXtcclxuXHJcblx0XHQvLyBcdFx0Ly8gXHU2NkFCXHU1QjlBXHU3Njg0XHUzMDZCcmVuYW1lXHU2NjQyXHUzMDZGXHUzMEVBXHUzMEVEXHUzMEZDXHUzMEM5XHUzMDU5XHUzMDhCXHU1MUU2XHU3NDA2XHUzMDZCXHU1OTA5XHU2NkY0XHJcblx0XHQvLyBcdFx0Ly8gdmlld1x1MzA2Qlx1NUJGRVx1OEM2MVx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA0Q1x1MzA0Mlx1MzA4Q1x1MzA3MFx1MzBBMlx1MzBDM1x1MzBEN1x1MzBDN1x1MzBGQ1x1MzBDOFxyXG5cdFx0Ly8gXHRcdC8vIGxldCBjYXRlZ29yeTogQ2F0ZWdvcnk7XHJcblx0XHQvLyBcdFx0Ly8gZm9yIChjYXRlZ29yeSBpbiB0aGlzLnRhcmdldEZpbGVzKXtcclxuXHRcdC8vIFx0XHQvLyBcdGxldCBpbmRleCA9IHRoaXMudGFyZ2V0RmlsZXNbY2F0ZWdvcnldLmZpbmRJbmRleCggKHRhcmdldGZpbGUpPT4gdGFyZ2V0ZmlsZS5wYXRoID09IHRoaXMucmVuYW1lZEZpbGVzW2ldLm9sZFBhdGgpOyAgLy8gVEZpbGVcdTMwNEJwYXRoXHUzMDZCXHUzMDQyXHUzMDhGXHUzMDVCXHUzMDY2XHU2QkQ0XHU4RjAzXHUzMDU5XHUzMDhCXHU1RkM1XHU4OTgxXHJcblx0XHQvLyBcdFx0Ly8gXHRpZiAoaW5kZXg8MCl7XHJcblx0XHQvLyBcdFx0Ly8gXHRcdGNvbnRpbnVlO1xyXG5cdFx0Ly8gXHRcdC8vIFx0fVxyXG5cclxuXHRcdC8vIFx0XHQvLyBcdC8vXHU1OTA5XHU2NkY0XHUzMDU3XHUzMDVGXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU2MEM1XHU1ODMxXHUzMDY4XHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHUzMDkyXHU2NkY0XHU2NUIwXHJcblx0XHQvLyBcdFx0Ly8gXHR0aGlzLnRhcmdldEZpbGVzW2NhdGVnb3J5XVtpbmRleF0gPSB0aGlzLnJlbmFtZWRGaWxlc1tpXS5maWxlO1xyXG5cdFx0Ly8gXHRcdC8vIFx0dGhpcy5maWxlSW5mb1tjYXRlZ29yeV1baW5kZXhdID0gYXdhaXQgZ2V0RmlsZUluZm8odGhpcy5hcHAsIHRoaXMudGFyZ2V0RmlsZXNbY2F0ZWdvcnldW2luZGV4XSwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHQvLyBcdFx0Ly8gXHRjb25zdCBuZXdEYXRhID0gYXdhaXQgZ2V0T3V0bGluZSh0aGlzLmFwcCwgdGhpcy50YXJnZXRGaWxlc1tjYXRlZ29yeV1baW5kZXhdLHRoaXMuZmlsZVN0YXR1c1tjYXRlZ29yeV1baW5kZXhdLCB0aGlzLmZpbGVJbmZvW2NhdGVnb3J5XVtpbmRleF0sIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0Ly8gXHRcdC8vIFx0aWYgKG5ld0RhdGEpe1xyXG5cdFx0Ly8gXHRcdC8vIFx0XHR0aGlzLm91dGxpbmVEYXRhW2NhdGVnb3J5XVtpbmRleF0gPSBuZXdEYXRhOyBcclxuXHRcdC8vIFx0XHQvLyBcdFx0dGhpcy5maWxlU3RhdHVzW2NhdGVnb3J5XVtpbmRleF0ub3V0bGluZVJlYWR5ID0gdHJ1ZTtcclxuXHRcdC8vIFx0XHQvLyBcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0Ly8gXHRcdC8vIH1cclxuXHJcblx0XHQvLyBcdFx0Ly8gcmVsYXRlZEZpbGVzXHUzMDkyXHUzMEEyXHUzMEMzXHUzMEQ3XHUzMEM3XHUzMEZDXHUzMEM4XHJcblx0XHQvLyBcdFx0Zm9yIChsZXQgc3JjRmlsZVBhdGggaW4gdGhpcy5zZXR0aW5ncy5yZWxhdGVkRmlsZXMpe1xyXG5cclxuXHRcdC8vIFx0XHRcdGZvciAobGV0IGRzdEZpbGVQYXRoIGluIHRoaXMuc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXSl7XHJcblx0XHQvLyBcdFx0XHRcdGlmIChkc3RGaWxlUGF0aCA9PSB0aGlzLnJlbmFtZWRGaWxlc1tpXS5vbGRQYXRoKXtcclxuXHRcdC8vIFx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnJlbGF0ZWRGaWxlc1tzcmNGaWxlUGF0aF1bdGhpcy5yZW5hbWVkRmlsZXNbaV0uZmlsZS5wYXRoXT0gdGhpcy5zZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdW2RzdEZpbGVQYXRoXTtcclxuXHRcdC8vIFx0XHRcdFx0XHRkZWxldGUgdGhpcy5zZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdW2RzdEZpbGVQYXRoXTtcclxuXHRcdC8vIFx0XHRcdFx0fVxyXG5cdFx0Ly8gXHRcdFx0fVxyXG5cclxuXHRcdC8vIFx0XHRcdGlmIChzcmNGaWxlUGF0aCA9PSB0aGlzLnJlbmFtZWRGaWxlc1tpXS5vbGRQYXRoKXtcclxuXHRcdC8vIFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5yZWxhdGVkRmlsZXNbdGhpcy5yZW5hbWVkRmlsZXNbaV0uZmlsZS5wYXRoXT0gdGhpcy5zZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdO1xyXG5cdFx0Ly8gXHRcdFx0XHRkZWxldGUgdGhpcy5zZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdO1xyXG5cdFx0Ly8gXHRcdFx0fVxyXG5cdFx0Ly8gXHRcdH1cclxuXHRcdC8vIFx0fVxyXG5cdFx0Ly8gXHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdC8vIH1cclxuXHJcblx0XHRpZiAodGhpcy5mbGFnU2F2ZVNldHRpbmdzKXtcclxuXHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuZmxhZ1JlZ2V0VGFyZ2V0KXtcclxuXHRcdFx0dGhpcy5yZWZyZXNoVmlldyh0aGlzLmZsYWdSZWdldFRhcmdldCwgdGhpcy5mbGFnUmVnZXRUYXJnZXQpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jaGFuZ2VkRmlsZXMgPSBbXTtcclxuXHRcdHRoaXMuZmxhZ1JlZ2V0VGFyZ2V0ID0gZmFsc2U7XHJcblx0XHR0aGlzLmZsYWdDaGFuZ2VkID0gZmFsc2U7XHJcblx0XHR0aGlzLmZsYWdTYXZlU2V0dGluZ3MgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8vIFx1MzBFQVx1MzBENVx1MzBFQ1x1MzBDM1x1MzBCN1x1MzBFNVx1MzBCQlx1MzBGM1x1MzBCRlx1MzBGQyBcclxuXHQvLyBmbGFnR2V0VGFyZ2V0XHUzMDRDdHJ1ZTogXHU1QkZFXHU4QzYxXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDkyXHU1MThEXHU1M0Q2XHU1Rjk3XHJcblx0Ly8gZmxhZ0dldE91dGxpbmVcdTMwNEN0cnVlOiBcdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTYwQzVcdTU4MzFcdTMwOTJcdTUxOERcdTUzRDZcdTVGOTdcclxuXHQvLyBcdTMwNURcdTMwNkVcdTVGOENVSVx1OTBFOFx1NTIwNlx1MzA2OFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1OTBFOFx1NTIwNlx1MzA5Mlx1NjNDRlx1NzUzQlxyXG5cdGFzeW5jIHJlZnJlc2hWaWV3KGZsYWdHZXRUYXJnZXQ6Ym9vbGVhbiwgZmxhZ0dldE91dGxpbmU6Ym9vbGVhbil7XHJcblx0XHRcclxuXHRcdC8vIFx1NjNDRlx1NzUzQlx1NjI0MFx1ODk4MVx1NjY0Mlx1OTU5M1x1MzA5Mlx1NkUyQ1x1NUI5QVxyXG5cdFx0Y29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0XHJcblx0XHQvL2RhdGF2aWV3XHUzMEFBXHUzMEYzXHUzMEFBXHUzMEQ1XHUzMEMxXHUzMEE3XHUzMEMzXHUzMEFGXHJcblx0XHR0aGlzLmlzRGF0YXZpZXdFbmFibGVkID0gY2hlY2tEYXRhdmlldyh0aGlzLmFwcCk7XHJcblxyXG5cdFx0Ly8gXHUzMEI5XHUzMEFGXHUzMEVEXHUzMEZDXHUzMEVCXHU0RjREXHU3RjZFXHUzMDZFXHU1M0Q2XHU1Rjk3XHJcblx0XHRjb25zdCBjb250YWluZXJFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdNTk9maWxldmlldy1saXN0Y29udGFpbmVyJyk7XHJcblxyXG5cdFx0Y29uc3QgcHJldmlvdXNZID0gY29udGFpbmVyRWw/LnNjcm9sbFRvcCA/IGNvbnRhaW5lckVsLnNjcm9sbFRvcCA6IDA7XHJcblxyXG5cdFx0Ly8gXHUzMEUxXHUzMEE0XHUzMEYzXHUzMEJGXHUzMEZDXHUzMEIyXHUzMEMzXHUzMEM4XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFZmlsZUluZm9cdTMwNjhvdXRsaW5lXHUzMDkyXHU1M0Q2XHU1Rjk3XHJcblx0XHR0aGlzLmZpbGVjb3VudCA9IDA7XHJcblx0XHRpZiAoZmxhZ0dldFRhcmdldCl7XHJcblxyXG5cdFx0XHR0aGlzLmZpbGVTdGF0dXMubWFpbiA9IGluaXRGaWxlU3RhdHVzKHRoaXMudGFyZ2V0RmlsZXMubWFpbik7XHJcblx0XHRcdHRoaXMuZmlsZU9yZGVyLm1haW4gPSBbLi4uQXJyYXkodGhpcy50YXJnZXRGaWxlcy5tYWluLmxlbmd0aCldLm1hcCgoXywgaSkgPT4gaSk7XHJcblx0XHRcdFt0aGlzLmZpbGVTdGF0dXMubWFpbiwgdGhpcy5maWxlSW5mby5tYWluLHRoaXMub3V0bGluZURhdGEubWFpbl0gPSBhd2FpdCB0aGlzLmdldE91dGxpbmVzKHRoaXMudGFyZ2V0RmlsZXMubWFpbiwgdGhpcy5maWxlU3RhdHVzLm1haW4pO1xyXG5cclxuXHRcdFx0Ly8gXHU3M0ZFXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU2MEM1XHU1ODMxXHUzMDkyXHUzMDgyXHUzMDY4XHUzMDZCXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEI0XHUzMEZDXHUzMEE0XHUzMEYzXHUzMEIwXHUzMEVBXHUzMEYzXHUzMEFGL1x1MzBEMFx1MzBDM1x1MzBBRlx1MzBFQVx1MzBGM1x1MzBBRlx1NTE0OFx1MzA2RVx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA5Mlx1NTNENlx1NUY5N1xyXG5cdFx0XHR0aGlzLnRhcmdldEZpbGVzLm91dGdvaW5nID0gZ2V0T3V0Z29pbmdMaW5rRmlsZXModGhpcy5hcHAsIHRoaXMudGFyZ2V0RmlsZXMubWFpblswXSwgdGhpcy5maWxlSW5mby5tYWluWzBdLCB0aGlzLm91dGxpbmVEYXRhLm1haW5bMF0pO1xyXG5cdFx0XHR0aGlzLmZpbGVTdGF0dXMub3V0Z29pbmcgPSBpbml0RmlsZVN0YXR1cyh0aGlzLnRhcmdldEZpbGVzLm91dGdvaW5nKTtcclxuXHRcdFx0dGhpcy5maWxlT3JkZXIub3V0Z29pbmcgPSBbLi4uQXJyYXkodGhpcy50YXJnZXRGaWxlcy5vdXRnb2luZy5sZW5ndGgpXS5tYXAoKF8sIGkpID0+IGkpO1xyXG5cclxuXHRcdFx0dGhpcy50YXJnZXRGaWxlcy5iYWNrbGluayA9IHRoaXMuZmlsZUluZm8ubWFpblswXS5iYWNrbGlua3M7XHJcblx0XHRcdHRoaXMuZmlsZVN0YXR1cy5iYWNrbGluayA9IGluaXRGaWxlU3RhdHVzKHRoaXMudGFyZ2V0RmlsZXMuYmFja2xpbmspO1xyXG5cdFx0XHR0aGlzLmZpbGVPcmRlci5iYWNrbGluayA9IFsuLi5BcnJheSh0aGlzLnRhcmdldEZpbGVzLmJhY2tsaW5rLmxlbmd0aCldLm1hcCgoXywgaSkgPT4gaSk7XHJcblxyXG5cdFx0XHQvL1x1OTFDRFx1ODkwN1x1MzBDMVx1MzBBN1x1MzBDM1x1MzBBRlxyXG5cdFx0XHR0aGlzLmNoZWNrRHVwbGljYXRlZCh0aGlzLnRhcmdldEZpbGVzLm91dGdvaW5nLCB0aGlzLnRhcmdldEZpbGVzLm1haW4sICdtYWluJywgdGhpcy5maWxlU3RhdHVzLm91dGdvaW5nKTtcclxuXHRcdFx0dGhpcy5jaGVja0R1cGxpY2F0ZWQodGhpcy50YXJnZXRGaWxlcy5vdXRnb2luZywgdGhpcy50YXJnZXRGaWxlcy5vdXRnb2luZywgJ3NlbGYnLCB0aGlzLmZpbGVTdGF0dXMub3V0Z29pbmcpO1xyXG5cdFx0XHR0aGlzLmNoZWNrRHVwbGljYXRlZCh0aGlzLnRhcmdldEZpbGVzLmJhY2tsaW5rLCB0aGlzLnRhcmdldEZpbGVzLm1haW4sICdtYWluJywgdGhpcy5maWxlU3RhdHVzLmJhY2tsaW5rKTtcclxuXHRcdFx0dGhpcy5jaGVja0R1cGxpY2F0ZWQodGhpcy50YXJnZXRGaWxlcy5iYWNrbGluaywgdGhpcy50YXJnZXRGaWxlcy5vdXRnb2luZywgJ291dGdvaW5nJywgdGhpcy5maWxlU3RhdHVzLmJhY2tsaW5rKTtcclxuXHRcdFx0dGhpcy5jaGVja0R1cGxpY2F0ZWQodGhpcy50YXJnZXRGaWxlcy5iYWNrbGluaywgdGhpcy50YXJnZXRGaWxlcy5iYWNrbGluaywgJ3NlbGYnLCB0aGlzLmZpbGVTdGF0dXMuYmFja2xpbmspO1xyXG5cclxuXHRcdH1cclxuXHRcdC8vIFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBCNFx1MzBGQ1x1MzBBNFx1MzBGM1x1MzBCMC9cdTMwRDBcdTMwQzNcdTMwQUZcdTMwRUFcdTMwRjNcdTMwQUZcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwNkVmaWxlSW5mb1x1MzA2OG91dGxpbmVcdTMwOTJcdTUzRDZcdTVGOTdcclxuXHRcdC8vIFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1NjU3MFx1MzA0Q3Byb2Nlc3NMaW1pdFx1MzA5Mlx1OEQ4NVx1OTA0RVx1MzA1N1x1MzA2Nlx1MzA0NFx1MzA2QVx1MzA0NFx1MzA2OFx1MzA0RFx1MzA2RVx1MzA3Rlx1OEFBRFx1MzA3Rlx1OEZCQ1x1MzA4MFxyXG5cdFx0aWYoZmxhZ0dldE91dGxpbmUgJiYgdGhpcy50YXJnZXRGaWxlcy5vdXRnb2luZy5sZW5ndGggKyB0aGlzLnRhcmdldEZpbGVzLmJhY2tsaW5rLmxlbmd0aCA8PSB0aGlzLnNldHRpbmdzLnByb2Nlc3NMaW1pdCl7XHJcblxyXG5cdFx0XHRbdGhpcy5maWxlU3RhdHVzLm91dGdvaW5nLCB0aGlzLmZpbGVJbmZvLm91dGdvaW5nLHRoaXMub3V0bGluZURhdGEub3V0Z29pbmddID0gYXdhaXQgdGhpcy5nZXRPdXRsaW5lcyh0aGlzLnRhcmdldEZpbGVzLm91dGdvaW5nLCB0aGlzLmZpbGVTdGF0dXMub3V0Z29pbmcpO1xyXG5cdFx0XHRbdGhpcy5maWxlU3RhdHVzLmJhY2tsaW5rLCB0aGlzLmZpbGVJbmZvLmJhY2tsaW5rLHRoaXMub3V0bGluZURhdGEuYmFja2xpbmtdID0gYXdhaXQgdGhpcy5nZXRPdXRsaW5lcyh0aGlzLnRhcmdldEZpbGVzLmJhY2tsaW5rLCB0aGlzLmZpbGVTdGF0dXMuYmFja2xpbmspO1xyXG5cdFx0XHRzb3J0RmlsZU9yZGVyKHRoaXMuZmlsZU9yZGVyLmJhY2tsaW5rLCB0aGlzLnRhcmdldEZpbGVzLmJhY2tsaW5rLCB0aGlzLmZpbGVTdGF0dXMuYmFja2xpbmssIHRoaXMuZmlsZUluZm8uYmFja2xpbmssIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IG1pZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnNob3dEZWJ1Z0luZm8pe1xyXG5cdFx0IFx0Y29uc29sZS5sb2coJ011bHRpcGxlIE5vdGVzIE91dGxpbmU6IHRpbWUgcmVxdWlyZWQgdG8gZ2V0IG91dGxpbmVzLCBmaWxlIHZpZXc6ICcsdGhpcy50YXJnZXRGaWxlcy5tYWluWzBdLnBhdGgsIG1pZFRpbWUgLSBzdGFydFRpbWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRyYXdVSS5jYWxsKHRoaXMpO1xyXG5cdFx0dGhpcy5kcmF3T3V0bGluZShwcmV2aW91c1kpO1xyXG5cclxuXHRcdC8vIFx1NjNDRlx1NzUzQlx1NjI0MFx1ODk4MVx1NjY0Mlx1OTU5M1x1MzA5Mlx1NkUyQ1x1NUI5QVxyXG5cdFx0Y29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3Muc2hvd0RlYnVnSW5mbyl7XHJcblx0XHQgXHRjb25zb2xlLmxvZygnTXVsdGlwbGUgTm90ZXMgT3V0bGluZTogdGltZSByZXF1aXJlZCB0byBkcmF3IG91dGxpbmVzLCBmaWxlIHZpZXc6ICcsdGhpcy50YXJnZXRGaWxlcy5tYWluWzBdLnBhdGgsIGVuZFRpbWUgLSBtaWRUaW1lLCBwcmV2aW91c1kpO1xyXG5cclxuXHRcdCBcdGNvbnNvbGUubG9nKCdNdWx0aXBsZSBOb3RlcyBPdXRsaW5lOiB0aW1lIHJlcXVpcmVkIHRvIHJlZnJlc2ggdmlldywgZmlsZSB2aWV3Jyx0aGlzLnRhcmdldEZpbGVzLm1haW5bMF0ucGF0aCwgZW5kVGltZSAtIHN0YXJ0VGltZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvL1x1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1NjBDNVx1NTgzMVx1MzAwMVx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1NjBDNVx1NTgzMVx1MzA5Mlx1NEY1Q1x1NjIxMFx1MzBGQlx1NTNENlx1NUY5N1xyXG5cdGFzeW5jIGdldE91dGxpbmVzIChmaWxlczogVEZpbGVbXSwgc3RhdHVzOiBGaWxlU3RhdHVzW10pOlByb21pc2U8W0ZpbGVTdGF0dXNbXSwgRmlsZUluZm9bXSwgT3V0bGluZURhdGFbXVtdXT4ge1xyXG5cdFx0bGV0IGZpbGVJbmZvOkZpbGVJbmZvW10gPSBbXTtcclxuXHRcdGxldCBvdXRsaW5lRGF0YTogT3V0bGluZURhdGFbXVtdID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0Ly9cdTUwMEJcdTUyMjVcdTMwNkVBbHdheXMgb24gVG9wXHUzMDZFXHU1MjI0XHU1QjlBXHJcblx0XHRcdGlmIChjaGVja0ZsYWcodGhpcy50YXJnZXRGaWxlcy5tYWluWzBdLCBmaWxlc1tpXSwgJ3RvcCcsIHRoaXMuc2V0dGluZ3MpID09IHRydWUpe1xyXG5cdFx0XHRcdHN0YXR1c1tpXS5pc1RvcCA9dHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCh0aGlzLmZpbGVjb3VudCA8IHRoaXMuc2V0dGluZ3MucmVhZExpbWl0IHx8IHN0YXR1c1tpXS5pc1RvcCApICYmICFPYmplY3QudmFsdWVzKHN0YXR1c1tpXS5kdXBsaWNhdGVkKS5pbmNsdWRlcyh0cnVlKSl7XHJcblx0XHRcdFx0Ly8gZmlsZXMubGVuZ3RoID09MSBcdTMwNkVcdTU4MzRcdTU0MDhcdTMwMDFcdTMwRTFcdTMwQTRcdTMwRjNcdTMwQkZcdTMwRkNcdTMwQjJcdTMwQzNcdTMwQzhcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwOTJcdTVCRkVcdThDNjFcdTMwNkJcdTMwNTdcdTMwNjZcdTMwNDRcdTMwOEJcdTUzRUZcdTgwRkRcdTYwMjdcdTMwNENcdTMwNDJcdTMwOEJcdTMwNUZcdTMwODFcdTMwMDFcdTVGQzVcdTMwNUFiYWNrbGluayBmaWxlc1x1MzA5Mlx1NTNENlx1NUY5N1x1MzA1OVx1MzA4Qlx1MzAwMlxyXG5cdFx0XHRcdGNvbnN0IGluZm8gPSBhd2FpdCBnZXRGaWxlSW5mbyh0aGlzLmFwcCwgZmlsZXNbaV0sIHRoaXMuc2V0dGluZ3MsIEJvb2xlYW4oIGZpbGVzLmxlbmd0aCA9PSAxKSwgdGhpcy5pc0RhdGF2aWV3RW5hYmxlZCk7XHJcblx0XHRcdFx0ZmlsZUluZm8ucHVzaChpbmZvKTtcclxuXHRcdFx0XHRjb25zdCBkYXRhID0gYXdhaXQgZ2V0T3V0bGluZSh0aGlzLmFwcCwgZmlsZXNbaV0sIHN0YXR1c1tpXSwgaW5mbywgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdFx0aWYgKGRhdGEpe1xyXG5cdFx0XHRcdFx0b3V0bGluZURhdGEucHVzaChkYXRhKTtcclxuXHRcdFx0XHRcdHN0YXR1c1tpXS5vdXRsaW5lUmVhZHkgPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRvdXRsaW5lRGF0YS5wdXNoKHVuZGVmaW5lZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZpbGVJbmZvLnB1c2godW5kZWZpbmVkKTtcclxuXHRcdFx0XHRvdXRsaW5lRGF0YS5wdXNoKHVuZGVmaW5lZCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuZmlsZWNvdW50Kys7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gW3N0YXR1cyxmaWxlSW5mbyxvdXRsaW5lRGF0YV07XHJcblx0fVxyXG5cclxuXHJcblx0Ly8gIFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1NjNDRlx1NzUzQlx0XHJcblx0cHJpdmF0ZSBkcmF3T3V0bGluZShwcmV2aW91c1k6IG51bWJlcik6dm9pZCB7XHJcblxyXG5cdFx0Ly8gaW5jbHVkZSBvbmx5IG1vZGVcdTMwNEIgIGZpbHRlclx1OTVBMlx1OTAyM1x1MzBCM1x1MzBFMVx1MzBGM1x1MzBDOFx1MzBBMlx1MzBBNlx1MzBDOFxyXG5cdFx0Ly8gdGhpcy5pbmNsdWRlTW9kZSA9ICh0aGlzLnNldHRpbmdzLmluY2x1ZGVPbmx5ICE9ICdub25lJykgJiYgKEJvb2xlYW4odGhpcy5zZXR0aW5ncy53b3Jkc1RvSW5jbHVkZS5sZW5ndGgpIHx8ICh0aGlzLnNldHRpbmdzLmluY2x1ZGVCZWdpbm5pbmcpKTtcclxuXHJcblx0XHQvLyBcdTg4NjhcdTc5M0FcdTMwQUFcdTMwRjNcdTMwNkJcdTMwNkFcdTMwNjNcdTMwNjZcdTMwNDRcdTMwOEJcdTg5OEJcdTUxRkFcdTMwNTdcdTMwRUNcdTMwRDlcdTMwRUJcdTMwNkVcdTY3MDBcdTlBRDhcdTUwMjRcclxuXHRcdHRoaXMubWF4TGV2ZWwgPSB0aGlzLnNldHRpbmdzLmhlYWRpbmdMZXZlbC5pbmRleE9mKHRydWUpO1xyXG5cclxuXHJcblx0XHRjb25zdCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgPSBjcmVhdGVEaXYoXCJuYXYtZmlsZXMtY29udGFpbmVyIG5vZGUtaW5zZXJ0LWV2ZW50XCIpO1xyXG5cdFx0Y29uc3Qgcm9vdEVsOiBIVE1MRWxlbWVudCA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdihcInRyZWUtaXRlbSBuYXYtZm9sZGVyIG1vZC1yb290XCIpOyBcclxuXHRcdGNvbnN0IHJvb3RDaGlsZHJlbkVsOiBIVE1MRWxlbWVudCA9IHJvb3RFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0tY2hpbGRyZW4gbmF2LWZvbGRlci1jaGlsZHJlblwiKTsgXHJcblxyXG5cdFx0Ly8gaWQgXHUzMDkyXHU0RUQ4XHU1MkEwXHVGRjA4XHUzMEI5XHUzMEFGXHUzMEVEXHUzMEZDXHUzMEVCXHU0RjREXHU3RjZFXHUzMDZFXHU2MjhBXHU2M0UxXHU3NTI4XHVGRjA5XHJcblx0XHRjb250YWluZXJFbC5pZCA9ICdNTk9maWxldmlldy1saXN0Y29udGFpbmVyJztcclxuXHJcblx0XHQvLyBBbHdheXMgb24gVG9wXHJcblx0XHRjb25zdCBjYXRlZ29yeUFPVEVsOiBIVE1MRWxlbWVudCA9IHJvb3RDaGlsZHJlbkVsLmNyZWF0ZURpdihcInRyZWUtaXRlbSBuYXYtZm9sZGVyIG1vZC1yb290XCIpO1xyXG5cclxuXHRcdC8vIG1haW4gZmlsZVxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3Muc2hvd0ZpbGVzLm1haW4pe1xyXG5cdFx0XHRjb25zdCBjYXRlZ29yeU1haW5FbDogSFRNTEVsZW1lbnQgPSByb290Q2hpbGRyZW5FbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0gbmF2LWZvbGRlciBtb2Qtcm9vdFwiKTtcclxuXHRcdFx0Y29uc3RydWN0Tm90ZURPTS5jYWxsKHRoaXMsIHRoaXMudGFyZ2V0RmlsZXMubWFpbiwgdGhpcy5maWxlU3RhdHVzLm1haW4sIHRoaXMuZmlsZUluZm8ubWFpbiwgdGhpcy5vdXRsaW5lRGF0YS5tYWluLCBcclxuXHRcdFx0XHRjYXRlZ29yeU1haW5FbCwgJ21haW4nLCBjYXRlZ29yeUFPVEVsLCB0aGlzLnRhcmdldEZpbGVzLm1haW5bMF0sIHRoaXMuZmlsZU9yZGVyLm1haW4pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIG91dGdvaW5nIGxpbmsgZmlsZXNcclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnNob3dGaWxlcy5vdXRnb2luZyl7XHJcblx0XHRcdHRoaXMuY29uc3RydWN0Q2F0ZWdvcnlET00oJ291dGdvaW5nJywgJ2xpbmtzLWdvaW5nLW91dCcsICdPdXRnb2luZyBMaW5rIEZpbGVzJywgcm9vdENoaWxkcmVuRWwsIGNhdGVnb3J5QU9URWwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGJhY2tsaW5rIGZpbGVzXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5zaG93RmlsZXMuYmFja2xpbmspe1xyXG5cdFx0XHR0aGlzLmNvbnN0cnVjdENhdGVnb3J5RE9NKCdiYWNrbGluaycsICdsaW5rcy1jb21pbmctaW4nLCAnQmFja2xpbmsgRmlsZXMnLCByb290Q2hpbGRyZW5FbCwgY2F0ZWdvcnlBT1RFbCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vIFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1OTBFOFx1NTIwNlx1MzA2RVx1NjNDRlx1NzUzQlx1NUI5Rlx1ODg0Q1xyXG5cdFx0dGhpcy5jb250ZW50RWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWwpO1xyXG5cclxuXHRcdC8vIFx1MzBCOVx1MzBBRlx1MzBFRFx1MzBGQ1x1MzBFQlx1NEY0RFx1N0Y2RVx1MzA5Mlx1NUZBOVx1NTE0M1xyXG5cdFx0aWYgKHRoaXMuaGFzTWFpbkNoYW5nZWQgPT0gZmFsc2UgJiYgcHJldmlvdXNZICE9MCl7XHJcblx0XHRcdGNvbnRhaW5lckVsLnNjcm9sbFRvcCA9IHByZXZpb3VzWTtcclxuXHRcdH1cclxuXHRcdHRoaXMuaGFzTWFpbkNoYW5nZWQgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8vIGNhdGVnb3J5XHUzMDZFRE9NXHUzMDkyXHU0RjVDXHU2MjEwXHJcblx0cHJpdmF0ZSBjb25zdHJ1Y3RDYXRlZ29yeURPTShjYXRlZ29yeTogJ291dGdvaW5nJ3wnYmFja2xpbmsnLCBjSWNvbjogc3RyaW5nLCBjVGV4dDogc3RyaW5nLCBwYXJlbnRFbDpIVE1MRWxlbWVudCwgYW90RWw6SFRNTEVsZW1lbnQpOnZvaWQge1xyXG5cdFx0Y29uc3QgY2F0ZWdvcnlFbDogSFRNTEVsZW1lbnQgPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0gbmF2LWZvbGRlclwiKTtcclxuXHRcdGNvbnN0IGNhdGVnb3J5VGl0bGVFbDogSFRNTEVsZW1lbnQgPSBjYXRlZ29yeUVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1zZWxmIGlzLWNsaWNrYWJsZSBtb2QtY29sbGFwc2libGUgbmF2LWZvbGRlci10aXRsZVwiKTtcclxuXHRcdHNldEljb24oY2F0ZWdvcnlUaXRsZUVsLCBjSWNvbik7XHJcblxyXG5cdFx0Y2F0ZWdvcnlUaXRsZUVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1pbm5lciBuYXYtZm9sZGVyLXRpdGxlLWNvbnRlbnRcIikuc2V0VGV4dChjVGV4dCk7XHJcblx0XHRcclxuXHRcdC8vXHU2Mjk4XHUzMDhBXHUzMDVGXHUzMDVGXHUzMDdGXHUzMEEyXHUzMEE0XHUzMEIzXHUzMEYzXHJcblx0XHRjb25zdCBjYXRlZ29yeUNvbGxhcHNlSWNvbjpIVE1MRWxlbWVudCA9IGNhdGVnb3J5VGl0bGVFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0taWNvbiBjb2xsYXBzZS1pY29uIG5hdi1mb2xkZXItY29sbGFwc2UtaW5kaWNhdG9yXCIpO1xyXG5cdFx0c2V0SWNvbihjYXRlZ29yeUNvbGxhcHNlSWNvbixcInJpZ2h0LXRyaWFuZ2xlXCIpO1xyXG5cdFx0Y2F0ZWdvcnlDb2xsYXBzZUljb24uYWRkRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XCJjbGlja1wiLFxyXG5cdFx0XHRhc3luYyAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0XHRpZiAodGhpcy5jb2xsYXBzZUNhdGVnb3J5W2NhdGVnb3J5XSl7XHJcblx0XHRcdFx0XHR0aGlzLmNvbGxhcHNlQ2F0ZWdvcnlbY2F0ZWdvcnldID0gZmFsc2U7XHJcblx0XHRcdFx0XHR0aGlzLnJlZnJlc2hWaWV3KGZhbHNlLGZhbHNlKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUNhdGVnb3J5W2NhdGVnb3J5XSA9IHRydWU7XHJcblx0XHRcdFx0XHRjYXRlZ29yeUVsLmNsYXNzTGlzdC5hZGQoJ2lzLWNvbGxhcHNlZCcpO1xyXG5cdFx0XHRcdFx0Y2F0ZWdvcnlDb2xsYXBzZUljb24uY2xhc3NMaXN0LmFkZCgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHRcdFx0XHRjYXRlZ29yeUNoaWxkcmVuRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdClcclxuXHJcblx0XHRjb25zdCBjYXRlZ29yeUNoaWxkcmVuRWw6SFRNTEVsZW1lbnQgPSBjYXRlZ29yeUVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1jaGlsZHJlbiBuYXYtZm9sZGVyLWNoaWxkcmVuXCIpO1xyXG5cdFx0XHJcblx0XHQvLyBcdTYyOThcdTMwOEFcdTMwNUZcdTMwNUZcdTMwN0VcdTMwOENcdTMwNjZcdTMwNDRcdTMwOENcdTMwNzBcdTVCNTBcdTg5ODFcdTdEMjBcdTMwOTJcdTk3NUVcdTg4NjhcdTc5M0FcdTMwNkJcdTMwNTlcdTMwOEJcclxuXHRcdGlmICghdGhpcy5jb2xsYXBzZUNhdGVnb3J5W2NhdGVnb3J5XSl7XHJcblxyXG5cdFx0XHRjb25zdHJ1Y3ROb3RlRE9NLmNhbGwodGhpcywgdGhpcy50YXJnZXRGaWxlc1tjYXRlZ29yeV0sIHRoaXMuZmlsZVN0YXR1c1tjYXRlZ29yeV0sIHRoaXMuZmlsZUluZm9bY2F0ZWdvcnldLCB0aGlzLm91dGxpbmVEYXRhW2NhdGVnb3J5XSxcclxuXHRcdFx0XHQgY2F0ZWdvcnlDaGlsZHJlbkVsLCBjYXRlZ29yeSwgYW90RWwsIHRoaXMudGFyZ2V0RmlsZXMubWFpblswXSx0aGlzLmZpbGVPcmRlcltjYXRlZ29yeV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y2F0ZWdvcnlFbC5jbGFzc0xpc3QuYWRkKCdpcy1jb2xsYXBzZWQnKTtcclxuXHRcdFx0Y2F0ZWdvcnlDb2xsYXBzZUljb24uY2xhc3NMaXN0LmFkZCgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyB0YXJnZXRGaWxlc1x1MzA2RVx1OTFDRFx1ODkwN1x1MzBDMVx1MzBBN1x1MzBDM1x1MzBBRiAgIGNhdGVnb3J5Olx1NTIyNVx1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1MzA2N1x1MzA0Mlx1MzA4Q1x1MzA3MFx1MzA1RFx1MzA2RVx1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1NTQwRFx1MzA5Mlx1MzAwMVx1NTQwQ1x1NEUwMFx1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1MzA2N1x1MzA0Mlx1MzA4Q1x1MzA3MHNlbGZcdTMwOTJcdTYzMDdcdTVCOUFcclxuXHRjaGVja0R1cGxpY2F0ZWQoZmlsZXM6VEZpbGVbXSxjb21wYXJlOlRGaWxlW10sY2F0ZWdvcnk6J21haW4nfCdvdXRnb2luZyd8J2JhY2tsaW5rJ3wnc2VsZicsIHN0YXR1czpGaWxlU3RhdHVzW10pOkZpbGVTdGF0dXNbXXtcclxuXHRcdGZpbGVsb29wOiBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKXtcclxuXHJcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY29tcGFyZS5sZW5ndGg7IGorKyl7XHJcblx0XHRcdFx0aWYgKGNhdGVnb3J5ID09ICdzZWxmJyAmJiBqPj0gaSl7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChjb21wYXJlW2pdLnBhdGggPT09IGZpbGVzW2ldLnBhdGgpe1xyXG5cdFx0XHRcdFx0c3RhdHVzW2ldLmR1cGxpY2F0ZWRbY2F0ZWdvcnldID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGNvbnRpbnVlIGZpbGVsb29wO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdGF0dXM7XHJcblx0fVxyXG5cclxufVxyXG5cclxuIiwgImltcG9ydCB7IEFwcCwgVEZpbGUsIFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEZpbGVJbmZvLCBPdXRsaW5lRGF0YSB9IGZyb20gJ3NyYy9tYWluJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRnb2luZ0xpbmtGaWxlcyhhcHA6IEFwcCwgZmlsZTpURmlsZSwgaW5mbzpGaWxlSW5mbywgY2FjaGU6T3V0bGluZURhdGFbXSk6VEZpbGVbXSB8IG51bGwge1xyXG5cclxuICAgIGxldCBmaWxlczpURmlsZVtdID1bXTtcclxuICAgIGZvciAobGV0IGk9MDsgaTwgaW5mby5mcm9udG1hdHRlckxpbmtzPy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgY29uc3QgZmlsZW9iaiA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGluZm8uZnJvbnRtYXR0ZXJMaW5rc1tpXS5saW5rLCBmaWxlLnBhdGgpO1xyXG4gICAgICAgIGlmIChmaWxlb2JqIGluc3RhbmNlb2YgVEZpbGUpe1xyXG4gICAgICAgICAgICBmaWxlcy5wdXNoKGZpbGVvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaTwgY2FjaGUubGVuZ3RoOyBpKysgKXtcclxuICAgICAgICBpZiAoY2FjaGVbaV0udHlwZU9mRWxlbWVudCAhPSAnbGluaycpe1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmlsZW9iaiA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGNhY2hlW2ldLmxpbmssIGZpbGUucGF0aCk7XHJcbiAgICAgICAgaWYgKGZpbGVvYmogaW5zdGFuY2VvZiBURmlsZSl7XHJcbiAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZW9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbGVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2xpbmtGaWxlcyhhcHA6IEFwcCwgZmlsZTpURmlsZSk6VEZpbGVbXXtcclxuICAgIGxldCBmaWxlczpURmlsZVtdPVtdO1xyXG4gICAgbGV0IGJhY2tsaW5rcyA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEJhY2tsaW5rc0ZvckZpbGUoZmlsZSkuZGF0YTtcclxuICAgIGZvciAoIGNvbnN0IGtleSBpbiBiYWNrbGlua3Mpe1xyXG4gICAgICAgIGNvbnN0IGZpbGVvYmogPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGtleSk7XHJcbiAgICAgICAgaWYgKGZpbGVvYmogaW5zdGFuY2VvZiBURmlsZSl7XHJcbiAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZW9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbGVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2xpbmtGaWxlc0RhdGF2aWV3KGFwcDpBcHAsIGZpbGU6VEZpbGUsIGlzRGF0YXZpZXdFbmFibGVkOmJvb2xlYW4pOlRGaWxlW117XHJcbiAgICBsZXQgZmlsZXM6VEZpbGVbXT1bXTtcclxuXHJcbiAgICBpZiAoIWlzRGF0YXZpZXdFbmFibGVkKXtcclxuICAgICAgICByZXR1cm4gZ2V0QmFja2xpbmtGaWxlcyhhcHAsIGZpbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBiYWNrbGlua3MgPSBhcHAucGx1Z2lucy5wbHVnaW5zLmRhdGF2aWV3Py5hcGk/LnBhZ2VzKGBcIiR7ZmlsZS5wYXRofVwiYCk/LnZhbHVlc1swXT8uZmlsZS5pbmxpbmtzLnZhbHVlcztcclxuICAgIGlmICghYmFja2xpbmtzKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldEJhY2tsaW5rRmlsZXMoYXBwLGZpbGUpO1xyXG4gICAgfVxyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgYmFja2xpbmtzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBjb25zdCBmaWxlb2JqID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChiYWNrbGlua3NbaV0ucGF0aCk7XHJcbiAgICAgICAgaWYgKGZpbGVvYmogaW5zdGFuY2VvZiBURmlsZSl7XHJcbiAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZW9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbGVzO1xyXG59IiwgImltcG9ydCB7IEFwcCwgVEFic3RyYWN0RmlsZSwgVEZpbGUsIFRGb2xkZXJ9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luLCB7IEZpbGVJbmZvLCBGaWxlU3RhdHVzLCBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzLCBPdXRsaW5lRGF0YX0gZnJvbSAnc3JjL21haW4nO1xyXG5pbXBvcnQgeyBnZXRCYWNrbGlua0ZpbGVzLCBnZXRCYWNrbGlua0ZpbGVzRGF0YXZpZXcgfSBmcm9tICdzcmMvZ2V0VGFyZ2V0RmlsZXMnO1xyXG5cclxuLy8gXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMEI5XHUzMEM2XHUzMEZDXHUzMEJGXHUzMEI5XHUzMDZFXHU1MjFEXHU2NzFGXHU1MzE2XHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0RmlsZVN0YXR1cyhmaWxlczogVEFic3RyYWN0RmlsZVtdKTogRmlsZVN0YXR1c1tdIHtcclxuICAgIGxldCBzdGF0dXM6RmlsZVN0YXR1c1tdID0gW107XHJcbiAgICBmb3IgKGxldCBpPTA7IGk8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZmxhZ0ZvbGRlciA9IEJvb2xlYW4oZmlsZXNbaV0gaW5zdGFuY2VvZiBURm9sZGVyKTtcclxuICAgICAgICBzdGF0dXMucHVzaCh7XHJcbiAgICAgICAgICAgIGlzRm9sZGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgaXNUb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICBkdXBsaWNhdGVkOiB7XHJcbiAgICAgICAgICAgICAgICBtYWluOmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgb3V0Z29pbmc6ZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBiYWNrbGluazpmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNlbGY6ZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3V0bGluZVJlYWR5OiBmYWxzZSxcclxuICAgICAgICAgICAgaXNGb2xkZXI6IGZsYWdGb2xkZXJcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXR1cztcclxufVxyXG5cclxuXHJcbi8vIFx1NTM1OFx1NEUwMFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA2RVx1NjBDNVx1NTgzMVx1NTNENlx1NUY5N1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RmlsZUluZm8oYXBwOiBBcHAsIGZpbGU6IFRGaWxlLCBzZXR0aW5nczpNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzLCBmb3JjZUdldEJhY2tsaW5rczogYm9vbGVhbiA9IGZhbHNlLCBpc0RhdGF2aWV3RW5hYmxlZDpib29sZWFuKTogUHJvbWlzZTxGaWxlSW5mbz4ge1xyXG5cclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcclxuXHJcbiAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIik7XHJcblxyXG4gICAgY29uc3QgYmFja2xpbmtGaWxlcyA9IChzZXR0aW5ncy5zaG93QmFja2xpbmtzIHx8IGZvcmNlR2V0QmFja2xpbmtzKSA/IGdldEJhY2tsaW5rRmlsZXNEYXRhdmlldyggYXBwLCBmaWxlLCBpc0RhdGF2aWV3RW5hYmxlZCk6IHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdCBpbmZvOkZpbGVJbmZvID0ge1xyXG4gICAgICAgIGxpbmVzOiBsaW5lcyxcclxuICAgICAgICBudW1PZkxpbmVzOiBsaW5lcy5sZW5ndGgsXHJcbiAgICAgICAgYmFja2xpbmtzOiBiYWNrbGlua0ZpbGVzLFxyXG4gICAgICAgIGZyb250bWF0dGVyTGlua3M6IHVuZGVmaW5lZFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4gaW5mbztcclxufVxyXG5cclxuLy8gXHU1MzU4XHU0RTAwXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHU1M0Q2XHU1Rjk3XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRPdXRsaW5lIChhcHA6IEFwcCwgZmlsZTogVEZpbGUsIHN0YXR1czpGaWxlU3RhdHVzLCBpbmZvOiBGaWxlSW5mbywgc2V0dGluZ3M6TXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncyk6IFByb21pc2U8T3V0bGluZURhdGFbXT57XHJcblxyXG4gICAgbGV0IGRhdGE6IE91dGxpbmVEYXRhW10gPSBbXTtcclxuICAgIGNvbnN0IGNhY2hlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG5cclxuICAgIC8vIGNhY2hlXHUzMDZGbnVsbFx1MzA2RVx1NTgzNFx1NTQwOFx1MzA0Q1x1MzA0Mlx1MzA4QlxyXG4gICAgaWYgKCFjYWNoZSl7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICAvLyBwcm9wZXJ0aWVzKGZyb250bWF0dGVyKVx1MzA0Qlx1MzA4OVx1MzBFQVx1MzBGM1x1MzBBRlx1MzA5Mlx1NTNENlx1NUY5N1xyXG4gICAgaW5mby5mcm9udG1hdHRlckxpbmtzID0gY2FjaGU/LmZyb250bWF0dGVyTGlua3M7XHJcbiAgICBcclxuICAgIC8vIGhlYWRpbmdzLGxpbmtzLHRhZ3MgXHUzMDkyXHU2MkJEXHU1MUZBXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NoZWNrIGhlYWRpbmdzJyxjYWNoZS5oYXNPd25Qcm9wZXJ0eShcImhlYWRpbmdzXCIpICk7XHJcbiAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkoXCJoZWFkaW5nc1wiKSl7XHJcbiAgICAgICAgZm9yIChsZXQgaj0wOyBqPCBjYWNoZS5oZWFkaW5ncy5sZW5ndGggOyBqKyspe1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50Ok91dGxpbmVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZU9mRWxlbWVudCA6IFwiaGVhZGluZ1wiLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gOiBjYWNoZS5oZWFkaW5nc1tqXS5wb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0IDogY2FjaGUuaGVhZGluZ3Nbal0uaGVhZGluZyxcclxuICAgICAgICAgICAgICAgIGxldmVsOiBjYWNoZS5oZWFkaW5nc1tqXS5sZXZlbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkYXRhLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdjaGVjayBsaW5rcycsY2FjaGUuaGFzT3duUHJvcGVydHkoXCJsaW5rc1wiKSApO1xyXG4gICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KFwibGlua3NcIikpe1xyXG4gICAgICAgIGZvciAobGV0IGo9MDsgajwgY2FjaGUubGlua3MubGVuZ3RoIDsgaisrKXtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudDpPdXRsaW5lRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGVPZkVsZW1lbnQgOiBcImxpbmtcIixcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogY2FjaGUubGlua3Nbal0ucG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICAvL1x1MzBERVx1MzBGQ1x1MzBBRlx1MzBDMFx1MzBBNlx1MzBGM1x1MzBFQVx1MzBGM1x1MzBBRiBcdTMwNkJcdTVCRkVcdTVGRENcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0IDogXHJcbiAgICAgICAgICAgICAgICAgICAgKGNhY2hlLmxpbmtzW2pdLmRpc3BsYXlUZXh0ID09XCJcIikgXHJcbiAgICAgICAgICAgICAgICAgICAgPyBjYWNoZS5saW5rc1tqXS5vcmlnaW5hbC5zdWJzdHJpbmcoMSxjYWNoZS5saW5rc1tqXS5vcmlnaW5hbC5pbmRleE9mKFwiXVwiKSkgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBjYWNoZS5saW5rc1tqXS5kaXNwbGF5VGV4dCxcclxuICAgICAgICAgICAgICAgIGxpbms6IGNhY2hlLmxpbmtzW2pdLmxpbmtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGF0YS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cdFx0XHRcdFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2hlY2sgbGlzdHMnKTtcclxuICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShcImxpc3RJdGVtc1wiKSl7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGo9MDsgajwgY2FjaGUubGlzdEl0ZW1zLmxlbmd0aCA7IGorKyl7XHJcbiAgICAgICAgICAgIC8vXHU0RUU1XHU0RTBCXHUzMDY3XHUzMEVBXHUzMEI5XHUzMEM4XHUzMEEyXHUzMEE0XHUzMEM2XHUzMEUwXHUzMDZFXHU5NjhFXHU1QzY0XHUzMDZFXHU1MjI0XHU1QjlBXHUzMDkyXHU4ODRDXHUzMDQ2XHUzMDAyXHJcbiAgICAgICAgICAgIC8vXHUzMEVBXHUzMEI5XHUzMEM4XHUzMDZFXHU1MTQ4XHU5ODJEXHUzMDZFXHU5ODA1XHU3NkVFOjBcdTMwMDFcdTUxNDhcdTk4MkRcdTMwNjdcdTMwNkZcdTMwNkFcdTMwNDRcdTMwNENcdTMwRUJcdTMwRkNcdTMwQzhcdTMwRUNcdTMwRDlcdTMwRUI6MVx1MzAwMVx1N0IyQzJcdTk2OEVcdTVDNjRcdTRFRTVcdTRFMEJcdUZGMUEyXHUzMDY4XHUzMDU3XHUzMDY2XHUzMDQ0XHUzMDhCXHUzMDAyXHJcbiAgICAgICAgICAgIC8vcGFyZW50XHUzMDRDXHU2QjYzXHUzMDZFXHU2NTcwXHUzMDZBXHUzMDg5XHU3QjJDMlx1OTY4RVx1NUM2NFx1NEVFNVx1NEUwQlxyXG4gICAgICAgICAgICAvL1x1OENBMFx1MzA2RVx1NjU3MFx1MzA2N1x1MzAwMVx1N0Q3Nlx1NUJGRVx1NTAyNFx1MzA0Q3Bvc2l0aW9uLnN0YXJ0LmxpbmVcdTMwNjhcdTRFMDBcdTgxRjRcdTMwNTdcdTMwNjZcdTMwNDRcdTMwOENcdTMwNzBcdTMwQzhcdTMwQzNcdTMwRDdcdTMwQTJcdTMwQTRcdTMwQzZcdTMwRTAoMClcdTMwMDFcdTk3NUVcdTRFMDBcdTgxRjRcdTMwNkFcdTMwODlcdTMwRUJcdTMwRkNcdTMwQzhcdUZGMDgxXHVGRjA5XHJcbiAgICAgICAgICAgIC8vXHUzMDVGXHUzMDYwXHUzMDU3XHU4OTk2XHU4OTlBXHU3Njg0XHUzMDZCXHU5NkUyXHUzMDhDXHUzMDVGXHUzMEM4XHUzMEMzXHUzMEQ3XHUzMEVDXHUzMEQ5XHUzMEVCXHUzMDZFXHUzMEEyXHUzMEE0XHUzMEM2XHUzMEUwXHUzMDY3XHUzMDgyXHUzMDAxXHU5NTkzXHUzMDZCaGVhZGluZ1x1MzA0Q1x1MzA2QVx1MzA0NFx1MzA2OFx1MzBFQlx1MzBGQ1x1MzBDOFx1MzBBMlx1MzBBNFx1MzBDNlx1MzBFMFx1MzA2OFx1MzA1N1x1MzA2Nlx1NTIyNFx1NUI5QVx1MzA1NVx1MzA4Q1x1MzA2Nlx1MzA1N1x1MzA3RVx1MzA0Nlx1MzA2RVx1MzA2N1x1MzAwMVxyXG4gICAgICAgICAgICAvL1x1NTI0RFx1MzA2RVx1MzBFQVx1MzBCOVx1MzBDOFx1MzBBMlx1MzBBNFx1MzBDNlx1MzBFMFx1MzA2OFx1MzA2RVx1ODg0Q1x1MzA2RVx1NURFRVx1MzA0QzFcdTMwNkVcdTY2NDJcdTMwNkVcdTMwN0ZcdTMwRUJcdTMwRkNcdTMwQzhcdTMwQTJcdTMwQTRcdTMwQzZcdTMwRTBcdTMwNjhcdTMwNTdcdTMwNjZcdTUyMjRcdTVCOUFcdTMwNTlcdTMwOEJcdTMwODhcdTMwNDZcdTRGRUVcdTZCNjNcdTMwNTlcdTMwOEJcdTMwMDJcclxuICAgICAgICAgICAgbGV0IGxpc3RMZXZlbDogbnVtYmVyID0gMDsgLy8gMDp0b3AgaXRlbSBvZiBhIGxpc3QgMTpyb290IGxldmUgMjpvdGhlclxyXG4gICAgICAgICAgICBpZiAoY2FjaGUubGlzdEl0ZW1zW2pdLnBhcmVudCA+MCl7XHJcbiAgICAgICAgICAgICAgICBsaXN0TGV2ZWwgPSAyO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGo+MCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShNYXRoLmFicyhjYWNoZS5saXN0SXRlbXNbal0ucGFyZW50KSA9PSBjYWNoZS5saXN0SXRlbXNbal0ucG9zaXRpb24uc3RhcnQubGluZSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAoY2FjaGUubGlzdEl0ZW1zW2pdLnBvc2l0aW9uLnN0YXJ0LmxpbmUgLSBjYWNoZS5saXN0SXRlbXNbai0xXS5wb3NpdGlvbi5zdGFydC5saW5lID09IDEpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RMZXZlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudDpPdXRsaW5lRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGVPZkVsZW1lbnQgOiBcImxpc3RJdGVtc1wiLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gOiBjYWNoZS5saXN0SXRlbXNbal0ucG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5VGV4dCA6IGluZm8/LmxpbmVzW2NhY2hlLmxpc3RJdGVtc1tqXS5wb3NpdGlvbi5zdGFydC5saW5lXS5yZXBsYWNlKC9eKFxcc3xcXHQpKi1cXHMoXFxbLitcXF1cXHMpKi8sJycpLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWwgOiBsaXN0TGV2ZWwsXHJcbiAgICAgICAgICAgICAgICB0YXNrIDogY2FjaGUubGlzdEl0ZW1zW2pdLnRhc2tcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGF0YS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gY29uc29sZS5sb2coJ2NoZWNrIHRhZ3MnLGNhY2hlLmhhc093blByb3BlcnR5KFwidGFnc1wiKSApO1xyXG4gICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KFwidGFnc1wiKSl7XHJcbiAgICAgICAgZm9yIChsZXQgaj0wOyBqPCBjYWNoZS50YWdzLmxlbmd0aCA7IGorKyl7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6T3V0bGluZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlT2ZFbGVtZW50IDogXCJ0YWdcIixcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uIDogY2FjaGUudGFnc1tqXS5wb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0IDogY2FjaGUudGFnc1tqXS50YWcuc3Vic3RyaW5nKDEpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkYXRhLnB1c2goZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAvL0FPVFx1MzBCRlx1MzBCMFx1MzA2RVx1NTIyNFx1NUI5QVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldHRpbmdzLnRhZ3NBT1Qpe1xyXG4gICAgICAgICAgICAgICAgaWYoICh2YWx1ZSkgJiYgY2FjaGUudGFnc1tqXS50YWcgPT0gdmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pc1RvcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBcdTg5ODFcdTdEMjBcdTMwNkVcdTc2N0JcdTU4MzRcdTk4MDZcdTMwNkJcdTMwQkRcdTMwRkNcdTMwQzhcclxuICAgIGRhdGEuc29ydCgoYSxiKT0+IHtcclxuICAgICAgICByZXR1cm4gKGEucG9zaXRpb24uc3RhcnQub2Zmc2V0IC0gYi5wb3NpdGlvbi5zdGFydC5vZmZzZXQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBURmlsZSwgVEFic3RyYWN0RmlsZSwgU2NvcGUsIFNldHRpbmcsIE1vZGFsLCBQb3N9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luLCB7IEZJTEVfVElUTEVfQkFDS0dST1VORF9DT0xPUiwgRklMRV9USVRMRV9CQUNLR1JPVU5EX0NPTE9SX0hPVkVSLCBGaWxlSW5mbywgRmlsZVN0YXR1cywgTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncywgT3V0bGluZURhdGF9IGZyb20gJ3NyYy9tYWluJztcclxuXHJcbi8vIGRhdGEuanNvblx1MzA2RXJlbGF0ZWRGaWxlc1x1MzA5Mlx1NjM4M1x1OTY2NFx1RkYxQVx1NTAyNFx1MzA0Q1x1N0E3QVx1OTE0RFx1NTIxN1x1MzA2RVx1MzBEN1x1MzBFRFx1MzBEMVx1MzBDNlx1MzBBM1x1MzA5Mlx1NTI0QVx1OTY2NFxyXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5SZWxhdGVkRmlsZXMoc3JjRmlsZTpUQWJzdHJhY3RGaWxlLCBkc3RGaWxlOlRBYnN0cmFjdEZpbGUsIHNldHRpbmdzOk11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3MpOiB2b2lkIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZS5wYXRoXVtkc3RGaWxlLnBhdGhdKS5sZW5ndGggPT0gMCl7XHJcbiAgICAgICAgZGVsZXRlIHNldHRpbmdzLnJlbGF0ZWRGaWxlc1tzcmNGaWxlLnBhdGhdW2RzdEZpbGUucGF0aF07XHJcbiAgICB9XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGUucGF0aF0pLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgZGVsZXRlIHNldHRpbmdzLnJlbGF0ZWRGaWxlc1tzcmNGaWxlLnBhdGhdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBkYXRhLmpzb25cdTMwNkVyZWxhdGVkRmlsZXNcdTMwNkJcdTMwNjRcdTMwNDRcdTMwNjZcdTMwMDFzcmNGaWxlXHUzMDY4ZHN0RmlsZVx1MzA2RVx1N0Q0NFx1MzA3Rlx1NTQwOFx1MzA4Rlx1MzA1Qlx1MzA2N1x1MzAwMWZsYWdcdTMwNjdcdTYzMDdcdTVCOUFcdTMwNTdcdTMwNUZcdTMwRDVcdTMwRTlcdTMwQjBcdTMwNENcdTVCNThcdTU3MjhcdTMwNTlcdTMwOEJcdTMwNEJcdTMwQzFcdTMwQTdcdTMwQzNcdTMwQUZcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRmxhZyhzcmNGaWxlOlRBYnN0cmFjdEZpbGUsIGRzdEZpbGU6VEFic3RyYWN0RmlsZSwgZmxhZzogJ2ZvbGQnfCd0b3AnLCBzZXR0aW5nczogTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHNldHRpbmdzLnJlbGF0ZWRGaWxlc1tzcmNGaWxlLnBhdGhdPy5bZHN0RmlsZS5wYXRoXT8uW2ZsYWddO1xyXG59XHJcblxyXG4vLyByZWxhdGVkRmlsZXNcdTMwNkJcdTYzMDdcdTVCOUFcdTMwNTdcdTMwNUZcdTMwRDVcdTMwRTlcdTMwQjBcdTMwOTJcdThGRkRcdTUyQTBcclxuZXhwb3J0IGZ1bmN0aW9uIGFkZEZsYWcoc3JjRmlsZTpUQWJzdHJhY3RGaWxlLCBkc3RGaWxlOlRBYnN0cmFjdEZpbGUsIGZsYWc6ICdmb2xkJ3wndG9wJywgc2V0dGluZ3M6IE11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3MpOiB2b2lkIHtcclxuICAgIGlmKCFzZXR0aW5ncy5yZWxhdGVkRmlsZXMuaGFzT3duUHJvcGVydHkoc3JjRmlsZS5wYXRoKSl7XHJcbiAgICAgICAgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGUucGF0aF0gPSB7fTtcclxuICAgIH1cclxuICAgIGlmKCFzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZS5wYXRoXS5oYXNPd25Qcm9wZXJ0eShkc3RGaWxlLnBhdGgpKXtcclxuICAgICAgICBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZS5wYXRoXVtkc3RGaWxlLnBhdGhdPXt9O1xyXG4gICAgfVxyXG4gICAgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGUucGF0aF1bZHN0RmlsZS5wYXRoXVtmbGFnXSA9IHRydWU7XHJcbn1cclxuXHJcbi8vcmVsYXRlZEZpbGVzXHUzMDRCXHUzMDg5XHU2MzA3XHU1QjlBXHUzMDU3XHUzMDVGXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDkyXHU5NjY0XHU1M0JCXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGbGFnKHNyY0ZpbGU6VEFic3RyYWN0RmlsZSwgZHN0RmlsZTpUQWJzdHJhY3RGaWxlLCBmbGFnOiAnZm9sZCd8J3RvcCcsIHNldHRpbmdzOiBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzKTogdm9pZCB7XHJcbiAgICBkZWxldGUgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGUucGF0aF1bZHN0RmlsZS5wYXRoXVtmbGFnXTtcclxuICAgIGNsZWFuUmVsYXRlZEZpbGVzKHNyY0ZpbGUsZHN0RmlsZSxzZXR0aW5ncyk7XHJcbn1cclxuXHJcbi8vcmVsYXRlZEZpbGVzXHUzMDZFXHU2MzA3XHU1QjlBXHUzMDU3XHUzMDVGXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDkyXHUzMEM4XHUzMEIwXHUzMEVCXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVGbGFnKHNyY0ZpbGU6VEFic3RyYWN0RmlsZSwgZHN0RmlsZTpUQWJzdHJhY3RGaWxlLCBmbGFnOiAnZm9sZCd8J3RvcCcsIHNldHRpbmdzOiBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hlY2tGbGFnKHNyY0ZpbGUsIGRzdEZpbGUsIGZsYWcsIHNldHRpbmdzKSA9PSB0cnVlKXtcclxuICAgICAgICByZW1vdmVGbGFnKHNyY0ZpbGUsIGRzdEZpbGUsIGZsYWcsIHNldHRpbmdzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWRkRmxhZyhzcmNGaWxlLCBkc3RGaWxlLCBmbGFnLCBzZXR0aW5ncyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyByZWxhdGVkRmlsZXNcdTMwNkVyZW5hbWVcdTMwNkJcdTVCRkVcdTVGRENcclxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVJlbmFtZVJlbGF0ZWRGaWxlcyhyZW5hbWVkRmlsZTogVEFic3RyYWN0RmlsZSwgb2xkUGF0aDogc3RyaW5nLCBzZXR0aW5nczogTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncyk6Ym9vbGVhbntcclxuICAgIGxldCByZW5hbWVkID0gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBzcmNGaWxlUGF0aCBpbiBzZXR0aW5ncy5yZWxhdGVkRmlsZXMpe1xyXG5cclxuICAgICAgICBmb3IgKGxldCBkc3RGaWxlUGF0aCBpbiBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdKXtcclxuICAgICAgICAgICAgaWYgKGRzdEZpbGVQYXRoID09IG9sZFBhdGgpe1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXVtyZW5hbWVkRmlsZS5wYXRoXT0gc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXVtkc3RGaWxlUGF0aF07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXVtkc3RGaWxlUGF0aF07XHJcbiAgICAgICAgICAgICAgICByZW5hbWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNyY0ZpbGVQYXRoID09IG9sZFBhdGgpe1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbcmVuYW1lZEZpbGUucGF0aF0gPSBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdO1xyXG4gICAgICAgICAgICBkZWxldGUgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXTtcclxuICAgICAgICAgICAgcmVuYW1lZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlbmFtZWQ7XHJcbn1cclxuXHJcbi8vIHJlbGF0ZWRGaWxlc1x1MzA2RWRlbGV0ZVx1MzA2Qlx1NUJGRVx1NUZEQ1xyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRGVsZXRlUmVsYXRlZEZpbGVzKGRlbGV0ZWRGaWxlOiBUQWJzdHJhY3RGaWxlLCBzZXR0aW5nczogTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncyl7XHJcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgZm9yIChsZXQgc3JjRmlsZVBhdGggaW4gc2V0dGluZ3MucmVsYXRlZEZpbGVzKXtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZHN0RmlsZVBhdGggaW4gc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXSl7XHJcbiAgICAgICAgICAgIGlmIChkc3RGaWxlUGF0aCA9PSBkZWxldGVkRmlsZS5wYXRoKXtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdW2RzdEZpbGVQYXRoXTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3JjRmlsZVBhdGggPT0gZGVsZXRlZEZpbGUucGF0aCl7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdO1xyXG4gICAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVsZXRlZDtcclxufVxyXG5cclxuLy8gXHUzMEM2XHUzMEZDXHUzMERFXHVGRjA4XHUzMEU5XHUzMEE0XHUzMEM4L1x1MzBDMFx1MzBGQ1x1MzBBRlx1RkYwOVx1MzA5Mlx1NTNENlx1NUY5N1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhlbWUoKTonbGlnaHQnfCdkYXJrJyB7XHJcbiAgICBjb25zdCB0aGVtZSA9IChhcHAudmF1bHQuY29uZmlnPy50aGVtZSA9PT0gJ21vb25zdG9uZScpPyAnbGlnaHQnOidkYXJrJztcclxuICAgIHJldHVybiB0aGVtZTtcclxufVxyXG5cclxuLy8gXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMEJGXHUzMEE0XHUzMEM4XHUzMEVCXHUzMDZFXHU4MENDXHU2NjZGXHU4MjcyXHUzMDkyXHU2MzA3XHU1QjlBdmVyMlx1RkYwOGNzc1x1NTkwOVx1NjU3MFx1MzA5Mlx1OEEyRFx1NUI5QVx1NTAyNFx1MzA2Qlx1NTdGQVx1MzA2NVx1MzA0NFx1MzA2Nlx1NTkwOVx1NjZGNFx1RkYwOSAgXHUyMDNCXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMEE4XHUzMEFGXHUzMEI5XHUzMEQ3XHUzMEVEXHUzMEZDXHUzMEU5XHUzMDZFXHUzMEQ1XHUzMEE5XHUzMEVCXHUzMEMwXHUzMDZFXHU4MENDXHU2NjZGXHU4MjcyXHUzMDZCXHU3NkY4XHU1RjUzXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXROb3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3IodGhlbWU6ICdsaWdodCd8J2RhcmsnLCBzZXR0aW5nczogTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5ncyl7XHJcbiAgICBzd2l0Y2goc2V0dGluZ3Mubm90ZVRpdGxlQmFja2dyb3VuZENvbG9yKXtcclxuICAgICAgICBjYXNlICdub25lJzpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY3VzdG9tJzpcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tTU5PLWZpbGV0aXRsZS1iYWNrZ3JvdW5kXCIsIHNldHRpbmdzLmN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvclt0aGVtZV0pO1xyXG5cdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLnN0eWxlLnNldFByb3BlcnR5KFwiLS1NTk8tZmlsZXRpdGxlLWJhY2tncm91bmQtaG92ZXJcIiwgc2V0dGluZ3MuY3VzdG9tTm90ZVRpdGxlQmFja2dyb3VuZENvbG9ySG92ZXJbdGhlbWVdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tTU5PLWZpbGV0aXRsZS1iYWNrZ3JvdW5kXCIsIEZJTEVfVElUTEVfQkFDS0dST1VORF9DT0xPUltzZXR0aW5ncy5ub3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3JdW3RoZW1lXSk7XHJcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUuc2V0UHJvcGVydHkoXCItLU1OTy1maWxldGl0bGUtYmFja2dyb3VuZC1ob3ZlclwiLCBGSUxFX1RJVExFX0JBQ0tHUk9VTkRfQ09MT1JfSE9WRVJbc2V0dGluZ3Mubm90ZVRpdGxlQmFja2dyb3VuZENvbG9yXVt0aGVtZV0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbn1cclxuXHJcbi8vIFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzBCRlx1MzBBNFx1MzBDOFx1MzBFQlx1MzA2RVx1ODBDQ1x1NjY2Rlx1ODI3Mlx1MzA5Mlx1NjMwN1x1NUI5QVx1RkYwOGNzc1x1NTkwOVx1NjU3MFx1MzA5Mlx1OEEyRFx1NUI5QVx1NTAyNFx1MzA2Qlx1NTdGQVx1MzA2NVx1MzA0NFx1MzA2Nlx1NTkwOVx1NjZGNFx1RkYwOSAgXHUyMDNCXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMEE4XHUzMEFGXHUzMEI5XHUzMEQ3XHUzMEVEXHUzMEZDXHUzMEU5XHUzMDZFXHUzMEQ1XHUzMEE5XHUzMEVCXHUzMEMwXHUzMDZFXHU4MENDXHU2NjZGXHU4MjcyXHUzMDZCXHU3NkY4XHU1RjUzXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VOb3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3Ioc2V0dGluZ3M6IE11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3Mpe1xyXG4vLyAgICAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLmNsYXNzTGlzdC5jb250YWlucygndGhlbWUtbGlnaHQnKSA/ICdsaWdodCcgOiAnZGFyayc7XHJcbi8vICAgICBzd2l0Y2goc2V0dGluZ3Mubm90ZVRpdGxlQmFja2dyb3VuZENvbG9yKXtcclxuLy8gICAgICAgICBjYXNlICdub25lJzpcclxuLy8gICAgICAgICAgICAgYnJlYWs7XHJcbi8vICAgICAgICAgY2FzZSAnY3VzdG9tJzpcclxuLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tTU5PLWZpbGV0aXRsZS1iYWNrZ3JvdW5kXCIsIHNldHRpbmdzLmN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvclt0aGVtZV0pO1xyXG4vLyBcdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLnN0eWxlLnNldFByb3BlcnR5KFwiLS1NTk8tZmlsZXRpdGxlLWJhY2tncm91bmQtaG92ZXJcIiwgc2V0dGluZ3MuY3VzdG9tTm90ZVRpdGxlQmFja2dyb3VuZENvbG9ySG92ZXJbdGhlbWVdKTtcclxuLy8gICAgICAgICAgICAgYnJlYWs7XHJcbi8vICAgICAgICAgZGVmYXVsdDpcclxuLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tTU5PLWZpbGV0aXRsZS1iYWNrZ3JvdW5kXCIsIEZJTEVfVElUTEVfQkFDS0dST1VORF9DT0xPUltzZXR0aW5ncy5ub3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3JdW3RoZW1lXSk7XHJcbi8vIFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUuc2V0UHJvcGVydHkoXCItLU1OTy1maWxldGl0bGUtYmFja2dyb3VuZC1ob3ZlclwiLCBGSUxFX1RJVExFX0JBQ0tHUk9VTkRfQ09MT1JfSE9WRVJbc2V0dGluZ3Mubm90ZVRpdGxlQmFja2dyb3VuZENvbG9yXVt0aGVtZV0pO1xyXG4vLyAgICAgICAgICAgICBicmVhaztcclxuLy8gICAgICAgICB9XHJcbi8vIH1cclxuXHJcblxyXG4vLyBcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTk4MDZcdTMwQkRcdTMwRkNcdTMwQzhcclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRGaWxlT3JkZXIoIG9yZGVyOiBudW1iZXJbXSwgZmlsZXM6IFRBYnN0cmFjdEZpbGVbXSwgc3RhdHVzOiBGaWxlU3RhdHVzW10sIGluZm86IEZpbGVJbmZvW10sIHNldHRpbmdzOiBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzKTp2b2lkIHtcclxuICAgIHN3aXRjaCAoc2V0dGluZ3Muc29ydFR5cGUpe1xyXG4gICAgICAgIGNhc2UgJ2FscGhhYmV0QXNjZW5kaW5nJzpcclxuICAgICAgICAgICAgb3JkZXIuc29ydCggKHZhbDEsdmFsMik9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzW3ZhbDFdLmlzRm9sZGVyICE9IHN0YXR1c1t2YWwyXS5pc0ZvbGRlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzdGF0dXNbdmFsMV0uaXNGb2xkZXIpID09IHRydWUgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZXNbdmFsMV0ubmFtZS5sb2NhbGVDb21wYXJlKGZpbGVzW3ZhbDJdLm5hbWUpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2FscGhhYmV0RGVzY2VuZGluZyc6XHJcbiAgICAgICAgICAgIG9yZGVyLnNvcnQoICh2YWwxLHZhbDIpPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1c1t2YWwxXS5pc0ZvbGRlciAhPSBzdGF0dXNbdmFsMl0uaXNGb2xkZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoc3RhdHVzW3ZhbDFdLmlzRm9sZGVyKSA9PSB0cnVlID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVzW3ZhbDJdLm5hbWUubG9jYWxlQ29tcGFyZShmaWxlc1t2YWwxXS5uYW1lKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdjdGltZURlc2NlbmRpbmcnOlxyXG4gICAgICAgICAgICBvcmRlci5zb3J0KCAodmFsMSx2YWwyKT0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXNbdmFsMV0uaXNGb2xkZXIgIT0gc3RhdHVzW3ZhbDJdLmlzRm9sZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHN0YXR1c1t2YWwxXS5pc0ZvbGRlcikgPT0gdHJ1ZSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAoZmlsZXNbdmFsMl0gYXMgVEZpbGUpLnN0YXQuY3RpbWUgLSAoZmlsZXNbdmFsMV0gYXMgVEZpbGUpLnN0YXQuY3RpbWU7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ2N0aW1lQXNjZW5kaW5nJzpcclxuICAgICAgICAgICAgb3JkZXIuc29ydCggKHZhbDEsdmFsMik9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzW3ZhbDFdLmlzRm9sZGVyICE9IHN0YXR1c1t2YWwyXS5pc0ZvbGRlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzdGF0dXNbdmFsMV0uaXNGb2xkZXIpID09IHRydWUgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZpbGVzW3ZhbDFdIGFzIFRGaWxlKS5zdGF0LmN0aW1lIC0gKGZpbGVzW3ZhbDJdIGFzIFRGaWxlKS5zdGF0LmN0aW1lOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdtdGltZURlc2NlbmRpbmcnOlxyXG4gICAgICAgICAgICBvcmRlci5zb3J0KCAodmFsMSx2YWwyKT0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXNbdmFsMV0uaXNGb2xkZXIgIT0gc3RhdHVzW3ZhbDJdLmlzRm9sZGVyKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHN0YXR1c1t2YWwxXS5pc0ZvbGRlcikgPT0gdHJ1ZSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAoZmlsZXNbdmFsMl0gYXMgVEZpbGUpLnN0YXQubXRpbWUgLSAoZmlsZXNbdmFsMV0gYXMgVEZpbGUpLnN0YXQubXRpbWU7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ210aW1lQXNjZW5kaW5nJzpcclxuICAgICAgICAgICAgb3JkZXIuc29ydCggKHZhbDEsdmFsMik9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzW3ZhbDFdLmlzRm9sZGVyICE9IHN0YXR1c1t2YWwyXS5pc0ZvbGRlcil7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzdGF0dXNbdmFsMV0uaXNGb2xkZXIpID09IHRydWUgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZpbGVzW3ZhbDFdIGFzIFRGaWxlKS5zdGF0Lm10aW1lIC0gKGZpbGVzW3ZhbDJdIGFzIFRGaWxlKS5zdGF0Lm10aW1lOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIHJlbGF0ZWQgRmlsZXNcdTUxNjhcdTZEODhcdTUzQkJcclxuZXhwb3J0IGNsYXNzIE1vZGFsQ29uZmlybSBleHRlbmRzIE1vZGFsIHtcclxuXHRwbHVnaW46IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luO1xyXG5cdHNjb3BlOiBTY29wZTtcclxuICAgIGluc3RydWN0aW9uOiBzdHJpbmc7XHJcblxyXG5cdG9uU3VibWl0OiAoKSA9PiB2b2lkO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBNdWx0aXBsZU5vdGVzT3V0bGluZVBsdWdpbiwgaW5zdHJ1Y3Rpb246IHN0cmluZywgb25TdWJtaXQ6ICgpID0+IHZvaWQpIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLmluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb247XHJcblx0XHR0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XHJcblx0fVxyXG5cclxuXHRvbk9wZW4oKSB7XHJcblxyXG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuY3JlYXRlRWwoXCJiclwiKTtcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJwXCIse1xyXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmluc3RydWN0aW9uXHJcbiAgICAgICAgfSlcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcblx0XHRcdC5hZGRCdXR0b24oKGJ0bikgPT5cclxuXHRcdFx0XHRidG5cclxuXHRcdFx0XHRcdC5zZXRCdXR0b25UZXh0KFwiRXhlY3V0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxyXG5cdFx0XHRcdFx0Lm9uQ2xpY2soXHJcblx0XHRcdFx0XHRcdGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdCAgICBcdHRoaXMuZXhlY3V0ZSgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQpKVxyXG5cdFx0XHQuYWRkQnV0dG9uKChidG4pID0+XHJcblx0XHRcdFx0YnRuXHJcblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIkNhbmNlbFwiKVxyXG5cdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmNsb3NlKCk7XHJcblx0XHRcdFx0XHR9KSk7XHJcblx0fVxyXG5cclxuXHRvbkNsb3NlKCkge1xyXG5cdFx0bGV0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBleGVjdXRlKCk6UHJvbWlzZTx2b2lkPntcclxuXHRcdHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLm9uU3VibWl0KCk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBcdTVCNThcdTU3MjhcdTMwNTdcdTMwNkFcdTMwNDRyZWxhdGVkRmlsZXNcdTMwNkVcdTMwRDFcdTMwQjlcdTMwOTJcdTMwQUZcdTMwRUFcdTMwRkNcdTMwRjNcdTMwQTJcdTMwQzNcdTMwRDdcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVsYXRlZEZpbGVzKGFwcDpBcHAsIHNldHRpbmdzOiBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzKTp2b2lke1xyXG4gICAgZm9yIChsZXQgc3JjRmlsZVBhdGggaW4gc2V0dGluZ3MucmVsYXRlZEZpbGVzKXtcclxuICAgICAgICBmb3IgKGxldCBkc3RGaWxlUGF0aCBpbiBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdKXtcclxuICAgICAgICAgICAgLy9cdTVCRkVcdThDNjFcdTMwRDFcdTMwQjlcdTMwNkVcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUIvXHUzMEQ1XHUzMEE5XHUzMEVCXHUzMEMwXHUzMDRDXHU1QjU4XHU1NzI4XHUzMDU3XHUzMDZBXHUzMDUxXHUzMDhDXHUzMDcwXHU1MjRBXHU5NjY0XHJcbiAgICAgICAgICAgIGlmICghYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChkc3RGaWxlUGF0aCkpe1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHNldHRpbmdzLnJlbGF0ZWRGaWxlc1tzcmNGaWxlUGF0aF1bZHN0RmlsZVBhdGhdO1xyXG4gICAgICAgICAgICAgICAgaWYoT2JqZWN0LmtleXMoc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXSkubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2V0dGluZ3MucmVsYXRlZEZpbGVzW3NyY0ZpbGVQYXRoXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBcdTUxNDNcdTMwRDFcdTMwQjlcdTMwNkVcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUIvXHUzMEQ1XHUzMEE5XHUzMEVCXHUzMEMwXHUzMDRDXHU1QjU4XHU1NzI4XHUzMDU3XHUzMDZBXHUzMDUxXHUzMDhDXHUzMDcwXHU1MjRBXHU5NjY0XHJcbiAgICAgICAgaWYgKCFhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHNyY0ZpbGVQYXRoKSl7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzZXR0aW5ncy5yZWxhdGVkRmlsZXNbc3JjRmlsZVBhdGhdO1xyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyBzdWJwYXRoXHUzMDkyXHU1NDJCXHUzMDgwXHUzMEVBXHUzMEYzXHUzMEFGXHUzMDZFXHUzMEVBXHUzMEYzXHUzMEFGXHU1MTQ4XHUzMDZFcG9zaXRpb25cdTMwOTJcdTUzRDZcdTVGOTdcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1YnBhdGhQb3NpdGlvbiAoYXBwOkFwcCwgZmlsZTpURmlsZSwgc3VicGF0aDpzdHJpbmcpOlBvc3xudWxse1xyXG4gICAgY29uc3QgY2FjaGUgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICBpZiAoIWNhY2hlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjaGVja3BhdGggPSBzdWJwYXRoLnJlcGxhY2UoL1sjXl0vZywnJyk7XHJcbiAgICBpZiAoY2FjaGUuaGVhZGluZ3M/Lmxlbmd0aCl7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBjYWNoZS5oZWFkaW5ncy5maW5kSW5kZXgoKGVsZW1lbnQpID0+IGVsZW1lbnQuaGVhZGluZy5yZXBsYWNlKC9bI15dL2csJycpID09IGNoZWNrcGF0aCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDApe1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGUuaGVhZGluZ3NbaW5kZXhdLnBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjYWNoZS5zZWN0aW9ucz8ubGVuZ3RoKXtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGNhY2hlLnNlY3Rpb25zLmZpbmRJbmRleCgoZWxlbWVudCkgPT4gZWxlbWVudC5pZD8ucmVwbGFjZSgvWyNeXS9nLCcnKSA9PSBjaGVja3BhdGgpO1xyXG4gICAgICAgIGlmIChpbmRleCA+PSAwKXtcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlLnNlY3Rpb25zW2luZGV4XS5wb3NpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLy8gZGF0YXZpZXdcdTMwNkVcdTMwQzFcdTMwQTdcdTMwQzNcdTMwQUZcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRGF0YXZpZXcgKGFwcDogQXBwKTpib29sZWFuIHtcclxuICAgIGlmIChhcHAucGx1Z2lucy5wbHVnaW5zWydkYXRhdmlldyddKXtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IE11bHRpcGxlTm90ZXNPdXRsaW5lVmlldyB9IGZyb20gXCIuL2ZpbGVWaWV3XCI7XHJcbmltcG9ydCB7IE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlldyB9IGZyb20gXCIuL2ZvbGRlclZpZXdcIjtcclxuaW1wb3J0IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luIGZyb20gXCIuL21haW5cIjtcclxuXHJcbmltcG9ydCB7IHNldEljb24sIFRGaWxlLCBNZW51LCBURm9sZGVyIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBNb2RhbEp1bXAsIHVwZGF0ZUZhdkFuZFJlY2VudCB9IGZyb20gXCIuL0ZhdkFuZFJlY2VudFwiO1xyXG5cclxuLy8gXHU2NENEXHU0RjVDXHUzMEEyXHUzMEE0XHUzMEIzXHUzMEYzXHU5MEU4XHU1MjA2XHUzMDkyXHU2M0NGXHU3NTNCXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3VUkoKTogdm9pZCB7XHJcblxyXG4gICAgY29uc3QgbmF2SGVhZGVyOiBIVE1MRWxlbWVudCA9IGNyZWF0ZURpdihcIm5hdi1oZWFkZXJcIik7XHJcbiAgICBjb25zdCBuYXZCdXR0b25Db250YWluZXI6IEhUTUxFbGVtZW50ID0gbmF2SGVhZGVyLmNyZWF0ZURpdihcIm5hdi1idXR0b25zLWNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAvLyBcdTMwQTJcdTMwQTRcdTMwQjNcdTMwRjNcdTYzQ0ZcdTc1M0JcclxuICAgIHVpVXBkYXRlLmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIHVpRmF2QW5kUmVjZW50LmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIHVpU2V0dGluZy5jYWxsKHRoaXMsIG5hdkJ1dHRvbkNvbnRhaW5lcik7XHJcbiAgICB1aVRvZ2dsZUhlYWRpbmcuY2FsbCh0aGlzLCBuYXZCdXR0b25Db250YWluZXIpO1xyXG4gICAgdWlUb2dnbGVMaW5rLmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIHVpVG9nZ2xlTGlzdEl0ZW1zLmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIHVpVG9nZ2xlQmFja2xpbmtzLmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIC8vdWlFeHRyYWN0LmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIHVpQ29sbGFwc2UuY2FsbCh0aGlzLCBuYXZCdXR0b25Db250YWluZXIpO1xyXG5cclxuXHJcbiAgICAvLyBcdTYzQ0ZcdTc1M0JcdTVCOUZcdTg4NENcclxuICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB0aGlzLmNvbnRlbnRFbC5hcHBlbmRDaGlsZChuYXZIZWFkZXIpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdVSUZvbGRlclZpZXcoKTogdm9pZCB7XHJcblxyXG4gICAgY29uc3QgbmF2SGVhZGVyOiBIVE1MRWxlbWVudCA9IGNyZWF0ZURpdihcIm5hdi1oZWFkZXJcIik7XHJcbiAgICBjb25zdCBuYXZCdXR0b25Db250YWluZXI6IEhUTUxFbGVtZW50ID0gbmF2SGVhZGVyLmNyZWF0ZURpdihcIm5hdi1idXR0b25zLWNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAvLyBcdTMwQTJcdTMwQTRcdTMwQjNcdTMwRjNcdTYzQ0ZcdTc1M0JcclxuICAgIHVpVXBkYXRlRm9sZGVyVmlldy5jYWxsKHRoaXMsIG5hdkJ1dHRvbkNvbnRhaW5lcik7XHJcbiAgICB1aUZhdkFuZFJlY2VudC5jYWxsKHRoaXMsIG5hdkJ1dHRvbkNvbnRhaW5lcik7XHJcbiAgICB1aVNldHRpbmdGb2xkZXJWaWV3LmNhbGwodGhpcywgbmF2QnV0dG9uQ29udGFpbmVyKTtcclxuICAgIHVpVG9nZ2xlSGVhZGluZy5jYWxsKHRoaXMsIG5hdkJ1dHRvbkNvbnRhaW5lcik7XHJcbiAgICB1aVRvZ2dsZUxpbmsuY2FsbCh0aGlzLCBuYXZCdXR0b25Db250YWluZXIpO1xyXG4gICAgdWlUb2dnbGVMaXN0SXRlbXMuY2FsbCh0aGlzLCBuYXZCdXR0b25Db250YWluZXIpO1xyXG4gICAgdWlUb2dnbGVCYWNrbGlua3MuY2FsbCh0aGlzLCBuYXZCdXR0b25Db250YWluZXIpO1xyXG4gICAgLy91aUV4dHJhY3QuY2FsbCh0aGlzLCBuYXZCdXR0b25Db250YWluZXIpO1xyXG4gICAgdWlDb2xsYXBzZS5jYWxsKHRoaXMsIG5hdkJ1dHRvbkNvbnRhaW5lcik7XHJcblxyXG5cclxuICAgIC8vIFx1NjNDRlx1NzUzQlx1NUI5Rlx1ODg0Q1xyXG4gICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcclxuICAgIHRoaXMuY29udGVudEVsLmFwcGVuZENoaWxkKG5hdkhlYWRlcik7XHJcbn1cclxuXHJcbi8vIFx1NjZGNFx1NjVCMFx1MzBEQ1x1MzBCRlx1MzBGMyBmaWxlIHZpZXdcclxuZnVuY3Rpb24gdWlVcGRhdGUgKHBhcmVudEVsOkhUTUxFbGVtZW50KTp2b2lke1xyXG4gICAgbGV0IG5hdkFjdGlvbkJ1dHRvbiA9IHBhcmVudEVsLmNyZWF0ZURpdihcImNsaWNrYWJsZS1pY29uIG5hdi1hY3Rpb24tYnV0dG9uXCIpO1xyXG4gICAgXHJcbiAgICBpZiAodGhpcy5waW5uZWRNb2RlID09IGZhbHNlKXtcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uYXJpYUxhYmVsID0gXCJ1cGRhdGUgdmlld1wiO1xyXG4gICAgICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwicmVmcmVzaC1jd1wiKTtcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICBhc3luYyAoZXZlbnQ6TW91c2VFdmVudCkgPT57XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlRmlsZSA9IGZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRGaWxlcy5tYWluWzBdID0gdGhpcy5hY3RpdmVGaWxlO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmF2QW5kUmVjZW50LmNhbGwodGhpcywgdGhpcy5hY3RpdmVGaWxlLnBhdGgsJ2ZpbGUnLCdyZWNlbnQnKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICBcImNvbnRleHRtZW51XCIsXHJcbiAgICAgICAgICAgIChldmVudDpNb3VzZUV2ZW50KSA9PntcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudSgpO1xyXG4gICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKT0+XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoJ1BpbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKCdwaW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waW5uZWRNb2RlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBcdTMwRDRcdTMwRjNcdTc1NTlcdTMwODFcdTMwNTVcdTMwOENcdTMwNjZcdTMwNDRcdTMwOEJcdTU4MzRcdTU0MDhcdTMwNkZcdTY2RjRcdTY1QjBcdTMwRENcdTMwQkZcdTMwRjNcdTMwNjdcdTMwNkFcdTMwNEZcdTMwRDRcdTMwRjNcdTMwOTJcdTg4NjhcdTc5M0FcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uYXJpYUxhYmVsID0gXCJ1bnBpbiBhbmQgdXBkYXRlIHZpZXdcIjtcclxuICAgICAgICBzZXRJY29uKG5hdkFjdGlvbkJ1dHRvbixcInBpblwiKTtcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcbiAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waW5uZWRNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlRmlsZSA9IGZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRGaWxlcy5tYWluWzBdID0gdGhpcy5hY3RpdmVGaWxlO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmF2QW5kUmVjZW50LmNhbGwodGhpcywgdGhpcy5hY3RpdmVGaWxlLnBhdGgsJ2ZpbGUnLCdyZWNlbnQnKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgIFwiY29udGV4dG1lbnVcIixcclxuICAgICAgICAgICAgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KCk7XHJcbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZSgnVW5waW4nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbigncGluLW9mZicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpbm5lZE1vZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG59XHJcbi8vIFx1NjZGNFx1NjVCMFx1MzBEQ1x1MzBCRlx1MzBGMyBmb2xkZXIgdmlld1xyXG5mdW5jdGlvbiB1aVVwZGF0ZUZvbGRlclZpZXcgKHBhcmVudEVsOkhUTUxFbGVtZW50KTp2b2lke1xyXG4gICAgbGV0IG5hdkFjdGlvbkJ1dHRvbiA9IHBhcmVudEVsLmNyZWF0ZURpdihcImNsaWNrYWJsZS1pY29uIG5hdi1hY3Rpb24tYnV0dG9uXCIpO1xyXG4gICAgbmF2QWN0aW9uQnV0dG9uLmFyaWFMYWJlbCA9IFwidXBkYXRlIHZpZXdcIjtcclxuICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwicmVmcmVzaC1jd1wiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICBhc3luYyAoZXZlbnQ6TW91c2VFdmVudCkgPT57XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0Rm9sZGVyID0gZmlsZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhc01haW5DaGFuZ2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLCB0aGlzLnRhcmdldEZvbGRlci5wYXRoLCdmb2xkZXInLCdyZWNlbnQnKTtcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFx1NEZERFx1NzU1OVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5hcHAud29ya3NwYWNlLnJlcXVlc3RTYXZlTGF5b3V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyh0cnVlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApO1xyXG59XHJcblxyXG4vLyBcdTVDNjVcdTZCNzQvXHUzMDRBXHU2QzE3XHUzMDZCXHU1MTY1XHUzMDhBXHJcbmZ1bmN0aW9uIHVpRmF2QW5kUmVjZW50IChwYXJlbnRFbDpIVE1MRWxlbWVudCk6dm9pZHtcclxuICAgIGxldCBuYXZBY3Rpb25CdXR0b24gPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJjbGlja2FibGUtaWNvbiBuYXYtYWN0aW9uLWJ1dHRvblwiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcImZhdm9yaXRlL3JlY2VudFwiO1xyXG4gICAgc2V0SWNvbihuYXZBY3Rpb25CdXR0b24sXCJib29rbWFya1wiKTtcclxuICAgIC8vIFx1NURFNlx1MzBBRlx1MzBFQVx1MzBDM1x1MzBBRlx1MzA2N2Zhdm9yaXRlc1xyXG4gICAgbmF2QWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgIGFzeW5jIChldmVudDpNb3VzZUV2ZW50KSA9PntcclxuICAgICAgICAgICAgY29uc3Qgb25TdWJtaXQgPSAodGFyZ2V0OnN0cmluZyk9PntcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldE9iaiA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldE9iaiBpbnN0YW5jZW9mIFRGaWxlKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldEZpbGVzLm1haW5bMF0gPSB0YXJnZXRPYmo7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNNYWluQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucGluQWZ0ZXJKdW1wICYmIHRoaXMuc2V0dGluZ3MuYXV0b3VwZGF0ZUZpbGVWaWV3KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waW5uZWRNb2RlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmF2QW5kUmVjZW50LmNhbGwodGhpcywgdGFyZ2V0T2JqLnBhdGgsICdmaWxlJywncmVjZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyh0cnVlLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldE9iaiBpbnN0YW5jZW9mIFRGb2xkZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0Rm9sZGVyID0gdGFyZ2V0T2JqO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzTWFpbkNoYW5nZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLCB0YXJnZXRPYmoucGF0aCwgJ2ZvbGRlcicsJ3JlY2VudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcodHJ1ZSx0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3IE1vZGFsSnVtcCh0aGlzLmFwcCwgdGhpcywgdGhpcy52aWV3VHlwZSwgJ2Zhdm9yaXRlJywgb25TdWJtaXQpLm9wZW4oKTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG4gICAgLy8gXHU1M0YzXHUzMEFGXHUzMEVBXHUzMEMzXHUzMEFGXHUzMDY3XHU1QzY1XHU2Qjc0XHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNvbnRleHRtZW51XCIsXHJcbiAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBvblN1Ym1pdCA9ICh0YXJnZXQ6c3RyaW5nKT0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0T2JqID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0T2JqIGluc3RhbmNlb2YgVEZpbGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RmlsZXMubWFpblswXSA9IHRhcmdldE9iajtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc01haW5DaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5waW5BZnRlckp1bXAgJiYgdGhpcy5zZXR0aW5ncy5hdXRvdXBkYXRlRmlsZVZpZXcpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpbm5lZE1vZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRmF2QW5kUmVjZW50LmNhbGwodGhpcywgdGFyZ2V0T2JqLnBhdGgsICdmaWxlJywncmVjZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyh0cnVlLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldE9iaiBpbnN0YW5jZW9mIFRGb2xkZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0Rm9sZGVyID0gdGFyZ2V0T2JqO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzTWFpbkNoYW5nZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLCB0YXJnZXRPYmoucGF0aCwgJ2ZvbGRlcicsJ3JlY2VudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcodHJ1ZSx0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmV3IE1vZGFsSnVtcCh0aGlzLmFwcCwgdGhpcywgdGhpcy52aWV3VHlwZSwgJ3JlY2VudCcsIG9uU3VibWl0KS5vcGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcblxyXG4vLyBcdThBMkRcdTVCOUFcdTMwRENcdTMwQkZcdTMwRjNcclxuZnVuY3Rpb24gdWlTZXR0aW5nIChwYXJlbnRFbDpIVE1MRWxlbWVudCk6dm9pZHtcclxuICAgIGxldCBuYXZBY3Rpb25CdXR0b24gPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJjbGlja2FibGUtaWNvbiBuYXYtYWN0aW9uLWJ1dHRvblwiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcIm9wZW4gc2V0dGluZ3NcIjtcclxuICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwic2V0dGluZ3NcIik7XHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5zZXR0aW5nLm9wZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2V0dGluZy5vcGVuVGFiQnlJZCh0aGlzLnBsdWdpbi5tYW5pZmVzdC5pZCk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNvbnRleHRtZW51XCIsXHJcbiAgICAgICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudSgpO1xyXG4gICAgICAgICAgICAvL1x1NTQwNFx1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1MzA2RVx1ODg2OFx1NzkzQS9cdTk3NUVcdTg4NjhcdTc5M0FcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeSBpbiB0aGlzLnNldHRpbmdzLnNob3dGaWxlcyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpY29uID0gKCB0aGlzLnNldHRpbmdzLnNob3dGaWxlc1tjYXRlZ29yeV0gPT0gdHJ1ZSk/IFwiY2hlY2tcIjpcIlwiO1xyXG4gICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKT0+XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoYHNob3cgJHtjYXRlZ29yeX0gc2VjdGlvbmApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKGljb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc2hvd0ZpbGVzW2NhdGVnb3J5XSA9ICF0aGlzLnNldHRpbmdzLnNob3dGaWxlc1tjYXRlZ29yeV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWVudS5hZGRTZXBhcmF0b3IoKTtcclxuICAgICAgICAgICAgLy8gXHU1NDA0XHU4OTgxXHU3RDIwXHUzMDZFXHU4ODY4XHU3OTNBXHU5NzVFXHU4ODY4XHU3OTNBXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBpbiB0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50cyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpY29uID0gKCB0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50c1tlbGVtZW50XSA9PSB0cnVlKT8gXCJjaGVja1wiOlwiXCI7XHJcbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShgc2hvdyAke2VsZW1lbnR9YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEljb24oaWNvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHNbZWxlbWVudF0gPSAhdGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHNbZWxlbWVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHMubGlzdEl0ZW1zKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGljb24gPSAodGhpcy5zZXR0aW5ncy50YXNrT25seSk/IFwiY2hlY2tcIjogXCJcIjtcclxuICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwidGFza3Mgb25seVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihpY29uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYygpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRhc2tPbmx5ID0gIXRoaXMuc2V0dGluZ3MudGFza09ubHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGljb24gPSAodGhpcy5zZXR0aW5ncy5zaG93QmFja2xpbmtzKT8gXCJjaGVja1wiOiBcIlwiO1xyXG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcInNob3cgMi1ob3AgYmFja2xpbmtzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKGljb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc2hvd0JhY2tsaW5rcyA9ICF0aGlzLnNldHRpbmdzLnNob3dCYWNrbGlua3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7XHJcblxyXG4gICAgICAgICAgICBpY29uID0gKHRoaXMuc2V0dGluZ3MudG9vbHRpcFByZXZpZXcpPyBcImNoZWNrXCI6XCJcIjtcclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKT0+XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwic2hvdyB0b29sdGlwIHByZXZpZXdcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihpY29uKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50b29sdGlwUHJldmlldyA9ICF0aGlzLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbWVudS5zaG93QXRNb3VzZUV2ZW50KGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICApXHJcbn1cclxuXHJcbi8vIFx1OEEyRFx1NUI5QVx1MzBEQ1x1MzBCRlx1MzBGMyBGb2xkZXIgdmlld1xyXG5mdW5jdGlvbiB1aVNldHRpbmdGb2xkZXJWaWV3IChwYXJlbnRFbDpIVE1MRWxlbWVudCwgaW5zdGFuY2U6IE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlldyk6dm9pZHtcclxuICAgIGxldCBuYXZBY3Rpb25CdXR0b24gPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJjbGlja2FibGUtaWNvbiBuYXYtYWN0aW9uLWJ1dHRvblwiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcIm9wZW4gc2V0dGluZ3NcIjtcclxuICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwic2V0dGluZ3NcIik7XHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5zZXR0aW5nLm9wZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2V0dGluZy5vcGVuVGFiQnlJZCh0aGlzLnBsdWdpbi5tYW5pZmVzdC5pZCk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNvbnRleHRtZW51XCIsXHJcbiAgICAgICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU1NDA0XHU4OTgxXHU3RDIwXHUzMDZFXHU4ODY4XHU3OTNBXHU5NzVFXHU4ODY4XHU3OTNBXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBpbiB0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50cyl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpY29uID0gKCB0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50c1tlbGVtZW50XSA9PSB0cnVlKT8gXCJjaGVja1wiOlwiXCI7XHJcbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShgc2hvdyAke2VsZW1lbnR9YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldEljb24oaWNvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHNbZWxlbWVudF0gPSAhdGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHNbZWxlbWVudF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHMubGlzdEl0ZW1zKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGljb24gPSAodGhpcy5zZXR0aW5ncy50YXNrT25seSk/IFwiY2hlY2tcIjogXCJcIjtcclxuICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwidGFza3Mgb25seVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihpY29uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYygpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnRhc2tPbmx5ID0gIXRoaXMuc2V0dGluZ3MudGFza09ubHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGljb24gPSAodGhpcy5zZXR0aW5ncy5zaG93QmFja2xpbmtzKT8gXCJjaGVja1wiOiBcIlwiO1xyXG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuICAgICAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcInNob3cgMi1ob3AgYmFja2xpbmtzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKGljb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc2hvd0JhY2tsaW5rcyA9ICF0aGlzLnNldHRpbmdzLnNob3dCYWNrbGlua3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7XHJcblxyXG4gICAgICAgICAgICBpY29uID0gKHRoaXMuc2V0dGluZ3MudG9vbHRpcFByZXZpZXcpPyBcImNoZWNrXCI6XCJcIjtcclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKT0+XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwic2hvdyB0b29sdGlwIHByZXZpZXdcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihpY29uKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50b29sdGlwUHJldmlldyA9ICF0aGlzLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7XHJcblxyXG4gICAgICAgICAgICBpY29uID0gKHRoaXMuc2V0dGluZ3MuY29sbGFwc2VGb2xkZXIpPyBcImNoZWNrXCI6XCJcIjtcclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKT0+XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiY29sbGFwc2Ugc3ViZm9sZGVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oaWNvbilcclxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYygpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuY29sbGFwc2VGb2xkZXIgPSAhdGhpcy5zZXR0aW5ncy5jb2xsYXBzZUZvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcodHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbWVudS5zaG93QXRNb3VzZUV2ZW50KGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVpVG9nZ2xlSGVhZGluZyAocGFyZW50RWw6SFRNTEVsZW1lbnQpOnZvaWR7XHJcbiAgICBsZXQgbmF2QWN0aW9uQnV0dG9uID0gcGFyZW50RWwuY3JlYXRlRGl2KFwiY2xpY2thYmxlLWljb24gbmF2LWFjdGlvbi1idXR0b25cIik7XHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYXJpYUxhYmVsID0gXCJ0b2dnbGUgaGVhZGluZ3NcIjtcclxuICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwiaGVhZGluZ1wiKTtcclxuICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50cy5oZWFkaW5nKXtcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50cy5oZWFkaW5nID0gIXRoaXMuc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmhlYWRpbmc7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KGZhbHNlLGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG4gICAgbmF2QWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJjb250ZXh0bWVudVwiLFxyXG4gICAgICAgIChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKCAoaXRlbSk9PlxyXG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZSgnaGVhZGluZyBsZXZlbCB0byBkaXNwbGF5JykpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGk8NjsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3BUZXh0ID0gKGkgPT0gMCk/IFwiSDFcIjogXCJIMSAtIEhcIisoaSsxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKT0+XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoZGlzcFRleHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jKCk9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9MDsgajw2OyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqIDw9IGkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhlYWRpbmdMZXZlbFtqXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5oZWFkaW5nTGV2ZWxbal0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKSBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIClcclxufVxyXG5cclxuZnVuY3Rpb24gdWlUb2dnbGVMaW5rIChwYXJlbnRFbDpIVE1MRWxlbWVudCk6dm9pZHtcclxuICAgIGxldCBuYXZBY3Rpb25CdXR0b24gPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJjbGlja2FibGUtaWNvbiBuYXYtYWN0aW9uLWJ1dHRvblwiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcInRvZ2dsZSBsaW5rc1wiO1xyXG4gICAgc2V0SWNvbihuYXZBY3Rpb25CdXR0b24sXCJsaW5rXCIpO1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmxpbmspe1xyXG4gICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcclxuICAgIH1cclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICBhc3luYyAoZXZlbnQ6TW91c2VFdmVudCkgPT57XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmxpbmsgPSAhdGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHMubGluaztcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVpVG9nZ2xlTGlzdEl0ZW1zIChwYXJlbnRFbDpIVE1MRWxlbWVudCk6dm9pZHtcclxuICAgIGxldCBuYXZBY3Rpb25CdXR0b24gPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJjbGlja2FibGUtaWNvbiBuYXYtYWN0aW9uLWJ1dHRvblwiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcInRvZ2dsZSBsaXN0IGl0ZW1zXCI7XHJcbiAgICBzZXRJY29uKG5hdkFjdGlvbkJ1dHRvbixcImxpc3RcIik7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHMubGlzdEl0ZW1zKXtcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnNob3dFbGVtZW50cy5saXN0SXRlbXMgPSAhdGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHMubGlzdEl0ZW1zO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxufVxyXG5cclxuLy8gXHUzMEQwXHUzMEMzXHUzMEFGXHUzMEVBXHUzMEYzXHUzMEFGXHUzMEFBXHUzMEYzXHUzMEFBXHUzMEQ1XHJcbmZ1bmN0aW9uIHVpVG9nZ2xlQmFja2xpbmtzIChwYXJlbnRFbDpIVE1MRWxlbWVudCk6dm9pZHtcclxuICAgIGxldCBuYXZBY3Rpb25CdXR0b24gPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJjbGlja2FibGUtaWNvbiBuYXYtYWN0aW9uLWJ1dHRvblwiKTtcclxuICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcInRvZ2dsZSBiYWNrbGlua3NcIjtcclxuICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwibGlua3MtY29taW5nLWluXCIpO1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3Muc2hvd0JhY2tsaW5rcyl7XHJcbiAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xyXG4gICAgfVxyXG4gICAgbmF2QWN0aW9uQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgIGFzeW5jIChldmVudDpNb3VzZUV2ZW50KSA9PntcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5zaG93QmFja2xpbmtzID0gIXRoaXMuc2V0dGluZ3Muc2hvd0JhY2tsaW5rcztcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcbn1cclxuXHJcbi8vXHU2MkJEXHU1MUZBXHJcbi8vIGZ1bmN0aW9uIHVpRXh0cmFjdCAocGFyZW50RWw6SFRNTEVsZW1lbnQpOnZvaWR7XHJcbi8vICAgICBsZXQgbmF2QWN0aW9uQnV0dG9uID0gcGFyZW50RWwuY3JlYXRlRGl2KFwiY2xpY2thYmxlLWljb24gbmF2LWFjdGlvbi1idXR0b25cIik7XHJcbi8vICAgICBpZiAoIXRoaXMuZXh0cmFjdE1vZGUpe1xyXG4vLyAgICAgICAgIC8vXHU2MkJEXHU1MUZBXHUzMDkyXHUzMEFBXHUzMEYzXHUzMDZCXHJcbi8vICAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmFyaWFMYWJlbCA9IFwiZXh0cmFjdFwiO1xyXG4vLyAgICAgICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwic2VhcmNoXCIpO1xyXG4vLyAgICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4vLyAgICAgICAgICAgICBcImNsaWNrXCIsXHJcbi8vICAgICAgICAgICAgIGFzeW5jIChldmVudDpNb3VzZUV2ZW50KSA9PntcclxuLy8gICAgICAgICAgICAgICAgIC8vXHU1MTY1XHU1MjlCXHUzMEUyXHUzMEZDXHUzMEMwXHUzMEVCXHUzMDkyXHU5NThCXHUzMDRGXHJcbi8vICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdDtcclxuLy8gICAgICAgICAgICAgICAgIGNvbnN0IG9uU3VibWl0ID0gKGVuYWJsZUV4dHJhY3Q6IGJvb2xlYW4pID0+IHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBpZiAoZW5hYmxlRXh0cmFjdCl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFjdE1vZGUgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KGZhbHNlLGZhbHNlKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgbmV3IE1vZGFsRXh0cmFjdCh0aGlzLmFwcCwgdGhpcy5wbHVnaW4sIG9uU3VibWl0KS5vcGVuKCk7XHJcbi8vICAgICAgICAgICAgIH0pO1xyXG4vLyAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAvL1x1NjJCRFx1NTFGQVx1MzA5Mlx1MzBBQVx1MzBENVx1MzA2QlxyXG4vLyAgICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcInVuZXh0cmFjdFwiO1xyXG4vLyAgICAgICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwieC1jaXJjbGVcIik7XHJcbi8vICAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xyXG4vLyAgICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4vLyAgICAgICAgIFwiY2xpY2tcIixcclxuLy8gICAgICAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5leHRyYWN0TW9kZSA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5leHRyYWN0VGFzayA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcblxyXG4vLyAgICAgICAgICAgICB9KTtcclxuLy8gICAgIH1cclxuLy8gICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4vLyAgICAgICAgIFwiY29udGV4dG1lbnVcIixcclxuLy8gICAgICAgICAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuLy8gICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KCk7XHJcbi8vICAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cclxuLy8gICAgICAgICAgICAgICAgIGl0ZW1cclxuLy8gICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJleHRyYWN0IHRhc2tzXCIpXHJcbi8vICAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJjaGVjay1zcXVhcmVcIilcclxuLy8gICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKT0+IHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRyYWN0TW9kZSA9IHRydWU7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFjdFRhc2sgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KGZhbHNlLGZhbHNlKTsgXHJcbi8vICAgICAgICAgICAgICAgICAgICAgfSlcclxuLy8gICAgICAgICAgICAgKTtcclxuLy8gICAgICAgICAgICAgbWVudS5zaG93QXRNb3VzZUV2ZW50KGV2ZW50KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICApO1xyXG4vLyB9XHJcblxyXG4vL1x1NTE2OFx1NEY1M1x1MzBENVx1MzBBOVx1MzBGQ1x1MzBFQlx1MzBDOVxyXG5cclxuZnVuY3Rpb24gdWlDb2xsYXBzZSAocGFyZW50RWw6SFRNTEVsZW1lbnQpOnZvaWR7XHJcbiAgICBsZXQgbmF2QWN0aW9uQnV0dG9uID0gcGFyZW50RWwuY3JlYXRlRGl2KFwiY2xpY2thYmxlLWljb24gbmF2LWFjdGlvbi1idXR0b25cIik7XHJcbiAgICBpZiAodGhpcy5jb2xsYXBzZUFsbCl7XHJcbiAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLmNvbGxhcHNlQWxsKXtcclxuICAgICAgICAvL1x1NTE2OFx1NEY1M1x1MzBENVx1MzBBOVx1MzBGQ1x1MzBFQlx1MzBDOVx1MzA5Mlx1MzBBQVx1MzBGM1x1MzA2QlxyXG4gICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5hcmlhTGFiZWwgPSBcImNvbGxhcHNlIGFsbFwiO1xyXG4gICAgICAgIHNldEljb24obmF2QWN0aW9uQnV0dG9uLFwiY2hldnJvbnMtZG93bi11cFwiKTtcclxuICAgICAgICBuYXZBY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgYXN5bmMgKGV2ZW50Ok1vdXNlRXZlbnQpID0+e1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlQWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vXHU1MTY4XHU0RjUzXHUzMEQ1XHUzMEE5XHUzMEZDXHUzMEVCXHUzMEM5XHUzMDkyXHUzMEFBXHUzMEQ1XHUzMDZCXHJcbiAgICAgICAgbmF2QWN0aW9uQnV0dG9uLmFyaWFMYWJlbCA9IFwiZXhwYW5kXCI7XHJcbiAgICAgICAgc2V0SWNvbihuYXZBY3Rpb25CdXR0b24sXCJjaGV2cm9ucy1kb3duLXVwXCIpO1xyXG4gICAgICAgIG5hdkFjdGlvbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICBhc3luYyAoZXZlbnQ6TW91c2VFdmVudCkgPT57XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2VBbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IEFwcCwgU3VnZ2VzdE1vZGFsLCBUQWJzdHJhY3RGaWxlLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXcgfSBmcm9tIFwiLi9maWxlVmlld1wiO1xyXG5pbXBvcnQgeyBNdWx0aXBsZU5vdGVzT3V0bGluZUZvbGRlclZpZXcgfSBmcm9tIFwiLi9mb2xkZXJWaWV3XCI7XHJcbmltcG9ydCBNdWx0aXBsZU5vdGVzT3V0bGluZVBsdWdpbiwgeyBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUZhdkFuZFJlY2VudCh0YXJnZXRQYXRoOiBzdHJpbmcsIGNhdGVnb3J5OiAnZmlsZSd8J2ZvbGRlcicsIHN1Z2dlc3RUeXBlOiAncmVjZW50J3wnZmF2b3JpdGUnKTpQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRoaXMuc2V0dGluZ3Nbc3VnZ2VzdFR5cGVdW2NhdGVnb3J5XSA9IHRoaXMuc2V0dGluZ3Nbc3VnZ2VzdFR5cGVdW2NhdGVnb3J5XS5maWx0ZXIoXHJcbiAgICAgICAgKHZhbHVlOiBzdHJpbmcpID0+IHRhcmdldFBhdGggIT09IHZhbHVlXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuc2V0dGluZ3Nbc3VnZ2VzdFR5cGVdW2NhdGVnb3J5XS51bnNoaWZ0KHRhcmdldFBhdGgpO1xyXG5cclxuICAgIGlmICh0aGlzLnNldHRpbmdzLnJlY2VudFtjYXRlZ29yeV0ubGVuZ3RoID4gdGhpcy5zZXR0aW5ncy5udW1PZlJlY2VudEZpbGVzKXtcclxuICAgICAgICBjb25zdCBudW1Ub0RlbGV0ZSA9IHRoaXMuc2V0dGluZ3MucmVjZW50W2NhdGVnb3J5XS5sZW5ndGggLSB0aGlzLnNldHRpbmdzLm51bU9mUmVjZW50RmlsZXM7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPCBudW1Ub0RlbGV0ZTsgaSsrKXtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5yZWNlbnRbY2F0ZWdvcnldLnBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlRmF2QW5kUmVjZW50KHRhcmdldFBhdGg6IHN0cmluZywgY2F0ZWdvcnk6ICdmaWxlJ3wnZm9sZGVyJywgc3VnZ2VzdFR5cGU6ICdyZWNlbnQnfCdmYXZvcml0ZScpOlByb21pc2U8dm9pZD4ge1xyXG4gICAgdGhpcy5zZXR0aW5nc1tzdWdnZXN0VHlwZV1bY2F0ZWdvcnldID0gdGhpcy5zZXR0aW5nc1tzdWdnZXN0VHlwZV1bY2F0ZWdvcnldLmZpbHRlcihcclxuICAgICAgICAodmFsdWU6IHN0cmluZykgPT4gdGFyZ2V0UGF0aCAhPT0gdmFsdWVcclxuICAgICk7XHJcblxyXG4gICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNb2RhbEp1bXAgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8c3RyaW5nPntcclxuXHJcbiAgICAvL3BsdWdpbjogTXVsdGlwbGVOb3Rlc091dGxpbmVQbHVnaW47XHJcbiAgICB2aWV3OiBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXcgfCBNdWx0aXBsZU5vdGVzT3V0bGluZUZvbGRlclZpZXc7XHJcbiAgICBjYXRlZ29yeTogJ2ZpbGUnfCdmb2xkZXInO1xyXG4gICAgc3VnZ2VzdFR5cGU6ICdyZWNlbnQnfCdmYXZvcml0ZSc7XHJcbiAgICBvblN1Ym1pdDogKGl0ZW06IHN0cmluZykgPT4gdm9pZDtcclxuICAgXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBhcHA6IEFwcCxcclxuICAgICAgICB2aWV3OiBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXcgfCBNdWx0aXBsZU5vdGVzT3V0bGluZUZvbGRlclZpZXcsXHJcbiAgICAgICAgY2F0ZWdvcnk6ICdmaWxlJ3wnZm9sZGVyJyxcclxuICAgICAgICBzdWdnZXN0VHlwZTogJ3JlY2VudCd8J2Zhdm9yaXRlJyxcclxuICAgICAgICBvblN1Ym1pdDogKGl0ZW06IHN0cmluZykgPT4gdm9pZCxcclxuICAgICl7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcclxuICAgICAgICB0aGlzLnN1Z2dlc3RUeXBlID0gc3VnZ2VzdFR5cGU7XHJcbiAgICAgICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xyXG4gICAgfVxyXG5cclxuICAgIG9uT3BlbigpOiB2b2lke1xyXG4gICAgICAgIHRoaXMuc2V0UGxhY2Vob2xkZXIoXCJKdW1wIHRvIFwiK3RoaXMuc3VnZ2VzdFR5cGUrXCIgXCIrdGhpcy5jYXRlZ29yeStcInNcIik7XHJcbiAgICAgICAgdGhpcy5zZXRJbnN0cnVjdGlvbnMoW1xyXG4gICAgICAgICAgICB7IGNvbW1hbmQ6IFwiRW50ZXJcIiwgcHVycG9zZTogXCJKdW1wIHRvIGl0ZW1cIn0sXHJcbiAgICAgICAgICAgIHsgY29tbWFuZDogXCJDdHJsICsgRW50ZXJcIiwgcHVycG9zZTogXCJBZGQgdG8gRmF2b3JpdGVzXCJ9LFxyXG4gICAgICAgICAgICB7IGNvbW1hbmQ6IFwiRGVsZXRlXCIsIHB1cnBvc2U6IFwiUmVtb3ZlIGZyb20gdGhlIGxpc3RcIn0sXHJcbiAgICAgICAgICAgIHsgY29tbWFuZDogXCJFU0NcIiwgcHVycG9zZTogXCJEaXNtaXNzXCJ9XHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2NvcGUucmVnaXN0ZXIoWydDdHJsJ10sICdFbnRlcicsIFxyXG5cdFx0XHQoZXZ0OiBLZXlib2FyZEV2ZW50KT0+e1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY2hvb3Nlci52YWx1ZXM/Llt0aGlzLmNob29zZXIuc2VsZWN0ZWRJdGVtXTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUZhdkFuZFJlY2VudC5jYWxsKHRoaXMudmlldywgaXRlbSwgdGhpcy5jYXRlZ29yeSwgJ2Zhdm9yaXRlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcblx0XHRcdH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc2NvcGUucmVnaXN0ZXIoW10sICdEZWxldGUnLCBcclxuXHRcdFx0KGV2dDogS2V5Ym9hcmRFdmVudCk9PntcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNob29zZXIudmFsdWVzPy5bdGhpcy5jaG9vc2VyLnNlbGVjdGVkSXRlbV07XHJcbiAgICAgICAgICAgICAgICBkZWxldGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLnZpZXcsIGl0ZW0sIHRoaXMuY2F0ZWdvcnksIHRoaXMuc3VnZ2VzdFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG5cdFx0XHR9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICBzdXBlci5vbk9wZW4oKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0U3VnZ2VzdGlvbnMocXVlcnk6c3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcucGx1Z2luLnNldHRpbmdzW3RoaXMuc3VnZ2VzdFR5cGVdW3RoaXMuY2F0ZWdvcnldLmZpbHRlcigodGFyZ2V0KT0+XHJcbiAgICAgICAgICAgIHRhcmdldC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHJlbmRlclN1Z2dlc3Rpb24odmFsdWU6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgZWwuY3JlYXRlRWwoXCJkaXZcIiwgeyB0ZXh0OiB2YWx1ZX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uQ2hvb3NlU3VnZ2VzdGlvbihpdGVtOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICB1cGRhdGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLnZpZXcsIGl0ZW0sIHRoaXMuY2F0ZWdvcnksIHRoaXMuc3VnZ2VzdFR5cGUpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudmlldy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHR0aGlzLm9uU3VibWl0KGl0ZW0pO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vLyBmYXZvcml0ZVx1MzA4NHJlY2VudFx1MzA2RXJlbmFtZVx1MzA2Qlx1NUJGRVx1NUZEQ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVJlbmFtZUZhdkFuZFJlY2VudEZpbGVzKHJlbmFtZWRGaWxlOiBUQWJzdHJhY3RGaWxlLCBvbGRQYXRoOiBzdHJpbmcsIHNldHRpbmdzOiBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzKTpib29sZWFue1xyXG4gICAgbGV0IHJlbmFtZVR5cGU6J2ZpbGUnfCdmb2xkZXInID0gKHJlbmFtZWRGaWxlIGluc3RhbmNlb2YgVEZpbGUpPyAnZmlsZSc6ICdmb2xkZXInO1xyXG4gICAgbGV0IHJlbmFtZWQgPSBmYWxzZTtcclxuICAgIGZvciAobGV0IGk9MDsgaTwgc2V0dGluZ3MucmVjZW50W3JlbmFtZVR5cGVdLmxlbmd0aDsgaSsrICl7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLnJlY2VudFtyZW5hbWVUeXBlXVtpXSA9PSBvbGRQYXRoKXtcclxuICAgICAgICAgICAgc2V0dGluZ3MucmVjZW50W3JlbmFtZVR5cGVdW2ldID0gcmVuYW1lZEZpbGUucGF0aDtcclxuICAgICAgICAgICAgcmVuYW1lZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaT0wOyBpPCBzZXR0aW5ncy5mYXZvcml0ZVtyZW5hbWVUeXBlXS5sZW5ndGg7IGkrKyApe1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5mYXZvcml0ZVtyZW5hbWVUeXBlXVtpXSA9PSBvbGRQYXRoKXtcclxuICAgICAgICAgICAgc2V0dGluZ3MuZmF2b3JpdGVbcmVuYW1lVHlwZV1baV0gPSByZW5hbWVkRmlsZS5wYXRoO1xyXG4gICAgICAgICAgICByZW5hbWVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVuYW1lZDtcclxufVxyXG5cclxuLy8gZmF2b3JpdGVcdTMwODRyZWNlbnRcdTMwNkVkZWxldGVcdTMwNkJcdTVCRkVcdTVGRENcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVEZWxldGVGYXZBbmRSZWNlbnRGaWxlcyhkZWxldGVkRmlsZTogVEFic3RyYWN0RmlsZSwgc2V0dGluZ3M6IE11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3MpOmJvb2xlYW57XHJcbiAgICBsZXQgZGVsZXRlVHlwZTonZmlsZSd8J2ZvbGRlcicgPSAoZGVsZXRlZEZpbGUgaW5zdGFuY2VvZiBURmlsZSk/ICdmaWxlJzogJ2ZvbGRlcic7XHJcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgZm9yIChsZXQgaT0wOyBpPCBzZXR0aW5ncy5yZWNlbnRbZGVsZXRlVHlwZV0ubGVuZ3RoOyBpKysgKXtcclxuICAgICAgICBpZiAoc2V0dGluZ3MucmVjZW50W2RlbGV0ZVR5cGVdW2ldID09IGRlbGV0ZWRGaWxlLnBhdGgpe1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5yZWNlbnRbZGVsZXRlVHlwZV0uc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAobGV0IGk9MDsgaTwgc2V0dGluZ3MuZmF2b3JpdGVbZGVsZXRlVHlwZV0ubGVuZ3RoOyBpKysgKXtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuZmF2b3JpdGVbZGVsZXRlVHlwZV1baV0gPT0gZGVsZXRlZEZpbGUucGF0aCl7XHJcbiAgICAgICAgICAgIHNldHRpbmdzLmZhdm9yaXRlW2RlbGV0ZVR5cGVdLnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVsZXRlZDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ZhdkFuZFJlY2VudEZpbGVzKGFwcDpBcHAsIHNldHRpbmdzOiBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzLCBjaGVja1R5cGU6ICdmaWxlJ3wnZm9sZGVyJyk6dm9pZHtcclxuICAgIGZvciAobGV0IGk9MDsgaTwgc2V0dGluZ3MuZmF2b3JpdGVbY2hlY2tUeXBlXS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgaWYoIWFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoc2V0dGluZ3MuZmF2b3JpdGVbY2hlY2tUeXBlXVtpXSkpe1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5mYXZvcml0ZVtjaGVja1R5cGVdLnNwbGljZShpLDEpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpPTA7IGk8IHNldHRpbmdzLnJlY2VudFtjaGVja1R5cGVdLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICBpZighYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChzZXR0aW5ncy5yZWNlbnRbY2hlY2tUeXBlXVtpXSkpe1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5yZWNlbnRbY2hlY2tUeXBlXS5zcGxpY2UoaSwxKTtcclxuICAgICAgICB9IFxyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IFRGaWxlLCBzZXRJY29uLCBNZW51LCBNYXJrZG93blZpZXcsIEFwcCwgVEFic3RyYWN0RmlsZSwgVEZvbGRlciwgc2V0VG9vbHRpcCwgcGFyc2VMaW5rdGV4dCwgZ2V0TGlua3BhdGggfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQgeyBPdXRsaW5lRGF0YSwgRmlsZUluZm8sIEZpbGVTdGF0dXMgfSBmcm9tICdzcmMvbWFpbic7XHJcbmltcG9ydCB7IE11bHRpcGxlTm90ZXNPdXRsaW5lVmlld1R5cGUsIENhdGVnb3J5IH0gZnJvbSAnLi9maWxlVmlldyc7XHJcbmltcG9ydCB7IGdldEZpbGVJbmZvLCBnZXRPdXRsaW5lIH0gZnJvbSAnc3JjL2dldE91dGxpbmUnO1xyXG5pbXBvcnQgeyBhZGRGbGFnLCBjaGVja0ZsYWcsIGNsZWFuUmVsYXRlZEZpbGVzLCBnZXRTdWJwYXRoUG9zaXRpb24sIHJlbW92ZUZsYWcsIHRvZ2dsZUZsYWcgfSBmcm9tICdzcmMvdXRpbCc7XHJcbmltcG9ydCB7IGRlbGV0ZUZhdkFuZFJlY2VudCwgdXBkYXRlRmF2QW5kUmVjZW50IH0gZnJvbSAnLi9GYXZBbmRSZWNlbnQnO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3ROb3RlRE9NIChmaWxlczpUQWJzdHJhY3RGaWxlW10sIHN0YXR1czogRmlsZVN0YXR1c1tdLCBpbmZvOiBGaWxlSW5mb1tdLCBkYXRhOk91dGxpbmVEYXRhW11bXSwgXHJcbiAgICBwYXJlbnRFbDpIVE1MRWxlbWVudCwgY2F0ZWdvcnk6Q2F0ZWdvcnksIGFvdEVsOkhUTUxFbGVtZW50LCBzcmNGaWxlOiBUQWJzdHJhY3RGaWxlLCBvcmRlcjpudW1iZXJbXSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxmaWxlcy5sZW5ndGggOyBpKyspe1xyXG5cclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IHNpID0gb3JkZXJbaV07ICAvLyBzb3J0ZWQgaVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU5MUNEXHU4OTA3XHUzMDU3XHUzMDY2XHUzMDRBXHUzMDhBXHUzMDAxXHUzMDRCXHUzMDY0XHU5MUNEXHU4OTA3XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZGXHU5NzVFXHU4ODY4XHU3OTNBXHU4QTJEXHU1QjlBXHUzMDY3XHUzMDQyXHUzMDhDXHUzMDcwXHUzMEI5XHUzMEFEXHUzMEMzXHUzMEQ3XHJcblx0XHRcdGlmIChPYmplY3QudmFsdWVzKHN0YXR1c1tzaV0uZHVwbGljYXRlZCkuaW5jbHVkZXModHJ1ZSkgJiYgdGhpcy5zZXR0aW5ncy5oaWRlRHVwbGljYXRlZCl7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnN0IG5vdGVUeXBlID0gc3RhdHVzW3NpXS5pc0ZvbGRlciA/ICdmb2xkZXInOidmaWxlJztcclxuXHJcblx0XHRcdC8vIFx1MzBDRVx1MzBGQ1x1MzBDOFx1MzA2RVx1MzBCRlx1MzBBNFx1MzBDOFx1MzBFQlx1OTBFOFx1NTIwNlx1NEY1Q1x1NjIxMCAoRXhwbG9yZXJcdTMwNkVcdTMwRDVcdTMwQTlcdTMwRUJcdTMwQzBcdTMwNkJcdTc2RjhcdTVGNTNcdUZGMDlcclxuXHRcdFx0Ly8gQU9UXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMEFBXHUzMEYzXHUzMDZBXHUzMDg5XHUzMEM4XHUzMEMzXHUzMEQ3XHUzMDZCXHJcblx0XHRcdGNvbnN0IGJlbG9uZ3NBT1QgPSBCb29sZWFuKHN0YXR1c1tzaV0uaXNUb3AgPT0gdHJ1ZSAmJiAhT2JqZWN0LnZhbHVlcyhzdGF0dXNbc2ldLmR1cGxpY2F0ZWQpLmluY2x1ZGVzKHRydWUpKSAmJiBjYXRlZ29yeSAhPSAnbWFpbic7XHJcblx0XHRcdGxldCBub3RlRWw6IEhUTUxFbGVtZW50O1xyXG5cdFx0XHRpZiAoYmVsb25nc0FPVCl7XHJcblx0XHRcdFx0bm90ZUVsID0gYW90RWwuY3JlYXRlRGl2KFwidHJlZS1pdGVtIG5hdi1mb2xkZXJcIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bm90ZUVsID0gcGFyZW50RWwuY3JlYXRlRGl2KFwidHJlZS1pdGVtIG5hdi1mb2xkZXJcIik7XHJcblx0XHRcdH1cclxuXHJcblxyXG5cclxuXHRcdFx0Y29uc3Qgbm90ZVRpdGxlRWw6IEhUTUxFbGVtZW50ID0gbm90ZUVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1zZWxmIGlzLWNsaWNrYWJsZSBtb2QtY29sbGFwc2libGUgbmF2LWZvbGRlci10aXRsZVwiKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vIFx1MzBBMlx1MzBBNFx1MzBCM1x1MzBGM1x1MzA2RVx1OEEyRFx1NUI5QVxyXG5cdFx0XHRsZXQgbkljb247XHJcblx0XHRcdGlmIChiZWxvbmdzQU9UKXtcclxuXHRcdFx0XHRuSWNvbiA9ICdwaW4nO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmIChub3RlVHlwZSA9PSAnZm9sZGVyJyl7XHJcblx0XHRcdFx0XHRuSWNvbiA9ICdmb2xkZXInO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRuSWNvbiA9ICdmaWxlJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0c2V0SWNvbihub3RlVGl0bGVFbCwgbkljb24pO1xyXG5cclxuXHRcdFx0Ly9cdTMwQ0VcdTMwRkNcdTMwQzhcdTMwQkZcdTMwQTRcdTMwQzhcdTMwRUJcdTMwNkVcdTg5QUFcdTg5ODFcdTdEMjBcdTMwNENtb2Qtcm9vdFx1MzBBRlx1MzBFOVx1MzBCOVx1MzA5Mlx1NTQyQlx1MzA3RVx1MzA2QVx1MzA0NFx1MzA2QVx1MzA4OVx1MzAwMXZpZXdcdTRFMEFcdTMwNkYyXHU5NjhFXHU1QzY0XHU3NkVFXHUzMDZCXHU0RjREXHU3RjZFXHUzMDU5XHUzMDhCXHUzMDZFXHUzMDY3XHUzMDAxc3RpY2t5XHUzMDZFXHU4ODY4XHU3OTNBXHU0RjREXHU3RjZFXHUzMDkyXHU0RTBCXHUzMDUyXHUzMDhCaXMtc3ViZm9sZGVyXHUzMEFGXHUzMEU5XHUzMEI5XHUzMDkyXHU0RUQ4XHU0RTBFXHUzMDU5XHUzMDhCXHJcblx0XHRcdGlmICghbm90ZUVsLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kLXJvb3RcIikgKXtcclxuXHRcdFx0XHRub3RlVGl0bGVFbC5jbGFzc0xpc3QuYWRkKFwiaXMtc3ViZm9sZGVyXCIpO1xyXG5cdFx0XHR9XHJcblxyXG5cclxuXHJcblx0XHRcdGNvbnN0IG5vdGVDaGlsZHJlbkVsOiBIVE1MRWxlbWVudCA9IG5vdGVFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0tY2hpbGRyZW4gbmF2LWZvbGRlci1jaGlsZHJlblwiKTtcclxuXHRcdFxyXG5cdFx0XHQvLyBpZCBcdTRFRDhcdTUyQTBcclxuXHRcdFx0bm90ZUNoaWxkcmVuRWwuaWQgPSAnTU5PJyt0aGlzLnZpZXdUeXBlK2ZpbGVzW3NpXS5wYXRoO1xyXG5cclxuXHRcdFx0Ly8gXHU2Mjk4XHUzMDhBXHUzMDVGXHUzMDVGXHUzMDdGXHUzMEEyXHUzMEE0XHUzMEIzXHUzMEYzXHJcblx0XHRcdGNvbnN0IG5vdGVDb2xsYXBzZUljb246SFRNTEVsZW1lbnQgPSBub3RlVGl0bGVFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0taWNvbiBjb2xsYXBzZS1pY29uIG5hdi1mb2xkZXItY29sbGFwc2UtaW5kaWNhdG9yXCIpO1xyXG5cdFx0XHRzZXRJY29uKG5vdGVDb2xsYXBzZUljb24sXCJyaWdodC10cmlhbmdsZVwiKTtcclxuXHJcblx0XHRcdC8vICBcdTYyOThcdTMwOEFcdTMwNUZcdTMwNUZcdTMwN0ZcdTMwQTJcdTMwQTRcdTMwQjNcdTMwRjNcdTMwQUZcdTMwRUFcdTMwQzNcdTMwQUZcdTY2NDJcdTMwNkVcdTUxRTZcdTc0MDZcclxuXHRcdFx0bm90ZUNvbGxhcHNlSWNvbi5hZGRFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcdFwiY2xpY2tcIixcclxuXHRcdFx0XHRhc3luYyAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0XHRcdC8vIFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1MzA0Q1x1OEFBRFx1MzA3Rlx1OEZCQ1x1MzA3RVx1MzA4Q1x1MzA2Nlx1MzA0NFx1MzA2QVx1MzA0NFx1NTgzNFx1NTQwOFxyXG5cdFx0XHRcdFx0aWYgKCFzdGF0dXNbc2ldLm91dGxpbmVSZWFkeSl7XHJcblx0XHRcdFx0XHRcdGlmIChub3RlVHlwZSA9PSdmaWxlJyl7XHJcblx0XHRcdFx0XHRcdFx0aW5mb1tzaV0gPSBhd2FpdCBnZXRGaWxlSW5mbyh0aGlzLmFwcCwgZmlsZXNbc2ldIGFzIFRGaWxlLCB0aGlzLnNldHRpbmdzLCBmYWxzZSwgdGhpcy5pc0RhdGF2aWV3RW5hYmxlZCk7XHJcblx0XHRcdFx0XHRcdFx0ZGF0YVtzaV0gPSBhd2FpdCBnZXRPdXRsaW5lKHRoaXMuYXBwLCBmaWxlc1tzaV0gYXMgVEZpbGUsIHN0YXR1c1tzaV0sIGluZm9bc2ldLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdFx0XHRzdGF0dXNbc2ldLm91dGxpbmVSZWFkeSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdG5vdGVFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1jb2xsYXBzZWQnKTtcclxuXHRcdFx0XHRcdFx0XHRub3RlQ29sbGFwc2VJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWNvbGxhcHNlZCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBub3RlRE9NXHUzMDZCXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU2MEM1XHU1ODMxXHUzMDkyXHU4RkZEXHU1MkEwXHJcblx0XHRcdFx0XHRcdFx0YXR0YWNoRmlsZUluZm8obm90ZVRpdGxlRWwsIHN0YXR1c1tzaV0sIGluZm9bc2ldLCBkYXRhW3NpXSwgdGhpcy5zZXR0aW5ncy5kaXNwbGF5RmlsZUluZm8pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjb25zdHJ1Y3RPdXRsaW5lRE9NLmNhbGwodGhpcywgZmlsZXNbc2ldLCBpbmZvW3NpXSwgZGF0YVtzaV0sIG5vdGVDaGlsZHJlbkVsLCBjYXRlZ29yeSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gXHUzMEQ1XHUzMEE5XHUzMEVCXHUzMEMwXHUzMDZFXHU1ODM0XHU1NDA4XHJcblx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wcm9jZXNzRm9sZGVyKGZpbGVzW3NpXSBhcyBURm9sZGVyKTtcclxuXHRcdFx0XHRcdFx0XHRzdGF0dXNbc2ldLm91dGxpbmVSZWFkeSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdG5vdGVFbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1jb2xsYXBzZWQnKTtcclxuXHRcdFx0XHRcdFx0XHRub3RlQ29sbGFwc2VJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWNvbGxhcHNlZCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjb25zdHJ1Y3ROb3RlRE9NLmNhbGwodGhpcywgdGhpcy50YXJnZXRGaWxlc1tmaWxlc1tzaV0ucGF0aF0sXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmZpbGVTdGF0dXNbZmlsZXNbc2ldLnBhdGhdLCB0aGlzLmZpbGVJbmZvW2ZpbGVzW3NpXS5wYXRoXSx0aGlzLm91dGxpbmVEYXRhW2ZpbGVzW3NpXS5wYXRoXSxcclxuXHRcdFx0XHRcdFx0XHRcdG5vdGVDaGlsZHJlbkVsLCAnZm9sZGVyJywgYW90RWwsIHNyY0ZpbGUsIHRoaXMuZmlsZU9yZGVyW2ZpbGVzW3NpXS5wYXRoXSk7XHJcblx0XHRcdFx0XHRcdFx0bm90ZUVsLmFwcGVuZENoaWxkKG5vdGVDaGlsZHJlbkVsKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoc3RhdHVzW3NpXS5pc0ZvbGRlZCl7XHJcblx0XHRcdFx0XHRcdC8vIFx1MzBENVx1MzBBOVx1MzBGQ1x1MzBFQlx1MzBDOVx1MzA1NVx1MzA4Q1x1MzA2Nlx1MzA0NFx1MzA4Qlx1NTgzNFx1NTQwOFxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0Ly8gXHU1MDBCXHU1MjI1XHUzMEQ1XHUzMEE5XHUzMEZDXHUzMEVCXHUzMEM5XHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDkyXHU5NjY0XHU1M0JCXHJcblx0XHRcdFx0XHRcdGlmICggKCF0aGlzLmNvbGxhcHNlQWxsKSAmJlxyXG5cdFx0XHRcdFx0XHQoIXN0YXR1c1tzaV0uZHVwbGljYXRlZC5tYWluIHx8ICF0aGlzLnNldHRpbmdzLnNob3dGaWxlcy5tYWluKSAmJlxyXG5cdFx0XHRcdFx0XHQoIXN0YXR1c1tzaV0uZHVwbGljYXRlZC5vdXRnb2luZyB8fCAhdGhpcy5zZXR0aW5ncy5zaG93RmlsZXMub3V0Z29pbmcpICYmXHJcblx0XHRcdFx0XHRcdCghc3RhdHVzW3NpXS5kdXBsaWNhdGVkLnNlbGYpKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGNoZWNrRmxhZyhzcmNGaWxlLCBmaWxlc1tzaV0sICdmb2xkJywgdGhpcy5zZXR0aW5ncykpe1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVtb3ZlRmxhZyhzcmNGaWxlLCBmaWxlc1tzaV0sICdmb2xkJywgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIFx1MzBBQVx1MzBGQ1x1MzBEN1x1MzBGM1x1NTFFNlx1NzQwNlxyXG5cdFx0XHRcdFx0XHRub3RlRWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHRcdFx0XHRcdG5vdGVDb2xsYXBzZUljb24uY2xhc3NMaXN0LnJlbW92ZSgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHRcdFx0XHRcdHN0YXR1c1tzaV0uaXNGb2xkZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0bm90ZUNoaWxkcmVuRWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gXHU5NThCXHUzMDQ0XHUzMDY2XHUzMDQ0XHUzMDhCXHU1ODM0XHU1NDA4XHRcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHQvLyBcdTUwMEJcdTUyMjVcdTMwRDVcdTMwQTlcdTMwRkNcdTMwRUJcdTMwQzlcdTMwRDVcdTMwRTlcdTMwQjBcdTMwOTJcdThGRkRcdTUyQTBcclxuXHRcdFx0XHRcdFx0aWYgKCAoIXRoaXMuY29sbGFwc2VBbGwpICYmXHJcblx0XHRcdFx0XHRcdCghc3RhdHVzW3NpXS5kdXBsaWNhdGVkLm1haW4gfHwgIXRoaXMuc2V0dGluZ3Muc2hvd0ZpbGVzLm1haW4pICYmXHJcblx0XHRcdFx0XHRcdCghc3RhdHVzW3NpXS5kdXBsaWNhdGVkLm91dGdvaW5nIHx8ICF0aGlzLnNldHRpbmdzLnNob3dGaWxlcy5vdXRnb2luZykgJiZcclxuXHRcdFx0XHRcdFx0KCFzdGF0dXNbc2ldLmR1cGxpY2F0ZWQuc2VsZikpIHtcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0XHRhZGRGbGFnKHNyY0ZpbGUsZmlsZXNbc2ldLCdmb2xkJyx0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHJcblx0XHRcdFx0XHRcdC8vIFx1MzBENVx1MzBBOVx1MzBGQ1x1MzBFQlx1MzBDOVx1NTFFNlx1NzQwNlxyXG5cdFx0XHRcdFx0XHRub3RlRWwuY2xhc3NMaXN0LmFkZCgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHRcdFx0XHRcdG5vdGVDb2xsYXBzZUljb24uY2xhc3NMaXN0LmFkZCgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHRcdFx0XHRcdHN0YXR1c1tzaV0uaXNGb2xkZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRub3RlQ2hpbGRyZW5FbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdFx0Ly8gXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU1NDBEXHJcblx0XHRcdGNvbnN0IG5hbWVMYWJlbCA9IChub3RlVHlwZSA9PSAnZm9sZGVyJyk/IGZpbGVzW3NpXS5uYW1lIDogKGZpbGVzW3NpXSBhcyBURmlsZSkuYmFzZW5hbWU7XHJcblx0XHRcdG5vdGVUaXRsZUVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1pbm5lciBuYXYtZm9sZGVyLXRpdGxlLWNvbnRlbnRcIikuc2V0VGV4dChuYW1lTGFiZWwpO1xyXG5cclxuXHRcdFx0Ly9cdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTU0MERcdTMwNkVcdTVGOENcdTMwNkVcdTYwQzVcdTU4MzFcdTMwOTJcdTg4NjhcdTc5M0FcclxuXHRcdFx0YXR0YWNoRmlsZUluZm8obm90ZVRpdGxlRWwsIHN0YXR1c1tzaV0sIGluZm9bc2ldLCBkYXRhW3NpXSwgdGhpcy5zZXR0aW5ncy5kaXNwbGF5RmlsZUluZm8pO1xyXG5cclxuXHRcdFx0Ly9cdTMwQ0VcdTMwRkNcdTMwQzhcdTMwQkZcdTMwQTRcdTMwQzhcdTMwRUJcdTMwOTJcdTMwQUZcdTMwRUFcdTMwQzNcdTMwQUZcdTMwNTdcdTMwNUZcdTMwODlcdTMwNURcdTMwNkVcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwOTJvcGVuXHJcblx0XHRcdGlmIChub3RlVHlwZSA9PSAnZmlsZScpe1xyXG5cdFx0XHRcdG5vdGVUaXRsZUVsLmFkZEV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFx0XHRcImNsaWNrXCIsXHJcblx0XHRcdFx0XHQoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHRcdFx0aWYgKGZpbGVzW3NpXSAhPSB0aGlzLmFjdGl2ZUZpbGUpe1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUoZmlsZXNbc2ldKTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRmYWxzZVxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdC8vaG92ZXIgcHJldmlldyBcclxuXHRcdFx0XHRub3RlVGl0bGVFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKCdob3Zlci1saW5rJywge1xyXG5cdFx0XHRcdFx0XHRldmVudCxcclxuXHRcdFx0XHRcdFx0c291cmNlOiBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXdUeXBlLFxyXG5cdFx0XHRcdFx0XHRob3ZlclBhcmVudDogcGFyZW50RWwsICAgLy8gcm9vdEVsXHUyMTkycGFyZW50RWxcdTMwNkJcdTMwNTdcdTMwNUZcclxuXHRcdFx0XHRcdFx0dGFyZ2V0RWw6IG5vdGVUaXRsZUVsLFxyXG5cdFx0XHRcdFx0XHRsaW5rdGV4dDogZmlsZXNbc2ldLnBhdGgsXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdFxyXG5cdFx0XHQvLyBcdTMwQjNcdTMwRjNcdTMwQzZcdTMwQURcdTMwQjlcdTMwQzhcdTMwRTFcdTMwQ0JcdTMwRTVcdTMwRkNcclxuXHRcdFx0bm90ZVRpdGxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XHRcImNvbnRleHRtZW51XCIsXHJcblx0XHRcdFx0KGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcclxuXHJcblx0XHRcdFx0XHRtZW51LmFkZFNlcGFyYXRvcigpO1xyXG5cclxuXHRcdFx0XHRcdC8vQWx3YXlzIG9uIFRvcCBcdTMwNkJcdTYzMDdcdTVCOUEvXHU4OUUzXHU5NjY0XHJcblx0XHRcdFx0XHRpZiAoY2hlY2tGbGFnKHNyY0ZpbGUsIGZpbGVzW3NpXSwgJ3RvcCcsIHRoaXMuc2V0dGluZ3MpKXtcclxuXHRcdFx0XHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKT0+XHJcblx0XHRcdFx0XHRcdFx0aXRlbVx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk1OTzogU3RvcCBkaXNwbGF5aW5nIGF0IHRoZSB0b3BcIilcclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRJY29uKCdwaW4tb2ZmJylcclxuXHRcdFx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZW1vdmVGbGFnKHNyY0ZpbGUsIGZpbGVzW3NpXSwgJ3RvcCcsIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5yZWZyZXNoVmlldyh0cnVlLCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG5cdFx0XHRcdFx0XHRcdGl0ZW1cclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk1OTzogQWx3YXlzIGRpc3BsYXkgYXQgdGhlIHRvcFwiKVxyXG5cdFx0XHRcdFx0XHRcdFx0LnNldEljb24oJ3BpbicpXHJcblx0XHRcdFx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YWRkRmxhZyhzcmNGaWxlLCBmaWxlc1tzaV0sICd0b3AnLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMucmVmcmVzaFZpZXcodHJ1ZSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9KSlcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBmYXZvcml0ZVx1MzA2Qlx1OEZGRFx1NTJBMC9cdTUyNEFcdTk2NjRcclxuXHRcdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmZhdm9yaXRlW25vdGVUeXBlXS5pbmNsdWRlcyhmaWxlc1tzaV0ucGF0aCkpe1xyXG5cdFx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0XHRpdGVtXHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0LnNldFRpdGxlKFwiTU5POiBSZW1vdmUgZnJvbSBmYXZvcml0ZXNcIilcclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRJY29uKCdib29rbWFyay1taW51cycpXHJcblx0XHRcdFx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGVsZXRlRmF2QW5kUmVjZW50LmNhbGwodGhpcywgZmlsZXNbc2ldLnBhdGgsIG5vdGVUeXBlLCAnZmF2b3JpdGUnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJNTk86IEFkZCB0byBmYXZvcml0ZXNcIilcclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRJY29uKCdib29rbWFyay1wbHVzJylcclxuXHRcdFx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR1cGRhdGVGYXZBbmRSZWNlbnQuY2FsbCh0aGlzLCBmaWxlc1tzaV0ucGF0aCxub3RlVHlwZSwnZmF2b3JpdGUnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9KSlcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAobm90ZVR5cGUgPT0gJ2ZpbGUnKXtcclxuXHRcdFx0XHRcdFx0Ly9cdTY1QjBcdTg5OEZcdTMwQkZcdTMwRDYgXHUzMDZCXHU5NThCXHUzMDRGXHJcblx0XHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG5cdFx0XHRcdFx0XHRcdGl0ZW1cclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk9wZW4gaW4gbmV3IHRhYlwiKVxyXG5cdFx0XHRcdFx0XHRcdFx0LnNldEljb24oXCJmaWxlLXBsdXNcIilcclxuXHRcdFx0XHRcdFx0XHRcdC5vbkNsaWNrKCgpPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZmlsZXNbc2ldICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5ob2xkVXBkYXRlT25jZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpLm9wZW5GaWxlKGZpbGVzW3NpXSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHQvL1x1NTNGM1x1MzA2Qlx1OTU4Qlx1MzA0RlxyXG5cdFx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJPcGVuIHRvIHRoZSByaWdodFwiKVxyXG5cdFx0XHRcdFx0XHRcdFx0LnNldEljb24oXCJzZXBhcmF0b3ItdmVydGljYWxcIilcclxuXHRcdFx0XHRcdFx0XHRcdC5vbkNsaWNrKCgpPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZmlsZXNbc2ldICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5ob2xkVXBkYXRlT25jZSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3NwbGl0Jykub3BlbkZpbGUoZmlsZXNbc2ldKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UudHJpZ2dlcihcclxuXHRcdFx0XHRcdFx0XCJmaWxlLW1lbnVcIixcclxuXHRcdFx0XHRcdFx0bWVudSxcclxuXHRcdFx0XHRcdFx0ZmlsZXNbc2ldLFxyXG5cdFx0XHRcdFx0XHQnbGluay1jb250ZXh0LW1lbnUnXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0bWVudS5zaG93QXRNb3VzZUV2ZW50KGV2ZW50KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdCk7XHJcblx0XHRcdFxyXG5cclxuXHRcdFx0Ly8gXHUzMDgyXHUzMDU3XHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHUzMDRDXHU2RTk2XHU1MDk5XHUzMDY3XHUzMDREXHUzMDY2XHUzMDQ0XHUzMDZBXHUzMDUxXHUzMDhDXHUzMDcwXHUzMEI5XHUzMEFEXHUzMEMzXHUzMEQ3XHUzMDU5XHUzMDhCXHJcblx0XHRcdGlmICghc3RhdHVzW3NpXS5vdXRsaW5lUmVhZHkpe1xyXG5cdFx0XHRcdG5vdGVFbC5jbGFzc0xpc3QuYWRkKCdpcy1jb2xsYXBzZWQnKTtcclxuXHRcdFx0XHRub3RlQ29sbGFwc2VJY29uLmNsYXNzTGlzdC5hZGQoJ2lzLWNvbGxhcHNlZCcpO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRcclxuXHRcdFx0aWYgKG5vdGVUeXBlID09ICdmb2xkZXInKXtcclxuXHRcdFx0XHQvLyBcdTMwQjVcdTMwRDZcdTMwRDVcdTMwQTlcdTMwRUJcdTMwQzBcdTMwNkVET01cdTMwOTJcdTRGNUNcdTYyMTBcclxuXHRcdFx0XHRjb25zdHJ1Y3ROb3RlRE9NLmNhbGwodGhpcywgdGhpcy50YXJnZXRGaWxlc1tmaWxlc1tzaV0ucGF0aF0sXHJcblx0XHRcdFx0XHR0aGlzLmZpbGVTdGF0dXNbZmlsZXNbc2ldLnBhdGhdLCB0aGlzLmZpbGVJbmZvW2ZpbGVzW3NpXS5wYXRoXSwgdGhpcy5vdXRsaW5lRGF0YVtmaWxlc1tzaV0ucGF0aF0sXHJcblx0XHRcdFx0XHRub3RlQ2hpbGRyZW5FbCwgJ2ZvbGRlcicsIGFvdEVsLCBzcmNGaWxlLCB0aGlzLmZpbGVPcmRlcltmaWxlc1tzaV0ucGF0aF0pO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM0RPTVx1MzA5Mlx1NEY1Q1x1NjIxMFxyXG5cdFx0XHRcdGNvbnN0cnVjdE91dGxpbmVET00uY2FsbCh0aGlzLCBmaWxlc1tzaV0sIGluZm9bc2ldLCBkYXRhW3NpXSwgbm90ZUNoaWxkcmVuRWwsIGNhdGVnb3J5KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly8gXHU2Mjk4XHUzMDhBXHUzMDVGXHUzMDVGXHUzMDdFXHUzMDhDXHUzMDY2XHUzMDQ0XHUzMDhDXHUzMDcwXHU1QjUwXHU4OTgxXHU3RDIwXHUzMDkyXHU5NzVFXHU4ODY4XHU3OTNBXHUzMDZCXHUzMDU5XHUzMDhCXHJcblx0XHRcdC8vIFx1NjI5OFx1MzA4QVx1MzA1Rlx1MzA1Rlx1MzA3RVx1MzA4Q1x1MzA2Nlx1MzA0NFx1MzA4Qlx1MzA2RVx1MzA2Rlx1NEVFNVx1NEUwQlx1MzA2RVx1MzBCMVx1MzBGQ1x1MzBCOVxyXG5cdFx0XHQvLyBjb2xscGFzZUFsbFx1MzA0Q1x1NjcwOVx1NTJCOVx1MzA2QVx1NTgzNFx1NTQwOFx1MzAwMVxyXG5cdFx0XHQvLyBcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwRDNcdTMwRTVcdTMwRkNcdTMwNjdcdTU0MDRcdTMwQUJcdTMwQzZcdTMwQjRcdTMwRUFcdUZGMDhcdTMwRTFcdTMwQTRcdTMwRjMvXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEI0XHUzMEZDXHUzMEE0XHUzMEYzXHUzMEIwL1x1ODFFQVx1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1RkYwOVx1MzA2Qlx1OTFDRFx1ODkwN1x1MzA0Q1x1MzA0Mlx1MzA4Qlx1NTgzNFx1NTQwOFx1MzAwMVxyXG5cdFx0XHQvLyByZWxhdGVkRmlsZXNcdTMwNjdcdTYyOThcdTMwOEFcdTMwNUZcdTMwNUZcdTMwN0ZcdTMwRDVcdTMwRTlcdTMwQjBcdTMwNENcdTdBQ0JcdTMwNjNcdTMwNjZcdTMwNDRcdTMwOEJcdTU4MzRcdTU0MDhcclxuXHRcdFx0aWYgKCh0aGlzLmNvbGxhcHNlQWxsKSB8fFxyXG5cdFx0XHRcdChzdGF0dXNbc2ldLmR1cGxpY2F0ZWQubWFpbiAmJiB0aGlzLnNldHRpbmdzLnNob3dGaWxlcy5tYWluKSB8fFxyXG5cdFx0XHRcdChzdGF0dXNbc2ldLmR1cGxpY2F0ZWQub3V0Z29pbmcgJiYgdGhpcy5zZXR0aW5ncy5zaG93RmlsZXMub3V0Z29pbmcpIHx8XHJcblx0XHRcdFx0KHN0YXR1c1tzaV0uZHVwbGljYXRlZC5zZWxmKSB8fFxyXG5cdFx0XHRcdCh0aGlzLnNldHRpbmdzLnJlbGF0ZWRGaWxlcz8uW3NyY0ZpbGUucGF0aF0/LltmaWxlc1tzaV0ucGF0aF0/LmZvbGQpKSB7XHJcblx0XHRcdFx0XHRub3RlRWwuY2xhc3NMaXN0LmFkZCgnaXMtY29sbGFwc2VkJyk7XHJcblx0XHRcdFx0XHRub3RlQ29sbGFwc2VJY29uLmNsYXNzTGlzdC5hZGQoJ2lzLWNvbGxhcHNlZCcpO1xyXG5cdFx0XHRcdFx0c3RhdHVzW3NpXS5pc0ZvbGRlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRub3RlQ2hpbGRyZW5FbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHN0YXR1c1tzaV0uaXNGb2xkZWQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdE91dGxpbmVET00gKGZpbGU6VEZpbGUsIGluZm86RmlsZUluZm8sIGRhdGE6IE91dGxpbmVEYXRhW10sIHBhcmVudEVsOkhUTUxFbGVtZW50LCBjYXRlZ29yeTogQ2F0ZWdvcnkpOnZvaWR7XHJcblx0XHJcblxyXG5cdFxyXG5cdC8vIGluY2x1ZGUgbW9kZSBcdTc1MjhcdTMwNkVcdTU5MDlcdTY1NzBcdTMwOTJcdTVCQTNcdThBMDAgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0Ly8gbGV0IGlzSW5jbHVkZWQgPSB0aGlzLnNldHRpbmdzLmluY2x1ZGVCZWdpbm5pbmc7XHJcblx0Ly8gbGV0IGluY2x1ZGVNb2RlSGVhZGluZ0xldmVsOiBudW1iZXI7XHJcblxyXG5cdC8vIGV4Y2x1ZGUgbW9kZSBcdTc1MjhcdTU5MDlcdTY1NzAgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0Ly8gbGV0IGlzRXhjbHVkZWQgPSBmYWxzZTtcclxuXHQvLyBsZXQgZXhjbHVkZVR5cGU6IHN0cmluZztcclxuXHQvLyBsZXQgZXhjbHVkZU1vZGVIZWFkaW5nTGV2ZWw6IG51bWJlcjtcclxuXHQvLyBsZXQgcHJpbWVUeXBlID0gdGhpcy5zZXR0aW5ncy5pbmNsdWRlT25seSA9PSAnbm9uZScgPyB0aGlzLnNldHRpbmdzLnByaW1lRWxlbWVudCA6IHRoaXMuc2V0dGluZ3MuaW5jbHVkZU9ubHk7XHJcblx0XHJcblx0Ly8gZXh0cmFjdCBcdTMwREVcdTMwQzNcdTMwQzFcdTMwNTlcdTMwOEJcdTk4MDVcdTc2RUVcdTMwNENcdTMwNDJcdTMwNjNcdTMwNUZcdTMwNEJcdTMwNjlcdTMwNDZcdTMwNEIgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0Ly8gbGV0IGlzRXh0cmFjdGVkID0gZmFsc2U7XHJcblxyXG5cdC8vIHByb3BlcnRpZXNcdTMwNkVcdTUxRTZcdTc0MDZcclxuXHRpZiAodGhpcy5zZXR0aW5ncy5zaG93UHJvcGVydHlMaW5rcyAmJiBpbmZvLmZyb250bWF0dGVyTGlua3Mpe1xyXG5cdFx0ZnJvbnRtYXR0ZXJsaW5rc2xvb3A6IGZvciAobGV0IGogPSAwOyBqIDwgaW5mby5mcm9udG1hdHRlckxpbmtzLmxlbmd0aDsgaisrKXtcclxuXHRcdFxyXG5cdFx0XHRjb25zdCBsaW5rVGFyZ2V0ID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChwYXJzZUxpbmt0ZXh0KGluZm8uZnJvbnRtYXR0ZXJMaW5rc1tqXS5saW5rKS5wYXRoLCBmaWxlLnBhdGgpO1xyXG5cdFx0XHRpZiAoIShsaW5rVGFyZ2V0IGluc3RhbmNlb2YgVEZpbGUpKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QgbGlua1N1YnBhdGggPSBwYXJzZUxpbmt0ZXh0KGluZm8uZnJvbnRtYXR0ZXJMaW5rc1tqXS5saW5rKS5zdWJwYXRoO1xyXG5cdFx0XHQvLyBcdTYyQkRcdTUxRkEgZXh0cmFjdCAgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0XHRcdC8vIGlmICh0aGlzLmV4dHJhY3RNb2RlID09IHRydWUpIHtcclxuXHRcdFx0Ly8gXHRpZiAodGhpcy5leHRyYWN0VGFzayA9PSB0cnVlIHx8ICFpbmZvW2ldLmZyb250bWF0dGVyTGlua3Nbal0uZGlzcGxheVRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnNldHRpbmdzLndvcmRzVG9FeHRyYWN0LnRvTG93ZXJDYXNlKCkpKXtcclxuXHRcdFx0Ly8gXHRcdGNvbnRpbnVlO1xyXG5cdFx0XHQvLyBcdH0gZWxzZSB7XHJcblx0XHRcdC8vIFx0XHRpc0V4dHJhY3RlZCA9IHRydWU7XHJcblx0XHRcdC8vIFx0fVxyXG5cdFx0XHQvLyB9XHJcblxyXG5cdFx0XHQvLyBoaWRlTGlua3NCZXR3ZWVuUmVsYXRlZEZpbGVzXHUzMDZFXHU4QTJEXHU1QjlBXHUzMDZCXHU1RjkzXHUzMDYzXHUzMDY2XHU5MUNEXHU4OTA3XHU5NjY0XHU1OTE2XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmhpZGVMaW5rc0JldHdlZW5SZWxhdGVkRmlsZXMgPT0gJ21haW5Pbmx5Jyl7XHJcblx0XHRcdFx0aWYgKGNhdGVnb3J5ID09ICdtYWluJyl7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGxpbmtUYXJnZXQucGF0aCA9PSB0aGlzLnRhcmdldEZpbGVzLm1haW4/LlswXS5wYXRoKXtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5oaWRlTGlua3NCZXR3ZWVuUmVsYXRlZEZpbGVzID09ICd0b01haW5Pbmx5Jyl7XHJcblx0XHRcdFx0aWYgKGxpbmtUYXJnZXQucGF0aCA9PSB0aGlzLnRhcmdldEZpbGVzLm1haW4/LlswXS5wYXRoKXtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5oaWRlTGlua3NCZXR3ZWVuUmVsYXRlZEZpbGVzID09ICdhbGwnKXtcclxuXHRcdFx0XHRmb3IgKGxldCBjYXRlZ29yeSBpbiB0aGlzLnRhcmdldEZpbGVzKXtcclxuXHRcdFx0XHRcdC8vIGluZm8uZnJvbnRtYXR0ZXJMaW5rc1tqXS5saW5rXHUzMDZCXHU0RTAwXHU4MUY0XHUzMDU5XHUzMDhCXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU1NDBEXHUzMDRDXHUzMDQyXHUzMDhCXHUzMDRCXHUzMDY5XHUzMDQ2XHUzMDRCXHUzMDZFXHU1MUU2XHU3NDA2XHUzMDAyXHJcblx0XHRcdFx0XHRpZiAodGhpcy50YXJnZXRGaWxlc1tjYXRlZ29yeV0uc29tZSggKHRhcmdldGZpbGUpID0+IHRhcmdldGZpbGUucGF0aCA9PSBsaW5rVGFyZ2V0LnBhdGgpKXtcclxuXHRcdFx0XHRcdFx0Y29udGludWUgZnJvbnRtYXR0ZXJsaW5rc2xvb3A7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cclxuXHJcblx0XHRcdGNvbnN0IG91dGxpbmVFbDogSFRNTEVsZW1lbnQgPSBwYXJlbnRFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0gbmF2LWZpbGVcIik7XHJcblx0XHRcdGNvbnN0IG91dGxpbmVUaXRsZTogSFRNTEVsZW1lbnQgPSBvdXRsaW5lRWwuY3JlYXRlRGl2KFwidHJlZS1pdGVtLXNlbGYgaXMtY2xpY2thYmxlIG5hdi1maWxlLXRpdGxlXCIpO1xyXG5cdFx0XHRzZXRJY29uKG91dGxpbmVUaXRsZSwnbGluaycpO1xyXG5cdFxyXG5cdFx0XHRvdXRsaW5lVGl0bGUuc3R5bGUucGFkZGluZ0xlZnQgPScwLjVlbSc7XHJcblx0XHRcdG91dGxpbmVUaXRsZS5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0taW5uZXIgbmF2LWZpbGUtdGl0bGUtY29udGVudFwiKS5zZXRUZXh0KGluZm8uZnJvbnRtYXR0ZXJMaW5rc1tqXS5kaXNwbGF5VGV4dCk7XHJcblx0XHJcblx0XHRcclxuXHRcdFx0Ly9cdTMwQUZcdTMwRUFcdTMwQzNcdTMwQUZcdTY2NDJcclxuXHRcdFx0b3V0bGluZVRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFx0XCJjbGlja1wiLFxyXG5cdFx0XHRcdChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUoZmlsZSk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRmYWxzZVxyXG5cdFx0XHQpO1xyXG5cdFx0XHQvL2hvdmVyIHByZXZpZXcgXHJcblx0XHRcdG91dGxpbmVUaXRsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHRpZiAobGlua1RhcmdldCl7XHJcblx0XHRcdFx0XHQvL1x1MzBFQVx1MzBGM1x1MzBBRlx1NjBDNVx1NTgzMVx1MzA2QnN1YnBhdGhcdUZGMDhcdTg5OEJcdTUxRkFcdTMwNTdcdTMwNzhcdTMwNkVcdTMwRUFcdTMwRjNcdTMwQUZcdUZGMDlcdTMwNENcdTU0MkJcdTMwN0VcdTMwOENcdTMwOEJcdTU4MzRcdTU0MDhcdTMwMDFcdTMwNURcdTMwNkVcdTRGNERcdTdGNkVcdTMwOTJcdTUzRDZcdTVGOTdcclxuXHRcdFx0XHRcdGxldCBwb3NJbmZvID0ge307XHJcblx0XHRcdFx0XHRpZihsaW5rU3VicGF0aCl7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHN1YnBhdGhQb3NpdGlvbiA9IGdldFN1YnBhdGhQb3NpdGlvbih0aGlzLmFwcCwgbGlua1RhcmdldCwgbGlua1N1YnBhdGgpO1xyXG5cdFx0XHRcdFx0XHRpZiAoc3VicGF0aFBvc2l0aW9uPy5zdGFydD8ubGluZSl7XHJcblx0XHRcdFx0XHRcdFx0cG9zSW5mbyA9IHsgc2Nyb2xsOiBzdWJwYXRoUG9zaXRpb24uc3RhcnQubGluZX07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKCdob3Zlci1saW5rJywge1xyXG5cdFx0XHRcdFx0XHRldmVudCxcclxuXHRcdFx0XHRcdFx0c291cmNlOiBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXdUeXBlLFxyXG5cdFx0XHRcdFx0XHRob3ZlclBhcmVudDogcGFyZW50RWwsICAgLy8gcm9vdEVsXHUyMTkycGFyZW50RWxcdTMwNkJcdTMwNTdcdTMwNUZcclxuXHRcdFx0XHRcdFx0dGFyZ2V0RWw6IG91dGxpbmVUaXRsZSxcclxuXHRcdFx0XHRcdFx0bGlua3RleHQ6IGxpbmtUYXJnZXQucGF0aCxcclxuXHRcdFx0XHRcdFx0c3RhdGU6IHBvc0luZm9cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHQvLyBjb250ZXh0bWVudVxyXG5cdFx0XHRvdXRsaW5lVGl0bGUuYWRkRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XHRcImNvbnRleHRtZW51XCIsXHJcblx0XHRcdFx0KGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcclxuXHJcblx0XHRcdFx0XHQvL1x1NjJCRFx1NTFGQSBmaWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuXHRcdFx0XHRcdC8vIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT5cclxuXHRcdFx0XHRcdC8vIFx0aXRlbVxyXG5cdFx0XHRcdFx0Ly8gXHRcdC5zZXRUaXRsZShcIkV4dHJhY3RcIilcclxuXHRcdFx0XHRcdC8vIFx0XHQuc2V0SWNvbihcInNlYXJjaFwiKVxyXG5cdFx0XHRcdFx0Ly8gXHRcdC5vbkNsaWNrKGFzeW5jICgpPT57XHJcblx0XHRcdFx0XHQvLyBcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3Jkc1RvRXh0cmFjdCA9IGRhdGFbal0uZGlzcGxheVRleHQ7XHJcblx0XHRcdFx0XHQvLyBcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdC8vIFx0XHRcdHRoaXMuZXh0cmFjdE1vZGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0Ly8gXHRcdFx0dGhpcy5leHRyYWN0VGFzayA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0Ly8gXHRcdFx0dGhpcy5yZWZyZXNoVmlldyhmYWxzZSxmYWxzZSk7XHJcblx0XHRcdFx0XHQvLyBcdFx0fSlcclxuXHRcdFx0XHRcdC8vICk7XHJcblx0XHRcdFx0XHQvLyBtZW51LmFkZFNlcGFyYXRvcigpO1xyXG5cclxuXHJcblx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk9wZW4gbGlua2VkIGZpbGVcIilcclxuXHRcdFx0XHRcdFx0XHQuc2V0SWNvbihcImxpbmtzLWdvaW5nLW91dFwiKVxyXG5cdFx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jKCk9PntcclxuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUobGlua1RhcmdldCk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAobGlua1N1YnBhdGgpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3Qgc3VicGF0aFBvc2l0aW9uID0gZ2V0U3VicGF0aFBvc2l0aW9uKHRoaXMuYXBwLCBsaW5rVGFyZ2V0LCBsaW5rU3VicGF0aCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAodmlldyAmJiBzdWJwYXRoUG9zaXRpb24pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2aWV3LmVkaXRvci5mb2N1cygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZpZXcuZWRpdG9yLnNldEN1cnNvciAoc3VicGF0aFBvc2l0aW9uLnN0YXJ0Py5saW5lLCAwKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2aWV3LmVkaXRvci5zY3JvbGxJbnRvVmlldygge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZnJvbToge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsaW5lOiBzdWJwYXRoUG9zaXRpb24uc3RhcnQ/LmxpbmUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoOjBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0bzoge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsaW5lOiBzdWJwYXRoUG9zaXRpb24uc3RhcnQ/LmxpbmUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoOjBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9LCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdG1lbnUuYWRkU2VwYXJhdG9yKCk7XHJcblxyXG5cclxuXHRcdFx0XHRcdC8vXHU2NUIwXHU4OThGXHUzMEJGXHUzMEQ2XHUzMDZCXHU5NThCXHUzMDRGXHJcblx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk9wZW4gaW4gbmV3IHRhYlwiKVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRJY29uKFwiZmlsZS1wbHVzXCIpXHJcblx0XHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpLm9wZW5GaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0Ly9cdTUzRjNcdTMwNkJcdTk1OEJcdTMwNEZcclxuXHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG5cdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdFx0LnNldFRpdGxlKFwiT3BlbiB0byB0aGUgcmlnaHRcIilcclxuXHRcdFx0XHRcdFx0XHQuc2V0SWNvbihcInNlcGFyYXRvci12ZXJ0aWNhbFwiKVxyXG5cdFx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jKCk9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoZmlsZSAhPSB0aGlzLmFjdGl2ZUZpbGUpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLmhvbGRVcGRhdGVPbmNlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCdzcGxpdCcpLm9wZW5GaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0Ly9cdTY1QjBcdTg5OEZcdTMwQTZcdTMwQTNcdTMwRjNcdTMwQzlcdTMwQTZcdTMwNkJcdTk1OEJcdTMwNEZcclxuXHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG5cdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdFx0LnNldFRpdGxlKFwiT3BlbiBpbiBuZXcgd2luZG93XCIpXHJcblx0XHRcdFx0XHRcdFx0LnNldEljb24oXCJzY2FuXCIpXHJcblx0XHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3dpbmRvdycpLm9wZW5GaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gXHU2NzAwXHU2NUIwXHUzMDZFXHU4OThCXHU1MUZBXHUzMDU3XHUzMEVDXHUzMEQ5XHUzMEVCXHJcblx0bGV0IGxhdGVzdEhlYWRpbmdMZXZlbCA9IDA7XHJcblxyXG5cdC8vXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHU4OTgxXHU3RDIwXHUzMDZFXHU2M0NGXHU3NTNCXHUzMDAyZGF0YVtpXVx1MzA0Q1x1ODk4MVx1N0QyMDBcdTMwNkFcdTMwODlcdTMwQjlcdTMwQURcdTMwQzNcdTMwRDdcclxuXHQvL1x1NEU4Q1x1OTFDRFx1MzBFQlx1MzBGQ1x1MzBEN1x1MzA0Qlx1MzA4OVx1NjI5Q1x1MzA1MVx1MzA4Qlx1MzA1Rlx1MzA4MVx1MzBFOVx1MzBEOVx1MzBFQmVsZW1lbnRsb29wXHUzMDkyXHUzMDY0XHUzMDUxXHUzMDVGXHJcblx0aWYgKGRhdGEubGVuZ3RoID4gMCl7XHJcblxyXG5cdFx0ZWxlbWVudGxvb3A6IGZvciAobGV0IGo9MDsgajxkYXRhLmxlbmd0aDsgaisrKXtcclxuXHJcblx0XHRcdC8vIFx1NzNGRVx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1ODk4MVx1N0QyMFx1MzA2RVx1N0EyRVx1NTIyNVx1MzA5Mlx1NTNENlx1NUY5N1xyXG5cdFx0XHRjb25zdCBlbGVtZW50ID0gZGF0YVtqXS50eXBlT2ZFbGVtZW50O1xyXG5cdFx0XHRjb25zdCBsaW5rVGFyZ2V0ID0gKGVsZW1lbnQgIT09ICdsaW5rJyk/IG51bGwgOiB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KHBhcnNlTGlua3RleHQoZGF0YVtqXT8ubGluaykucGF0aCwgZmlsZS5wYXRoKTtcclxuXHRcdFx0Y29uc3QgbGlua1N1YnBhdGggPSAoIWxpbmtUYXJnZXQpPyB1bmRlZmluZWQgOiBwYXJzZUxpbmt0ZXh0KGRhdGFbal0/LmxpbmspLnN1YnBhdGg7XHJcblxyXG5cdFx0XHQvLy8vIGluY2x1ZGUgbW9kZSBmaWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuXHRcdFx0Ly8gaWYgKHRoaXMuaW5jbHVkZU1vZGUgJiYgdGhpcy5zZXR0aW5ncy5pbmNsdWRlT25seSA9PSBlbGVtZW50KXtcclxuXHRcdFx0Ly8gXHRpZiAoaXNJbmNsdWRlZCA9PSB0cnVlICYmIGVsZW1lbnQgPT0gJ2hlYWRpbmcnICYmIGRhdGFbal0ubGV2ZWwgPiBpbmNsdWRlTW9kZUhlYWRpbmdMZXZlbCAgKXtcclxuXHRcdFx0Ly8gXHRcdC8vXHU0RTBCXHU0RjREXHU4OThCXHU1MUZBXHUzMDU3XHUzMDZFXHU1ODM0XHU1NDA4XHUzMDZGXHU1MUU2XHU3NDA2XHUzMDkyXHUzMEI5XHUzMEFEXHUzMEMzXHUzMEQ3XHJcblx0XHRcdC8vIFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gXHRcdC8vIFx1N0Q0NFx1MzA3Rlx1NTE2NVx1MzA4Q1x1MzA4Qlx1MzBFRlx1MzBGQ1x1MzBDOVx1MzA2Qlx1MzBERVx1MzBDM1x1MzBDMVx1MzA1OVx1MzA4Qlx1MzA0Qlx1NTIyNFx1NUI5QVxyXG5cdFx0XHQvLyBcdFx0aXNJbmNsdWRlZCA9IGZhbHNlO1xyXG5cdFx0XHQvLyBcdFx0Zm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnNldHRpbmdzLndvcmRzVG9JbmNsdWRlKXtcclxuXHRcdFx0Ly8gXHRcdFx0aWYgKCAodmFsdWUpICYmIGRhdGFbal0uZGlzcGxheVRleHQuaW5jbHVkZXModmFsdWUpKXtcclxuXHRcdFx0Ly8gXHRcdFx0XHRpc0luY2x1ZGVkID0gdHJ1ZTtcclxuXHRcdFx0Ly8gXHRcdFx0XHRpZiAoZWxlbWVudCA9PSAnaGVhZGluZycpe1xyXG5cdFx0XHQvLyBcdFx0XHRcdFx0aW5jbHVkZU1vZGVIZWFkaW5nTGV2ZWwgPSBkYXRhW2pdLmxldmVsO1xyXG5cdFx0XHQvLyBcdFx0XHRcdH1cclxuXHRcdFx0Ly8gXHRcdFx0fVxyXG5cdFx0XHQvLyBcdFx0fVxyXG5cdFx0XHQvLyBcdH1cclxuXHRcdFx0Ly8gfVxyXG5cdFx0XHQvLyBpZiAoIWlzSW5jbHVkZWQpe1xyXG5cdFx0XHQvLyBcdGNvbnRpbnVlO1xyXG5cdFx0XHQvLyB9XHJcblx0XHRcdFxyXG5cdFx0XHQvLy8vIGV4Y2x1ZGUgbW9kZSBmaWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuXHRcdFx0Ly8gaWYgKCFpc0V4Y2x1ZGVkIHx8IChpc0V4Y2x1ZGVkICYmIChleGNsdWRlVHlwZSA9PSBlbGVtZW50IHx8IHByaW1lVHlwZSA9PSBlbGVtZW50KSkpe1xyXG5cdFx0XHQvLyBcdGlmIChlbGVtZW50ID09ICdoZWFkaW5nJyAmJiBkYXRhW2pdLmxldmVsID4gZXhjbHVkZU1vZGVIZWFkaW5nTGV2ZWwpe1xyXG5cdFx0XHQvLyBcdC8vIFx1NEUwQlx1NEY0RFx1ODk4Qlx1NTFGQVx1MzA1N1x1MzA2RVx1NTgzNFx1NTQwOFx1MzA2Rlx1NTFFNlx1NzQwNlx1MzA5Mlx1MzBCOVx1MzBBRFx1MzBDM1x1MzBEN1x0XHJcblx0XHRcdC8vIFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gXHRcdGlzRXhjbHVkZWQgPSBmYWxzZTtcclxuXHRcdFx0Ly8gXHRcdGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5zZXR0aW5ncy53b3Jkc1RvRXhjbHVkZVtlbGVtZW50XSl7XHJcblx0XHRcdC8vIFx0XHRcdGlmICggKHZhbHVlKSAmJiBkYXRhW2pdLmRpc3BsYXlUZXh0LmluY2x1ZGVzKHZhbHVlKSl7XHJcblx0XHRcdC8vIFx0XHRcdFx0aXNFeGNsdWRlZCA9IHRydWU7XHJcblx0XHRcdC8vIFx0XHRcdFx0ZXhjbHVkZVR5cGUgPSBlbGVtZW50O1xyXG5cdFx0XHQvLyBcdFx0XHRcdGlmIChlbGVtZW50ID09ICdoZWFkaW5nJyl7XHJcblx0XHRcdC8vIFx0XHRcdFx0XHRleGNsdWRlTW9kZUhlYWRpbmdMZXZlbCA9IGRhdGFbal0ubGV2ZWw7XHJcblx0XHRcdC8vIFx0XHRcdFx0fVxyXG5cdFx0XHQvLyBcdFx0XHR9XHJcblx0XHRcdC8vIFx0XHR9XHJcblxyXG5cdFx0XHQvLyBcdH1cclxuXHRcdFx0Ly8gfSAgIFxyXG5cdFx0XHQvLyBpZiAoaXNFeGNsdWRlZCl7XHJcblx0XHRcdC8vIFx0Y29udGludWU7XHJcblx0XHRcdC8vIH1cclxuXHJcblxyXG5cdFx0XHRcclxuXHRcdFx0Ly9cdTg5ODFcdTdEMjBcdTMwNTRcdTMwNjhcdTMwNkVcdTk3NUVcdTg4NjhcdTc5M0FcdTUyMjRcdTVCOUEgIFx1OEEyRFx1NUI5QVx1MzA2N1x1OTc1RVx1ODg2OFx1NzkzQVx1MzA2Qlx1MzA2QVx1MzA2M1x1MzA2Nlx1MzA0NFx1MzA4Q1x1MzA3MFx1MzBCOVx1MzBBRFx1MzBDM1x1MzBEN1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3Muc2hvd0VsZW1lbnRzW2VsZW1lbnRdID09IGZhbHNlKXtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHJcblxyXG5cdFx0XHQvLyBzaW1wbGUgZmlsdGVyIFx1OTY2NFx1NTkxNlx1MzBFRlx1MzBGQ1x1MzBDOVx1MzA2Qlx1MzBERVx1MzBDM1x1MzBDMVx1MzA1OVx1MzA4Q1x1MzA3MFx1MzBCOVx1MzBBRFx1MzBDM1x1MzBENyBmaWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuXHRcdFx0Ly8gZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnNldHRpbmdzLndvcmRzVG9JZ25vcmVbZWxlbWVudF0pe1xyXG5cdFx0XHQvLyBcdGlmKCAodmFsdWUpICYmIGRhdGFbal0uZGlzcGxheVRleHQuaW5jbHVkZXModmFsdWUpKXtcclxuXHRcdFx0Ly8gXHRcdGNvbnRpbnVlIGVsZW1lbnRsb29wO1xyXG5cdFx0XHQvLyBcdH1cclxuXHRcdFx0Ly8gfVxyXG5cclxuXHRcdFx0Ly8vLyBcdTYyQkRcdTUxRkEgZXh0cmFjdCBmaWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuXHRcdFx0Ly8gaWYgKHRoaXMuZXh0cmFjdE1vZGUgPT0gdHJ1ZSkge1xyXG5cdFx0XHQvLyBcdGlmICh0aGlzLmV4dHJhY3RUYXNrID09IGZhbHNlICYmICFkYXRhW2pdLmRpc3BsYXlUZXh0LmluY2x1ZGVzKHRoaXMuc2V0dGluZ3Mud29yZHNUb0V4dHJhY3QpKXtcclxuXHRcdFx0Ly8gXHRcdGNvbnRpbnVlO1xyXG5cdFx0XHQvLyBcdH0gZWxzZSBpZiAodGhpcy5leHRyYWN0VGFzayA9PSB0cnVlICYmIGRhdGFbal0udGFzayA9PT0gdm9pZCAwKXtcclxuXHRcdFx0Ly8gXHRcdGNvbnRpbnVlO1xyXG5cdFx0XHQvLyBcdH0gZWxzZSB7XHJcblx0XHRcdC8vIFx0XHRpc0V4dHJhY3RlZCA9IHRydWU7XHJcblx0XHRcdC8vIFx0fVxyXG5cdFx0XHQvLyB9XHJcblxyXG5cclxuXHJcblx0XHRcdC8vLy8gXHU4OTgxXHU3RDIwXHU3QTJFXHU1MjI1XHUzMDU0XHUzMDY4XHUzMDZFXHU1MUU2XHU3NDA2XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBoZWFkaW5nc1xyXG5cdFx0XHRpZiAoZWxlbWVudCA9PSAnaGVhZGluZycpe1xyXG5cdFx0XHRcdC8vIFx1NjcwMFx1NjVCMFx1MzA2RVx1ODk4Qlx1NTFGQVx1MzA1N1x1MzBFQ1x1MzBEOVx1MzBFQlx1MzA5Mlx1NTNENlx1NUY5N1xyXG5cdFx0XHRcdGxhdGVzdEhlYWRpbmdMZXZlbCA9IGRhdGFbal0ubGV2ZWw7XHJcblx0XHRcdFx0Ly8gXHU3Mjc5XHU1QjlBXHUzMDZFXHU4OThCXHU1MUZBXHUzMDU3XHUzMEVDXHUzMEQ5XHUzMEVCXHUzMDRDXHU5NzVFXHU4ODY4XHU3OTNBXHUzMDZFXHU1ODM0XHU1NDA4XHUzMDAxXHU4QTcyXHU1RjUzXHUzMDU5XHUzMDhDXHUzMDcwXHUzMEI5XHUzMEFEXHUzMEMzXHUzMEQ3XHJcblx0XHRcdFx0aWYgKCAhdGhpcy5zZXR0aW5ncy5oZWFkaW5nTGV2ZWxbZGF0YVtqXS5sZXZlbCAtIDFdKXtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbGlua3NcclxuXHRcdFx0aWYgKGVsZW1lbnQgPT0gJ2xpbmsnKXtcclxuXHRcdFx0XHQvLyBtYWluXHUzMDZGXHU4QTJEXHU1QjlBXHU2QjIxXHU3QjJDXHUzMDY3XHUzMEVBXHUzMEYzXHUzMEFGXHUzMDZGXHU5NzVFXHU4ODY4XHU3OTNBXHVGRjA4XHUzMEEyXHUzMEE2XHUzMEM4XHUzMEI0XHUzMEZDXHUzMEE0XHUzMEYzXHUzMEIwXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU3RkE0XHUzMDY3XHU0RUUzXHU2NkZGXHUzMDY3XHUzMDREXHUzMDhCXHUzMDZFXHUzMDY3XHVGRjA5XHJcblx0XHRcdFx0Ly8gaWYgKHRoaXMuc2V0dGluZ3MuaGlkZUxpbmtzQmV0d2VlblJlbGF0ZWRGaWxlcyAhPSAnbm9uZScpe1xyXG5cdFx0XHRcdC8vIFx0aWYgKGNhdGVnb3J5ID09ICdtYWluJyl7XHJcblx0XHRcdFx0Ly8gXHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdC8vIFx0fVxyXG5cdFx0XHRcdC8vIFx0aWYgKHRoaXMuc2V0dGluZ3MuaGlkZUxpbmtzQmV0d2VlblJlbGF0ZWRGaWxlcyA9PSAnbWFpbk9ubHknKXtcclxuXHJcblx0XHRcdFx0Ly8gXHRcdGlmIChjYXRlZ29yeSA9PSAnYmFja2xpbmsnICYmIGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGRhdGFbal0ubGluaywgZmlsZS5wYXRoKT8ucGF0aCA9PSB0aGlzLnRhcmdldEZpbGVzLm1haW5bMF0ucGF0aCl7XHJcblx0XHRcdFx0Ly8gXHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0Ly8gXHRcdH1cclxuXHRcdFx0XHQvLyBcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gXHRcdC8vIGhpZGVMaW5rc0JldHdlZW5yZWxhdGVkRmlsZXMgPT0gJ2FsbCdcclxuXHRcdFx0XHQvLyBcdFx0Y29uc3QgbGlua3RhcmdldHBhdGggPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChkYXRhW2pdLmxpbmssIGZpbGUucGF0aCk/LnBhdGg7XHJcblx0XHRcdFx0Ly8gXHRcdGlmIChsaW5rdGFyZ2V0cGF0aCl7XHJcblx0XHRcdFx0Ly8gXHRcdFx0Zm9yIChsZXQgY2F0ZWdvcnkgaW4gdGhpcy50YXJnZXRGaWxlcyl7XHJcblx0XHRcdFx0Ly8gXHRcdFx0XHQvLyBkYXRhW2pdLmxpbmtcdTMwNkJcdTRFMDBcdTgxRjRcdTMwNTlcdTMwOEJcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTU0MERcdTMwNENcdTMwNDJcdTMwOEJcdTMwNEJcdTMwNjlcdTMwNDZcdTMwNEJcdTMwNkVcdTUxRTZcdTc0MDZcdTMwMDJcclxuXHRcdFx0XHQvLyBcdFx0XHRcdGlmICh0aGlzLnRhcmdldEZpbGVzW2NhdGVnb3J5XS5zb21lKCAodGFyZ2V0ZmlsZSkgPT4gdGFyZ2V0ZmlsZS5wYXRoID09IGxpbmt0YXJnZXRwYXRoKSl7XHJcblx0XHRcdFx0Ly8gXHRcdFx0XHRcdGNvbnRpbnVlIGVsZW1lbnRsb29wO1xyXG5cdFx0XHRcdC8vIFx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIFx0XHRcdH1cclxuXHRcdFx0XHQvLyBcdFx0fVxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHQvLyBcdH1cclxuXHRcdFx0XHQvLyB9XHJcblx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaGlkZUxpbmtzQmV0d2VlblJlbGF0ZWRGaWxlcyA9PSAnbWFpbk9ubHknKXtcclxuXHRcdFx0XHRcdGlmIChjYXRlZ29yeSA9PSAnbWFpbicpe1xyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGRhdGFbal0ubGluaywgZmlsZS5wYXRoKT8ucGF0aCA9PSB0aGlzLnRhcmdldEZpbGVzLm1haW4/LlswXS5wYXRoKXtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmhpZGVMaW5rc0JldHdlZW5SZWxhdGVkRmlsZXMgPT0gJ3RvTWFpbk9ubHknKXtcclxuXHRcdFx0XHRcdGlmICh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KGRhdGFbal0ubGluaywgZmlsZS5wYXRoKT8ucGF0aCA9PSB0aGlzLnRhcmdldEZpbGVzLm1haW4/LlswXS5wYXRoKXtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmhpZGVMaW5rc0JldHdlZW5SZWxhdGVkRmlsZXMgPT0gJ2FsbCcpe1xyXG5cdFx0XHRcdFx0aWYgKGxpbmtUYXJnZXQucGF0aCl7XHJcblx0XHRcdFx0XHRcdGZvciAobGV0IGNhdGVnb3J5IGluIHRoaXMudGFyZ2V0RmlsZXMpe1xyXG5cdFx0XHRcdFx0XHRcdC8vIGRhdGFbal0ubGlua1x1MzA2Qlx1NEUwMFx1ODFGNFx1MzA1OVx1MzA4Qlx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1NTQwRFx1MzA0Q1x1MzA0Mlx1MzA4Qlx1MzA0Qlx1MzA2OVx1MzA0Nlx1MzA0Qlx1MzA2RVx1NTFFNlx1NzQwNlx1MzAwMlxyXG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnRhcmdldEZpbGVzW2NhdGVnb3J5XS5zb21lKCAodGFyZ2V0ZmlsZSkgPT4gdGFyZ2V0ZmlsZS5wYXRoID09IGxpbmtUYXJnZXQucGF0aCkpe1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGludWUgZWxlbWVudGxvb3A7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyB0YWdzXHJcblx0XHRcdGlmIChlbGVtZW50ID09ICd0YWcnKXtcclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdC8vIGxpc3RJdGVtc1xyXG5cdFx0XHRpZiAoZWxlbWVudCA9PSAnbGlzdEl0ZW1zJyl7XHJcblx0XHRcdFx0Ly8gXHU1QjhDXHU0RTg2XHUzMEJGXHUzMEI5XHUzMEFGXHU5NzVFXHU4ODY4XHU3OTNBXHU4QTJEXHU1QjlBXHUzMDY3XHUzMDQyXHUzMDhDXHUzMDcwXHU1QjhDXHU0RTg2XHUzMEJGXHUzMEI5XHUzMEFGXHUzMDZGXHUzMEI5XHUzMEFEXHUzMEMzXHUzMEQ3XHJcblx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaGlkZUNvbXBsZXRlZFRhc2tzID09IHRydWUgJiYgZGF0YVtqXS50YXNrID09J3gnKXtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdC8vIFx1OTc1RVx1MzBCRlx1MzBCOVx1MzBBRlx1OTc1RVx1ODg2OFx1NzkzQVx1OEEyRFx1NUI5QVx1MzA2N1x1MzA0Mlx1MzA4Q1x1MzA3MFx1OTc1RVx1MzBCRlx1MzBCOVx1MzBBRlx1MzA2Rlx1MzBCOVx1MzBBRFx1MzBDM1x1MzBEN1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5zZXR0aW5ncy50YXNrT25seSA9PSB0cnVlICYmIGRhdGFbal0udGFzayA9PT0gdm9pZCAwKXtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdC8vIFx1OTc1RVx1MzBCRlx1MzBCOVx1MzBBRlx1MzA2RVx1OTAxQVx1NUUzOFx1MzBFQVx1MzBCOVx1MzBDOFx1MzBBMlx1MzBBNFx1MzBDNlx1MzBFMFx1MzAwMVx1MzA3RVx1MzA1Rlx1MzA2RiBcdTMwQkZcdTMwQjlcdTMwQUZcdTMwNkZcdTUxNjhcdTg4NjhcdTc5M0FcdTMwNkVcdThBMkRcdTVCOUFcdTMwNjdcdTcxMjFcdTMwNTFcdTMwOENcdTMwNzBcdTMwRUNcdTMwRDlcdTMwRUJcdTMwNkJcdTVGRENcdTMwNThcdTMwNjZcdTMwQjlcdTMwQURcdTMwQzNcdTMwRDdcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MuYWxsVGFza3MgPT0gZmFsc2UgfHwgZGF0YVtqXS50YXNrID09PSB2b2lkIDApe1xyXG5cdFx0XHRcdFx0aWYgKCAoZGF0YVtqXS5sZXZlbCA9PSAyKSB8fCAoZGF0YVtqXS5sZXZlbCA9PTEgJiYgdGhpcy5zZXR0aW5ncy5hbGxSb290SXRlbXMgPT0gZmFsc2UpKXtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0Ly9cdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTg5ODFcdTdEMjBcdTkwRThcdTUyMDZcdTRGNUNcdTYyMTBcclxuXHRcdFx0Y29uc3Qgb3V0bGluZUVsOiBIVE1MRWxlbWVudCA9IHBhcmVudEVsLmNyZWF0ZURpdihcInRyZWUtaXRlbSBuYXYtZmlsZVwiKTtcclxuXHRcdFx0Ly9cdTRFMkRcdThFQUJcdTMwOTJcdThBMkRcdTVCOUFcclxuXHRcdFx0Y29uc3Qgb3V0bGluZVRpdGxlOiBIVE1MRWxlbWVudCA9IG91dGxpbmVFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0tc2VsZiBpcy1jbGlja2FibGUgbmF2LWZpbGUtdGl0bGVcIik7XHJcblxyXG5cclxuXHRcdFx0Ly9cdTMwQTJcdTMwQTRcdTMwQjNcdTMwRjMgaWNvblxyXG5cdFx0XHRzd2l0Y2godGhpcy5zZXR0aW5ncy5pY29uW2VsZW1lbnRdKXtcclxuXHRcdFx0XHRjYXNlICdub25lJzpcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2hlYWRpbmd3aXRobnVtYmVyJzpcclxuXHRcdFx0XHRcdHNldEljb24ob3V0bGluZVRpdGxlLCBgaGVhZGluZy0ke2RhdGFbal0ubGV2ZWx9YCk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdjdXN0b20nOlxyXG5cdFx0XHRcdFx0c2V0SWNvbihvdXRsaW5lVGl0bGUsIHRoaXMuc2V0dGluZ3MuY3VzdG9tSWNvbltlbGVtZW50XSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0c2V0SWNvbihvdXRsaW5lVGl0bGUsIHRoaXMuc2V0dGluZ3MuaWNvbltlbGVtZW50XSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gXHUzMEJGXHUzMEI5XHUzMEFGXHUzMDYwXHUzMDYzXHUzMDVGXHU1ODM0XHU1NDA4XHUzMEEyXHUzMEE0XHUzMEIzXHUzMEYzXHU0RTBBXHU2NkY4XHUzMDREXHJcblx0XHRcdGlmIChlbGVtZW50ID09J2xpc3RJdGVtcycgJiYgZGF0YVtqXS50YXNrICE9PSB2b2lkIDApe1xyXG5cdFx0XHRcdGlmIChkYXRhW2pdLnRhc2sgPT0gJ3gnKXtcclxuXHRcdFx0XHRcdHNldEljb24ob3V0bGluZVRpdGxlLCB0aGlzLnNldHRpbmdzLmljb24udGFza0RvbmUgPT0gJ2N1c3RvbScgPyBcclxuXHRcdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5jdXN0b21JY29uLnRhc2tEb25lIDogdGhpcy5zZXR0aW5ncy5pY29uLnRhc2tEb25lKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c2V0SWNvbihvdXRsaW5lVGl0bGUsIHRoaXMuc2V0dGluZ3MuaWNvbi50YXNrID09J2N1c3RvbScgP1xyXG5cdFx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmN1c3RvbUljb24udGFzayA6IHRoaXMuc2V0dGluZ3MuaWNvbi50YXNrKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vcHJlZml4XHJcblx0XHRcdGxldCBwcmVmaXggPSB0aGlzLnNldHRpbmdzLnByZWZpeFtlbGVtZW50XTtcclxuXHRcdFx0aWYgKCBlbGVtZW50ID09ICdoZWFkaW5nJyl7XHJcblx0XHRcdFx0c3dpdGNoICh0aGlzLnNldHRpbmdzLnJlcGVhdEhlYWRpbmdQcmVmaXgpe1xyXG5cdFx0XHRcdFx0Y2FzZSAnbGV2ZWwnOlxyXG5cdFx0XHRcdFx0XHRwcmVmaXggPSBwcmVmaXgucmVwZWF0KGRhdGFbal0ubGV2ZWwpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ2xldmVsbWludXMxJzpcclxuXHRcdFx0XHRcdFx0cHJlZml4ID0gcHJlZml4LnJlcGVhdChkYXRhW2pdLmxldmVsIC0gMSApO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFx1MzBBNFx1MzBGM1x1MzBDN1x1MzBGM1x1MzBDOFxyXG5cdFx0XHRsZXQgaW5kZW50OiBudW1iZXIgPSAwLjU7XHJcblx0XHRcdC8vXHU4OThCXHU1MUZBXHUzMDU3XHUzMDZFXHUzMEE0XHUzMEYzXHUzMEM3XHUzMEYzXHUzMEM4XHJcblx0XHRcdGlmIChlbGVtZW50ID09ICdoZWFkaW5nJyAmJiB0aGlzLnNldHRpbmdzLmluZGVudC5oZWFkaW5nID09IHRydWUpIHtcclxuXHRcdFx0XHRpbmRlbnQgPSBpbmRlbnQgKyAoZGF0YVtqXS5sZXZlbCAtICh0aGlzLm1heExldmVsICsgMSkpKjEuNTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBcdTg5OEJcdTUxRkFcdTMwNTdcdTRFRTVcdTU5MTZcdTMwNkVcdTMwQTRcdTMwRjNcdTMwQzdcdTMwRjNcdTMwQzhcclxuXHRcdFx0aWYgKGVsZW1lbnQgIT0naGVhZGluZycgJiYgdGhpcy5zZXR0aW5ncy5pbmRlbnRGb2xsb3dIZWFkaW5nKXtcclxuXHRcdFx0XHRjb25zdCBhZGRpdGlvbmFsSW5kZW50ID0gKGxhdGVzdEhlYWRpbmdMZXZlbCAtICh0aGlzLm1heExldmVsICsgMSkgKyAodGhpcy5zZXR0aW5ncy5pbmRlbnRGb2xsb3dIZWFkaW5nID09IDIgPyAxOiAwKSkqMS41O1xyXG5cdFx0XHRcdGluZGVudCA9IGluZGVudCArIChhZGRpdGlvbmFsSW5kZW50ID4gMCA/IGFkZGl0aW9uYWxJbmRlbnQgOiAwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBcdTMwRUFcdTMwRjNcdTMwQUZcdTMwNENcdTUyNERcdTMwNkVcdTMwQThcdTMwRUNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwNjhcdTU0MENcdTMwNThcdTg4NENcdTMwNjBcdTMwNjNcdTMwNUZcdTU4MzRcdTU0MDhcdTMwQTRcdTMwRjNcdTMwQzdcdTMwRjNcdTMwQzhcdTRFRDhcdTUyQTBcclxuXHRcdFx0aWYgKGVsZW1lbnQgPT0nbGluaycgJiYgZGF0YVtqXS5wb3NpdGlvbi5zdGFydC5saW5lID09IGRhdGFbai0xXT8ucG9zaXRpb24uc3RhcnQubGluZSl7XHJcblx0XHRcdFx0aW5kZW50ID0gaW5kZW50ICsgMS41O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRvdXRsaW5lVGl0bGUuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHtpbmRlbnR9ZW1gO1xyXG5cclxuXHRcdFx0aWYgKGVsZW1lbnQgPT0nbGlzdEl0ZW1zJyAmJiBkYXRhW2pdLnRhc2sgIT09IHZvaWQgMCkge1xyXG5cdFx0XHRcdFx0cHJlZml4ID0gZGF0YVtqXS50YXNrID09ICd4JyA/IFxyXG5cdFx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLnByZWZpeC50YXNrRG9uZSA6IHRoaXMuc2V0dGluZ3MucHJlZml4LnRhc2s7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5hZGRDaGVja2JveFRleHQpe1xyXG5cdFx0XHRcdFx0XHRwcmVmaXggPSBwcmVmaXggKyAnWycrZGF0YVtqXS50YXNrKyddICc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdG91dGxpbmVUaXRsZS5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0taW5uZXIgbmF2LWZpbGUtdGl0bGUtY29udGVudFwiKS5zZXRUZXh0KHByZWZpeCArIGRhdGFbal0uZGlzcGxheVRleHQpO1xyXG5cclxuXHJcblx0XHRcdC8vIFx1MzBBNFx1MzBGM1x1MzBFOVx1MzBBNFx1MzBGM1x1MzBEN1x1MzBFQ1x1MzBEM1x1MzBFNVx1MzBGQ1xyXG5cdFx0XHQvLyBcdTMwRUFcdTMwRjNcdTMwQUZcdTMwNjhcdTMwQkZcdTMwQjBcdTMwNkZcdTMwMDFcdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTg5ODFcdTdEMjBcdTMwNkVcdTMwNDJcdTMwNjhcdTMwNkJcdTY1ODdcdTVCNTdcdTUyMTdcdTMwNENcdTdEOUFcdTMwNEZcdTU4MzRcdTU0MDhcdTMwNURcdTMwNkVcdTg4NENcdTMwOTJcdTMwRDdcdTMwRUNcdTMwRDNcdTMwRTVcdTMwRkNcdTMwMDFcdTMwNURcdTMwNDZcdTMwNjdcdTMwNkFcdTMwNTFcdTMwOENcdTMwNzBcdTZCMjFcdTMwNkVcdTg4NENcdTMwOTJcdTMwRDdcdTMwRUNcdTMwRDNcdTMwRTVcdTMwRkNcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaW5saW5lUHJldmlldykge1xyXG5cdFx0XHRcdGxldCBwcmV2aWV3VGV4dDogc3RyaW5nID0nJztcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAoKGVsZW1lbnQgPT0gJ2xpbmsnIHx8IGVsZW1lbnQgPT0gJ3RhZycpICYmIGRhdGFbal0ucG9zaXRpb24uZW5kLmNvbCA8IGluZm8ubGluZXNbIGRhdGFbal0ucG9zaXRpb24uc3RhcnQubGluZSBdLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRwcmV2aWV3VGV4dCA9IGluZm8ubGluZXNbIGRhdGFbal0ucG9zaXRpb24uc3RhcnQubGluZSBdLnNsaWNlKGRhdGFbal0ucG9zaXRpb24uZW5kLmNvbCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHByZXZpZXdUZXh0ID0gKCBkYXRhW2pdLnBvc2l0aW9uLnN0YXJ0LmxpbmUgPCBpbmZvLm51bU9mTGluZXMgLTEgKT9cclxuXHRcdFx0XHRcdFx0aW5mby5saW5lc1sgZGF0YVtqXS5wb3NpdGlvbi5zdGFydC5saW5lICsgMV0gOiBcIlwiOyBcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0b3V0bGluZVRpdGxlLmNyZWF0ZURpdihcIm5hdi1maWxlLXRpdGxlLXByZXZpZXdcIikuc2V0VGV4dChwcmV2aWV3VGV4dCk7XHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHQvLyBcdTMwQzRcdTMwRkNcdTMwRUJcdTMwQzFcdTMwQzNcdTMwRDdcdTMwRDdcdTMwRUNcdTMwRDNcdTMwRTVcdTMwRkNcclxuXHRcdFx0Ly8gXHUzMDVEXHUzMDZFXHU4OTgxXHU3RDIwXHUzMDZFXHU4ODRDXHUzMDRCXHUzMDg5XHU2QjIxXHUzMDZFXHU4OTgxXHU3RDIwXHUzMDZFXHU1MjREXHUzMDdFXHUzMDY3XHUzMDkyXHUzMEQ3XHUzMEVDXHUzMEQzXHUzMEU1XHUzMEZDXHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3KXtcclxuXHRcdFx0XHRsZXQgcHJldmlld1RleHQyOnN0cmluZyA9Jyc7XHJcblx0XHRcdFx0Ly8gXHUzMDdFXHUzMDVBXHU2QjIxXHUzMDZFXHU4ODY4XHU3OTNBXHU4OTgxXHU3RDIwXHUzMDZFXHU1RjE1XHU2NTcwXHUzMDkyXHU3Mjc5XHU1QjlBXHJcblx0XHRcdFx0bGV0IGVuZExpbmU6bnVtYmVyID0gaW5mby5udW1PZkxpbmVzIC0gMTsgIC8vXHU1MjFEXHU2NzFGXHU1MDI0XHUzMDZGXHU2NTg3XHU3QUUwXHU2NzJCXHJcblx0XHRcdFx0bGV0IGsgPSBqICsxOyAvLyBcdTczRkVcdTU3MjhcdTMwNkVcdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTVGMTVcdTY1NzArMVx1MzA0Qlx1MzA4OVx1MzBFQlx1MzBGQ1x1MzBEN1x1OTU4Qlx1NTlDQlxyXG5cdFx0XHRcdGVuZHByZXZpZXdsb29wOiB3aGlsZSAoazwgZGF0YS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdC8vXHU4ODY4XHU3OTNBXHUzMDU5XHUzMDhCXHUzMEE4XHUzMEVDXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEJGXHUzMEE0XHUzMEQ3XHUzMDY3XHUzMDQyXHUzMDhDXHUzMDcwXHU4ODRDXHUzMDkyXHU1M0Q2XHU1Rjk3XHUzMDU3XHUzMDY2XHUzMEVCXHUzMEZDXHUzMEQ3XHUzMDkyXHU2MjUzXHUzMDYxXHU1MjA3XHUzMDhCXHJcblx0XHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5zaG93RWxlbWVudHNbZGF0YVtrXS50eXBlT2ZFbGVtZW50XSl7XHJcblx0XHRcdFx0XHRcdC8vXHUzMDVGXHUzMDYwXHUzMDU3XHU1NDA0XHU3QTJFXHUzMDZFXHU1QjlGXHU5NjlCXHUzMDZCXHUzMDZGXHU5NzVFXHU4ODY4XHU3OTNBXHUzMDY4XHUzMDZBXHUzMDhCXHU2NzYxXHU0RUY2XHUzMDkyXHU2RTgwXHUzMDVGXHUzMDU3XHUzMDY2XHUzMDQ0XHUzMDVGXHUzMDg5XHU2MjUzXHUzMDYxXHU1MjA3XHUzMDg5XHUzMDZBXHUzMDQ0XHJcblx0XHRcdFx0XHRcdC8vIFx1MzBFQVx1MzBCOVx1MzBDOFx1MzA2RVx1OEEyRFx1NUI5QVx1MzA2Qlx1MzA4OFx1MzA4Qlx1OTc1RVx1ODg2OFx1NzkzQVxyXG5cdFx0XHRcdFx0XHRpZiAoZGF0YVtrXS50eXBlT2ZFbGVtZW50ID09ICdsaXN0SXRlbXMnICYmIFxyXG5cdFx0XHRcdFx0XHRcdFx0KCBkYXRhW2tdLmxldmVsID49MiB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KCh0aGlzLnNldHRpbmdzLmFsbFJvb3RJdGVtcyA9PSBmYWxzZSAmJiBkYXRhW2tdLmxldmVsID09IDEpICYmICh0aGlzLnNldHRpbmdzLmFsbFRhc2tzID09IGZhbHNlIHx8IGRhdGFba10udGFzayA9PT0gdm9pZCAwKSkgfHxcclxuXHRcdFx0XHRcdFx0XHRcdCh0aGlzLnNldHRpbmdzLnRhc2tPbmx5ICYmIGRhdGFba10udGFzayA9PT0gdm9pZCAwKSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0KHRoaXMuc2V0dGluZ3MuaGlkZUNvbXBsZXRlZFRhc2tzICYmIGRhdGFba10udGFzayA9PSAneCcpKSl7XHJcblx0XHRcdFx0XHRcdFx0aysrO1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHQvLyBcdTg5OEJcdTUxRkFcdTMwNTdcdTMwNkVcdTMwRUNcdTMwRDlcdTMwRUJcdTMwNkJcdTMwODhcdTMwOEJcdTk3NUVcdTg4NjhcdTc5M0FcclxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChkYXRhW2tdLnR5cGVPZkVsZW1lbnQgPT0gJ2hlYWRpbmcnICYmXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5oZWFkaW5nTGV2ZWxbZGF0YVtrXS5sZXZlbCAtIDFdID09IGZhbHNlKXtcclxuXHRcdFx0XHRcdFx0XHRrKys7XHJcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdC8vIHNpbXBsZSBmaWx0ZXJcdTMwNkJcdTMwODhcdTMwOEJcdTk3NUVcdTg4NjhcdTc5M0FcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuc2V0dGluZ3Mud29yZHNUb0lnbm9yZVtkYXRhW2tdLnR5cGVPZkVsZW1lbnRdKXtcclxuXHRcdFx0XHRcdFx0XHRcdGlmKCAodmFsdWUpICYmIGRhdGFba10uZGlzcGxheVRleHQuaW5jbHVkZXModmFsdWUpKXtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aysrO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb250aW51ZSBlbmRwcmV2aWV3bG9vcDtcclxuXHRcdFx0XHRcdFx0XHRcdH0gXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGVuZExpbmUgPSBkYXRhW2tdLnBvc2l0aW9uLnN0YXJ0LmxpbmUgLTE7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGsrKztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Zm9yIChsZXQgbCA9IGRhdGFbal0ucG9zaXRpb24uc3RhcnQubGluZTsgbCA8PSBlbmRMaW5lOyBsKyspe1xyXG5cdFx0XHRcdFx0cHJldmlld1RleHQyID0gcHJldmlld1RleHQyICsgaW5mby5saW5lc1tsXSArJ1xcbic7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIFx1N0E3QVx1ODg0Q1x1MzA5Mlx1OTY2NFx1NTNCQlxyXG5cdFx0XHRcdHByZXZpZXdUZXh0MiA9IHByZXZpZXdUZXh0Mi5yZXBsYWNlKC9cXG4kfFxcbig/PVxcbikvZywnJyk7XHJcblx0XHRcdFx0c2V0VG9vbHRpcChvdXRsaW5lVGl0bGUsIHByZXZpZXdUZXh0Miwge2NsYXNzZXM6WydkYWlseS1ub3RlLXByZXZpZXcnXX0pO1xyXG5cclxuXHRcdFx0XHRvdXRsaW5lVGl0bGUuZGF0YXNldC50b29sdGlwUG9zaXRpb24gPSB0aGlzLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3RGlyZWN0aW9uO1xyXG5cdFx0XHRcdG91dGxpbmVUaXRsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9vbHRpcC1kZWxheScsJzEwJyk7XHJcblx0XHRcdFx0Ly8gb3V0bGluZVRpdGxlLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbC1jbGFzc2VzJywnZGFpbHktbm90ZS1wcmV2aWV3Jyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vXHUzMEFGXHUzMEVBXHUzMEMzXHUzMEFGXHU2NjQyXHJcblx0XHRcdG91dGxpbmVUaXRsZS5hZGRFdmVudExpc3RlbmVyKFxyXG5cdFx0XHRcdFwiY2xpY2tcIixcclxuXHRcdFx0XHRhc3luYyhldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoKS5vcGVuRmlsZShmaWxlKTtcclxuXHRcdFx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cclxuXHRcdFx0XHRcdGlmICh2aWV3KSB7XHJcblx0XHRcdFx0XHRcdHZpZXcuZWRpdG9yLmZvY3VzKCk7XHJcblxyXG5cdFx0XHRcdFx0XHR2aWV3LmVkaXRvci5zZXRDdXJzb3IgKGRhdGFbal0ucG9zaXRpb24uc3RhcnQubGluZSwgZGF0YVtqXS5wb3NpdGlvbi5zdGFydC5jb2wpO1xyXG5cdFx0XHRcdFx0XHR2aWV3LmVkaXRvci5zY3JvbGxJbnRvVmlldygge1xyXG5cdFx0XHRcdFx0XHRcdGZyb206IHtcclxuXHRcdFx0XHRcdFx0XHRcdGxpbmU6IGRhdGFbal0ucG9zaXRpb24uc3RhcnQubGluZSxcclxuXHRcdFx0XHRcdFx0XHRcdGNoOjBcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdHRvOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRsaW5lOiBkYXRhW2pdLnBvc2l0aW9uLnN0YXJ0LmxpbmUsXHJcblx0XHRcdFx0XHRcdFx0XHRjaDowXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9LCB0cnVlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGZhbHNlXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHQvL2hvdmVyIHByZXZpZXcgXHJcblx0XHRcdG91dGxpbmVUaXRsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHQvLyBcdTMwRUFcdTMwRjNcdTMwQUZcdTMwQThcdTMwRUNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwNjdcdTMwRUFcdTMwRjNcdTMwQUZcdTUxNDhcdTMwNENcdTVCNThcdTU3MjhcdTMwNTlcdTMwOEJcdTMwNjhcdTMwNERcdTMwNkZcdTMwNURcdTMwNjFcdTMwODlcdTMwOTJcdTMwRDdcdTMwRUNcdTMwRDNcdTMwRTVcdTMwRkNcclxuXHRcdFx0XHRpZiAoZWxlbWVudCA9PSAnbGluaycgJiYgbGlua1RhcmdldCl7XHJcblx0XHRcdFx0XHQvL1x1MzBFQVx1MzBGM1x1MzBBRlx1NjBDNVx1NTgzMVx1MzA2QnN1YnBhdGhcdUZGMDhcdTg5OEJcdTUxRkFcdTMwNTdcdTMwNzhcdTMwNkVcdTMwRUFcdTMwRjNcdTMwQUZcdUZGMDlcdTMwNENcdTU0MkJcdTMwN0VcdTMwOENcdTMwOEJcdTU4MzRcdTU0MDhcdTMwMDFcdTMwNURcdTMwNkVcdTRGNERcdTdGNkVcdTMwOTJcdTUzRDZcdTVGOTdcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0bGV0IHBvc0luZm8gPSB7fTtcclxuXHRcdFx0XHRcdGlmIChsaW5rU3VicGF0aCl7XHJcblx0XHRcdFx0XHRcdGNvbnN0IHN1YnBhdGhQb3NpdGlvbiA9IGdldFN1YnBhdGhQb3NpdGlvbih0aGlzLmFwcCwgbGlua1RhcmdldCwgbGlua1N1YnBhdGgpO1xyXG5cdFx0XHRcdFx0XHRpZiAoc3VicGF0aFBvc2l0aW9uPy5zdGFydD8ubGluZSl7XHJcblx0XHRcdFx0XHRcdFx0cG9zSW5mbyA9IHsgc2Nyb2xsOiBzdWJwYXRoUG9zaXRpb24uc3RhcnQubGluZX07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKCdob3Zlci1saW5rJywge1xyXG5cdFx0XHRcdFx0XHRldmVudCxcclxuXHRcdFx0XHRcdFx0c291cmNlOiBNdWx0aXBsZU5vdGVzT3V0bGluZVZpZXdUeXBlLFxyXG5cdFx0XHRcdFx0XHRob3ZlclBhcmVudDogcGFyZW50RWwsICAgLy8gcm9vdEVsXHUyMTkycGFyZW50RWxcdTMwNkJcdTMwNTdcdTMwNUZcclxuXHRcdFx0XHRcdFx0dGFyZ2V0RWw6IG91dGxpbmVUaXRsZSxcclxuXHRcdFx0XHRcdFx0bGlua3RleHQ6IGxpbmtUYXJnZXQucGF0aCxcclxuXHRcdFx0XHRcdFx0Ly9zdGF0ZTp7c2Nyb2xsOiBkYXRhW2pdLnBvc2l0aW9uLnN0YXJ0LmxpbmV9XHJcblx0XHRcdFx0XHRcdHN0YXRlOiBwb3NJbmZvXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoJ2hvdmVyLWxpbmsnLCB7XHJcblx0XHRcdFx0XHRcdGV2ZW50LFxyXG5cdFx0XHRcdFx0XHRzb3VyY2U6IE11bHRpcGxlTm90ZXNPdXRsaW5lVmlld1R5cGUsXHJcblx0XHRcdFx0XHRcdGhvdmVyUGFyZW50OiBwYXJlbnRFbCwgICAvLyByb290RWxcdTIxOTJwYXJlbnRFbFx1MzA2Qlx1MzA1N1x1MzA1RlxyXG5cdFx0XHRcdFx0XHR0YXJnZXRFbDogb3V0bGluZVRpdGxlLFxyXG5cdFx0XHRcdFx0XHRsaW5rdGV4dDogZmlsZS5wYXRoLFxyXG5cdFx0XHRcdFx0XHRzdGF0ZTp7c2Nyb2xsOiBkYXRhW2pdLnBvc2l0aW9uLnN0YXJ0LmxpbmV9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0Ly8gY29udGV4dG1lbnVcclxuXHRcdFx0b3V0bGluZVRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoXHJcblx0XHRcdFx0XCJjb250ZXh0bWVudVwiLFxyXG5cdFx0XHRcdChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3QgbWVudSA9IG5ldyBNZW51KCk7XHJcblxyXG5cdFx0XHRcdFx0Ly9cdTYyQkRcdTUxRkEgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0XHRcdFx0XHQvLyBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XHJcblx0XHRcdFx0XHQvLyBcdGl0ZW1cclxuXHRcdFx0XHRcdC8vIFx0XHQuc2V0VGl0bGUoXCJFeHRyYWN0XCIpXHJcblx0XHRcdFx0XHQvLyBcdFx0LnNldEljb24oXCJzZWFyY2hcIilcclxuXHRcdFx0XHRcdC8vIFx0XHQub25DbGljayhhc3luYyAoKT0+e1xyXG5cdFx0XHRcdFx0Ly8gXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0V4dHJhY3QgPSBkYXRhW2pdLmRpc3BsYXlUZXh0O1xyXG5cdFx0XHRcdFx0Ly8gXHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHQvLyBcdFx0XHR0aGlzLmV4dHJhY3RNb2RlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdC8vIFx0XHRcdHRoaXMuZXh0cmFjdFRhc2sgPSBmYWxzZTtcclxuXHRcdFx0XHRcdC8vIFx0XHRcdHRoaXMucmVmcmVzaFZpZXcoZmFsc2UsZmFsc2UpO1xyXG5cdFx0XHRcdFx0Ly8gXHRcdH0pXHJcblx0XHRcdFx0XHQvLyApO1xyXG5cdFx0XHRcdFx0Ly8gbWVudS5hZGRTZXBhcmF0b3IoKTtcclxuXHJcblxyXG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQgPT0nbGluaycpe1xyXG5cdFx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJPcGVuIGxpbmtlZCBmaWxlXCIpXHJcblx0XHRcdFx0XHRcdFx0XHQuc2V0SWNvbihcImxpbmtzLWdvaW5nLW91dFwiKVxyXG5cdFx0XHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMoKT0+e1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGxpbmtUYXJnZXQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAobGlua1N1YnBhdGgpe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHN1YnBhdGhQb3NpdGlvbiA9IGdldFN1YnBhdGhQb3NpdGlvbih0aGlzLmFwcCwgbGlua1RhcmdldCwgbGlua1N1YnBhdGgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAodmlldyAmJiBzdWJwYXRoUG9zaXRpb24pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHZpZXcuZWRpdG9yLmZvY3VzKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2aWV3LmVkaXRvci5zZXRDdXJzb3IgKHN1YnBhdGhQb3NpdGlvbi5zdGFydD8ubGluZSwgMCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2aWV3LmVkaXRvci5zY3JvbGxJbnRvVmlldygge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRmcm9tOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGluZTogc3VicGF0aFBvc2l0aW9uLnN0YXJ0Py5saW5lLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNoOjBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dG86IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsaW5lOiBzdWJwYXRoUG9zaXRpb24uc3RhcnQ/LmxpbmUsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2g6MFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9LCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHJcblxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdG1lbnUuYWRkU2VwYXJhdG9yKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQgPT0ndGFnJyl7XHJcblx0XHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG5cdFx0XHRcdFx0XHRcdGl0ZW1cclxuXHRcdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIlNlYXJjaCB0aGlzIHRhZ1wiKVxyXG5cdFx0XHRcdFx0XHRcdFx0LnNldEljb24oXCJzZWFyY2hcIilcclxuXHRcdFx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jKCk9PntcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3Qgc2VhcmNoU3RyaW5nID0gXCJ0YWc6ICNcIisgZGF0YVtqXS5kaXNwbGF5VGV4dDtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5hcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJnbG9iYWwtc2VhcmNoXCJdPy5pbnN0YW5jZS5vcGVuR2xvYmFsU2VhcmNoKHNlYXJjaFN0cmluZyk7XHJcblx0XHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRtZW51LmFkZFNlcGFyYXRvcigpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vXHU2NUIwXHU4OThGXHUzMEJGXHUzMEQ2XHUzMDZCXHU5NThCXHUzMDRGXHJcblx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk9wZW4gaW4gbmV3IHRhYlwiKVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRJY29uKFwiZmlsZS1wbHVzXCIpXHJcblx0XHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpLm9wZW5GaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0c2Nyb2xsVG9FbGVtZW50KGRhdGFbal0ucG9zaXRpb24uc3RhcnQubGluZSwgZGF0YVtqXS5wb3NpdGlvbi5zdGFydC5jb2wsIHRoaXMuYXBwKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHQvL1x1NTNGM1x1MzA2Qlx1OTU4Qlx1MzA0RlxyXG5cdFx0XHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKT0+XHJcblx0XHRcdFx0XHRcdGl0ZW1cclxuXHRcdFx0XHRcdFx0XHQuc2V0VGl0bGUoXCJPcGVuIHRvIHRoZSByaWdodFwiKVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRJY29uKFwic2VwYXJhdG9yLXZlcnRpY2FsXCIpXHJcblx0XHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3NwbGl0Jykub3BlbkZpbGUoZmlsZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRzY3JvbGxUb0VsZW1lbnQoZGF0YVtqXS5wb3NpdGlvbi5zdGFydC5saW5lLCBkYXRhW2pdLnBvc2l0aW9uLnN0YXJ0LmNvbCwgdGhpcy5hcHApO1xyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0Ly9cdTY1QjBcdTg5OEZcdTMwQTZcdTMwQTNcdTMwRjNcdTMwQzlcdTMwQTZcdTMwNkJcdTk1OEJcdTMwNEZcclxuXHRcdFx0XHRcdG1lbnUuYWRkSXRlbSgoaXRlbSk9PlxyXG5cdFx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRcdFx0LnNldFRpdGxlKFwiT3BlbiBpbiBuZXcgd2luZG93XCIpXHJcblx0XHRcdFx0XHRcdFx0LnNldEljb24oXCJzY2FuXCIpXHJcblx0XHRcdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3dpbmRvdycpLm9wZW5GaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gb3BlbiBpbiBuZXcgd2luZG93XHUzMDZGZ2V0TGVhZignd2luZG93Jykub3BlbkZpbGUoZmlsZSlcdTMwNjdcdTMwODRcdTMwOEJcdTMwODhcdTMwOEFcclxuXHRcdFx0XHRcdFx0XHRcdC8vIG9wZW5Qb3BvdXRMZWFmKHtzaXplOnt9fSkub3BlbkZpbGUoZmlsZSlcdTMwNkVcdTY1QjlcdTMwNENcdTMwQjNcdTMwRjNcdTMwRDFcdTMwQUZcdTMwQzhcdUZGMUZcdTg5ODFcdThBQkZcdTY3RkJcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLmFwcC53b3Jrc3BhY2UuZmxvYXRpbmdTcGxpdClcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5vcGVuUG9wb3V0TGVhZih7c2l6ZTp7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBcdHdpZHRoOiAyMDAsIGhlaWdodDogMjAwXHJcblx0XHRcdFx0XHRcdFx0XHQvLyB9fSkub3BlbkZpbGUoZmlsZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRzY3JvbGxUb0VsZW1lbnQoZGF0YVtqXS5wb3NpdGlvbi5zdGFydC5saW5lLCBkYXRhW2pdLnBvc2l0aW9uLnN0YXJ0LmNvbCwgdGhpcy5hcHApO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyh0aGlzLmFwcC53b3Jrc3BhY2UuZmxvYXRpbmdTcGxpdCk7XHJcblx0XHRcdFx0XHRcdFx0XHQvL3JlcXVpcmUoXCJlbGVjdHJvblwiKS5yZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLnNldEFsd2F5c09uVG9wKHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdH1cclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly9cdTg5ODFcdTdEMjAwXHUzMDYwXHUzMDYzXHUzMDVGXHUzMDY4XHUzMDREXHUzMDZFXHU1MUU2XHU3NDA2XHJcblx0XHQvL1x1NTQwNFx1ODg0Q1x1MzA5Mlx1MzBDMVx1MzBBN1x1MzBDM1x1MzBBRlx1MzA1N1x1MzAwMVx1N0E3QVx1ODg0Q1x1MzA2N1x1MzA2QVx1MzA0NFx1NTIxRFx1MzA4MVx1MzA2RVx1ODg0Q1x1MzA5Mlx1ODg2OFx1NzkzQVx1MzA1OVx1MzA4QihcdTYyQkRcdTUxRkFcdTMwRTJcdTMwRkNcdTMwQzlcdTMwNjdcdTMwNkZcdTg4NENcdTMwOEZcdTMwNkFcdTMwNDQpXHJcblx0XHQvL2lmICh0aGlzLmV4dHJhY3RNb2RlID09IGZhbHNlKXsgICAgICAgLy9maWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuXHRcdGlmICh0cnVlKXtcclxuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBpbmZvLmxpbmVzLmxlbmd0aDsgaisrKXtcclxuXHJcblx0XHRcdFx0aWYgKGluZm8ubGluZXNbal0gPT0gXCJcIil7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29uc3Qgb3V0bGluZUVsOiBIVE1MRWxlbWVudCA9IHBhcmVudEVsXHJcblx0XHRcdFx0XHRcdFx0LmNyZWF0ZURpdihcInRyZWUtaXRlbSBuYXYtZmlsZVwiKTtcclxuXHRcdFx0XHRcdGNvbnN0IG91dGxpbmVUaXRsZTogSFRNTEVsZW1lbnQgPSBvdXRsaW5lRWwuY3JlYXRlRGl2KFwidHJlZS1pdGVtLXNlbGYgaXMtY2xpY2thYmxlIG5hdi1maWxlLXRpdGxlXCIpO1xyXG5cdFx0XHRcdFx0b3V0bGluZVRpdGxlLmNyZWF0ZURpdihcInRyZWUtaXRlbS1pbm5lciBuYXYtZmlsZS10aXRsZS1jb250ZW50XCIpLnNldFRleHQoaW5mby5saW5lc1tqXSk7XHJcblx0XHRcdFx0XHRvdXRsaW5lVGl0bGUuYWRkRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XHRcdFx0XCJjbGlja1wiLFxyXG5cdFx0XHRcdFx0XHRhc3luYyhldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChmaWxlICE9IHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmhvbGRVcGRhdGVPbmNlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGZpbGUpO1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRmYWxzZVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHJcblx0fVxyXG5cdC8vIG1haW5cdTRFRTVcdTU5MTZcdTMwNkVcdTU4MzRcdTU0MDhcdTMwMDFiYWNrbGluayBmaWxlc1x1MzA2RVx1NTFFNlx1NzQwNlxyXG5cdGlmIChjYXRlZ29yeSA9PSdtYWluJyB8fCB0aGlzLnNldHRpbmdzLnNob3dCYWNrbGlua3MgPT0gZmFsc2UgfHwgIWluZm8uYmFja2xpbmtzKXtcclxuXHRcdHJldHVybjtcclxuXHR9XHRcdFxyXG5cdGJhY2tsaW5rZmlsZWxvb3A6IGZvciAobGV0IGkgPSAwOyBpIDwgaW5mby5iYWNrbGlua3M/Lmxlbmd0aDsgaSsrKXtcclxuXHJcblx0XHQvLyB0YXJnZXRGaWxlc1x1MzA2Qlx1NTQyQlx1MzA3RVx1MzA4Q1x1MzA2Nlx1MzA0NFx1MzA4Q1x1MzA3MFx1OTY2NFx1NTkxNlx1MzA1OVx1MzA4QlxyXG5cclxuXHRcdGZvciAoY29uc3QgdGFyZ2V0Q2F0ZWdvcnkgaW4gdGhpcy50YXJnZXRGaWxlcyl7XHJcblx0XHRcdGlmICh0aGlzLnRhcmdldEZpbGVzW3RhcmdldENhdGVnb3J5XS5pbmNsdWRlcyhpbmZvLmJhY2tsaW5rc1tpXSkpe1xyXG5cdFx0XHRcdGNvbnRpbnVlIGJhY2tsaW5rZmlsZWxvb3A7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBvdXRsaW5lRWw6IEhUTUxFbGVtZW50ID0gcGFyZW50RWwuY3JlYXRlRGl2KFwidHJlZS1pdGVtIG5hdi1maWxlXCIpO1xyXG5cdFx0Y29uc3Qgb3V0bGluZVRpdGxlOiBIVE1MRWxlbWVudCA9IG91dGxpbmVFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0tc2VsZiBpcy1jbGlja2FibGUgbmF2LWZpbGUtdGl0bGVcIik7XHJcblx0XHRzZXRJY29uKG91dGxpbmVUaXRsZSwnbGlua3MtY29taW5nLWluJyk7XHJcblxyXG5cdFx0b3V0bGluZVRpdGxlLnN0eWxlLnBhZGRpbmdMZWZ0ID0nMC41ZW0nO1xyXG5cdFx0b3V0bGluZVRpdGxlLmNyZWF0ZURpdihcInRyZWUtaXRlbS1pbm5lciBuYXYtZmlsZS10aXRsZS1jb250ZW50XCIpLnNldFRleHQoaW5mby5iYWNrbGlua3NbaV0uYmFzZW5hbWUpO1xyXG5cclxuXHRcclxuXHRcdC8vXHUzMEFGXHUzMEVBXHUzMEMzXHUzMEFGXHU2NjQyXHJcblx0XHRvdXRsaW5lVGl0bGUuYWRkRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XCJjbGlja1wiLFxyXG5cdFx0XHRhc3luYyhldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0aWYgKGZpbGUgIT0gdGhpcy5hY3RpdmVGaWxlKXtcclxuXHRcdFx0XHRcdHRoaXMuaG9sZFVwZGF0ZU9uY2UgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGluZm8uYmFja2xpbmtzW2ldKTtcclxuXHRcdFx0XHRjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZmFsc2VcclxuXHRcdCk7XHJcblxyXG5cdFx0Ly9ob3ZlciBwcmV2aWV3IFxyXG5cdFx0b3V0bGluZVRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UudHJpZ2dlcignaG92ZXItbGluaycsIHtcclxuXHRcdFx0XHRldmVudCxcclxuXHRcdFx0XHRzb3VyY2U6IE11bHRpcGxlTm90ZXNPdXRsaW5lVmlld1R5cGUsXHJcblx0XHRcdFx0aG92ZXJQYXJlbnQ6IHBhcmVudEVsLCAgIC8vIHJvb3RFbFx1MjE5MnBhcmVudEVsXHUzMDZCXHUzMDU3XHUzMDVGXHJcblx0XHRcdFx0dGFyZ2V0RWw6IG91dGxpbmVUaXRsZSxcclxuXHRcdFx0XHRsaW5rdGV4dDogaW5mby5iYWNrbGlua3NbaV0ucGF0aCxcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcclxuXHR9XHJcblx0XHRcclxufVxyXG5cclxuXHJcbi8vIFx1MzBCOVx1MzBBRlx1MzBFRFx1MzBGQ1x1MzBFQlxyXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsVG9FbGVtZW50KGxpbmU6IG51bWJlciwgY29sOiBudW1iZXIsIGFwcDogQXBwKTogdm9pZCB7XHJcbiAgICBjb25zdCB2aWV3ID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgICBpZiAodmlldykge1xyXG4gICAgICAgIHZpZXcuZWRpdG9yLmZvY3VzKCk7XHJcbiAgICAgICAgdmlldy5lZGl0b3Iuc2V0Q3Vyc29yIChsaW5lLCBjb2wpO1xyXG4gICAgICAgIHZpZXcuZWRpdG9yLnNjcm9sbEludG9WaWV3KCB7XHJcbiAgICAgICAgICAgIGZyb206IHtcclxuICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXHJcbiAgICAgICAgICAgICAgICBjaDowXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvOiB7XHJcbiAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxyXG4gICAgICAgICAgICAgICAgY2g6MFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyBcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTYwQzVcdTU4MzFcdTMwOTJcdTRFRDhcdTUyQTBcdTg4NjhcdTc5M0FcclxuZnVuY3Rpb24gYXR0YWNoRmlsZUluZm8gKHRhcmdldEVsOiBIVE1MRWxlbWVudCwgc3RhdHVzOiBGaWxlU3RhdHVzLCBpbmZvOiBGaWxlSW5mbywgZGF0YTogT3V0bGluZURhdGFbXSxkaXNwbGF5RmlsZUluZm86IHN0cmluZyk6dm9pZCB7XHJcblx0aWYoIXN0YXR1cy5pc0ZvbGRlcil7XHJcblx0XHRzd2l0Y2ggKGRpc3BsYXlGaWxlSW5mbykge1xyXG5cdFx0XHRjYXNlICdsaW5lcyc6XHJcblx0XHRcdFx0dGFyZ2V0RWwuZGF0YXNldC5zdWJpbmZvID0gc3RhdHVzLm91dGxpbmVSZWFkeSA/IGluZm8ubnVtT2ZMaW5lcy50b1N0cmluZygpOiAnJztcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAndGFnJzpcclxuXHRcdFx0XHRpZiAoc3RhdHVzLm91dGxpbmVSZWFkeSl7XHJcblx0XHRcdFx0XHRsZXQgZmlyc3R0YWdJbmRleCA9IGRhdGEuZmluZEluZGV4KCAoZWxlbWVudCxpbmRleCkgPT5cclxuXHRcdFx0XHRcdFx0ZGF0YVtpbmRleF0udHlwZU9mRWxlbWVudCA9PSd0YWcnKTtcclxuXHRcdFx0XHRcdGlmIChmaXJzdHRhZ0luZGV4ID49IDApe1xyXG5cdFx0XHRcdFx0XHR0YXJnZXRFbC5kYXRhc2V0LnN1YmluZm8gPSBkYXRhW2ZpcnN0dGFnSW5kZXhdLmRpc3BsYXlUZXh0O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cdFxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlICdub25lJzpcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcbn0iLCAiaW1wb3J0IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luLCB7IERFRkFVTFRfU0VUVElOR1MgfSBmcm9tIFwic3JjL21haW5cIjtcclxuaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTXVsdGlwbGVOb3Rlc091dGxpbmVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgICBwbHVnaW46IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luKSB7XHJcbiAgICAgICAgc3VwZXIgKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJTaG93IGhlYWRpbmdzXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFbGVtZW50cy5oZWFkaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmhlYWRpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIlNob3cgbGlua3NcIilcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmxpbmspXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMubGluayA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiU2hvdyB0YWdzXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFbGVtZW50cy50YWcpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMudGFnID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJTaG93IGxpc3QgaXRlbXMgJiB0YXNrc1wiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMubGlzdEl0ZW1zKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmxpc3RJdGVtcyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFbGVtZW50cy5saXN0SXRlbXMpe1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiU2hvdyBhbGwgcm9vdCBsaXN0IGl0ZW1zXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcImlmIGRpc2FibGVkLCBvbmx5IHRvcCBpdGVtIG9mIHRoZSBsaXN0IGlzIGRpc3BsYXllZFwiKVxyXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKCdzZXR0aW5nLWluZGVudCcpXHJcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFsbFJvb3RJdGVtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYWxsUm9vdEl0ZW1zID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJTaG93IGFsbCB0YXNrc1wiKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXCJzaG93IGFsbCB0YXNrIGl0ZW1zIHJlZ2FyZGxlc3Mgb2YgdGhlaXIgbGV2ZWxcIilcclxuICAgICAgICAgICAgICAgIC5zZXRDbGFzcygnc2V0dGluZy1pbmRlbnQnKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hbGxUYXNrcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYWxsVGFza3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlRhc2sgb25seVwiKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXCJpZiBlbmFibGVkLCBub3JtYWwgbGlzdCBpdGVtcyBhcmUgaGlkZGVuXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoJ3NldHRpbmctaW5kZW50JylcclxuICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudGFza09ubHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRhc2tPbmx5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJIaWRlIGNvbXBsZXRlZCB0YXNrc1wiKVxyXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKCdzZXR0aW5nLWluZGVudCcpXHJcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVDb21wbGV0ZWRUYXNrcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUNvbXBsZXRlZFRhc2tzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIlNob3cgYmFja2xpbmsgZmlsZXNcIilcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0JhY2tsaW5rcylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dCYWNrbGlua3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiQ29sbGFwc2UgYWxsIGF0IHN0YXJ0dXBcIilcclxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29sbGFwc2VBbGxBdFN0YXJ0dXApXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29sbGFwc2VBbGxBdFN0YXJ0dXAgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTg4NjhcdTc5M0FcdTMwNTlcdTMwOEJcdTYwQzVcdTU4MzFcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZShcIkRpc3BsYXkgZmlsZSBpbmZvcm1hdGlvblwiKVxyXG4gICAgICAgIC5zZXREZXNjKFwiZGlzcGxheSB0aGUgbnVtYmVyIG9mIGxpbmVzIG9mIHRoZSBmaWxlIC8gdGhlIGZpcnN0IHRhZyB3aXRoIHRoZSBmaWxlIG5hbWVcIilcclxuICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibm9uZVwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJsaW5lc1wiLFwibGluZXMgb2YgdGhlIG5vdGVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJ0YWdcIixcImZpcnN0IHRhZ1wiKVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRpc3BsYXlGaWxlSW5mbylcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGlzcGxheUZpbGVJbmZvID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdmlld1x1MzA5Mlx1ODg2OFx1NzkzQVx1MzA1OVx1MzA4Qlx1NEY0RFx1N0Y2RSBcdUZGMDhcdTUzRjNcdTMwQjVcdTMwQTRcdTMwQzlcdTMwRDBcdTMwRkNcdTMwMDFcdTVERTZcdTMwQjVcdTMwQTRcdTMwQzlcdTMwRDBcdTMwRkNcdTMwMDFcdTMwRTFcdTMwQTRcdTMwRjNcdTMwREFcdTMwQTRcdTMwRjNcdUZGMDlcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZShcIlBvc2l0aW9uIG9mIHRoZSBwbHVnaW4gdmlld1wiKVxyXG4gICAgICAgIC5zZXREZXNjKFwiU3BlY2lmeSBkZWZhdWx0IHBvc2l0aW9uIHdoZXJlIHRoaXMgcGx1Z2luJ3MgdmlldyBhcHBlYXJzXCIpXHJcbiAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcInJpZ2h0XCIsIFwicmlnaHQgc2lkZSBwYW5lXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibGVmdFwiLFwibGVmdCBzaWRlIHBhbmVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJ0YWJcIixcIm5ldyB0YWIgaW4gbWFpbiBwYW5lXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwic3BsaXRcIixcInNwbGl0dGVkIHBhbmVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJwb3BvdXRcIixcInBvcG91dCB3aW5kb3dcIilcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy52aWV3UG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnZpZXdQb3NpdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNvcnQgdHlwZVxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiU29ydCB0eXBlXCIpXHJcbiAgICAgICAgLnNldERlc2MoXCJTcGVjaWZ5IHNvcnQgb3JkZXJcIilcclxuICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiYWxwaGFiZXRBc2NlbmRpbmdcIiwgXCJGaWxlIG5hbWUgKEEgdG8gWilcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJhbHBoYWJldERlc2NlbmRpbmdcIixcIkZpbGUgbmFtZSAoWiB0byBBKVwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcIm10aW1lRGVzY2VuZGluZ1wiLFwiTW9kaWZpZWQgdGltZSAobmV3IHRvIG9sZCkgXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibXRpbWVBc2NlbmRpbmdcIixcIk1vZGlmaWVkIHRpbWUgKG9sZCB0byBuZXcpIFwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImN0aW1lRGVzY2VuZGluZ1wiLFwiQ3JlYXRlZCB0aW1lIChuZXcgdG8gb2xkKSBcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjdGltZUFzY2VuZGluZ1wiLFwiQ3JlYXRlZCB0aW1lIChvbGQgdG8gbmV3KSBcIilcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0VHlwZSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6ICdhbHBoYWJldEFzY2VuZGluZycgfCAnYWxwaGFiZXREZXNjZW5kaW5nJyB8ICdjdGltZURlc2NlbmRpbmcnIHwgJ2N0aW1lQXNjZW5kaW5nJyB8ICdtdGltZURlc2NlbmRpbmcnIHwgJ210aW1lQXNjZW5kaW5nJykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0VHlwZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJGaWxlIFZpZXdcIixcclxuICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiT3BlbiBGaWxlIFZpZXcgYXQgc3RhcnR1cFwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuQXRTdGFydHVwLmZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuQXRTdGFydHVwLmZpbGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU1NDA0XHUzMEFCXHUzMEM2XHUzMEI0XHUzMEVBXHUzMDZFXHU4ODY4XHU3OTNBL1x1OTc1RVx1ODg2OFx1NzkzQVxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIlNob3cgdGhlIG1haW4gdGFyZ2V0IGZpbGUgc2VjdGlvblwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RmlsZXMubWFpbilcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaWxlcy5tYWluID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiU2hvdyB0aGUgdGhlIG91dGdvaW5nIGZpbGVzIHNlY3Rpb25cIilcclxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpbGVzLm91dGdvaW5nKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaWxlcy5vdXRnb2luZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiU2hvdyB0aGUgdGhlIGJhY2tsaW5rIGZpbGVzIHNlY3Rpb25cIilcclxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0ZpbGVzLmJhY2tsaW5rKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dGaWxlcy5iYWNrbGluayA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIlVwZGF0ZSBGaWxlIFZpZXcgd2hlbiBhbm90aGVyIGZpbGUgYmVjb21lcyBhY3RpdmVcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJBdXRvbWF0aWNhbGx5IHVwZGF0ZSB0aGUgdmlldyB3aGVuIGFub3RoZXIgZmlsZSBiZWNvbWVzIGFjdGl2ZShkZWZhdWx0ID0gb24pLiBUaGUgdmlldyBpcyBub3QgdXBkYXRlZCBpZiB0aGUgdHJhbnNpdGlvbiBpcyBtYWRlIHZpYSBjbGlja2luZyBvbiB0aGUgTU5PIHZpZXcgaXRlbXMuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG91cGRhdGVGaWxlVmlldylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmF1dG91cGRhdGVGaWxlVmlldyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE1OTyB2aWV3XHU3RDRDXHU3NTMxXHUzMDY3XHU5MDc3XHU3OUZCXHUzMDU3XHUzMDVGXHU1ODM0XHU1NDA4dmlld1x1MzA2RVx1NjZGNFx1NjVCMFx1MzA5Mlx1NEZERFx1NzU1OVxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvdXBkYXRlRmlsZVZpZXcpe1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJTdXNwZW5kIHVwZGF0ZSBieSBjbGlja2luZyBvbiB2aWV3IGl0ZW1cIilcclxuICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJzdXNwZW5kIHVwZGF0aW5nIHRoZSB2aWV3IHdoZW4gdGhlIGFjdGl2ZSBmaWxlIGlzIGNoYW5nZWQgYnkgY2xpY2tpbmcgb24gaXRlbXMgaW4gdGhlIEZpbGUgVmlldyhkZWZhdWx0ID0gb24pXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnN1c3BlbmRVcGRhdGVCeUNsaWNraW5nVmlldylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnN1c3BlbmRVcGRhdGVCeUNsaWNraW5nVmlldyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoXCJIaWRlIGR1cGxpY2F0ZSBub3Rlc1wiKVxyXG4gICAgICAgIC5zZXREZXNjKFwiaGlkZXMgbm90ZXMgdGhhdCBhcHBlYXIgbXVsdGlwbGUgdGltZXMgaW4gdGhlIG91dGxpbmUuKGRlZmF1bHQgPSBvbilcIilcclxuICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUR1cGxpY2F0ZWQpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUR1cGxpY2F0ZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJIaWRlIGxpbmsgZWxlbWVudHMgYmV0d2VlbiBkaXNwbGF5ZWQgZmlsZXNcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJtYWluIGZpbGUgb25seTogaGlkZSBsaW5rcyBiZXR3ZWVuIHRoZSBtYWluIGZpbGUgYW5kIG90aGVyIGRpc3BsYXllZC4gb3RoZXIgZmlsZXMgdG8gbWFpbiBmaWxlIG9ubHk6IGhpZGUgbGlua3MgZnJvbSBvdGhlciBkaXNwbGF5ZWQgZmlsZXMgdG8gdGhlIG1haW4gZmlsZS4gYWxsOiBoaWRlIGxpbmtzIGJldHdlZW4gYWxsIGRpc3BsYXllZCBmaWxlcy5cIilcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibm9uZVwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibWFpbk9ubHlcIixcIm1haW4gZmlsZSBvbmx5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcInRvTWFpbk9ubHlcIixcIm90aGVyIGZpbGVzIHRvIG1haW4gZmlsZSBvbmx5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImFsbFwiLFwiYWxsXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVMaW5rc0JldHdlZW5SZWxhdGVkRmlsZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogJ25vbmUnfCdtYWluT25seSd8J2FsbCcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlTGlua3NCZXR3ZWVuUmVsYXRlZEZpbGVzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkZvbGRlciBWaWV3XCIsXHJcbiAgICAgICAgICAgIGNsczogJ3NldHRpbmctY2F0ZWdvcnknXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIk9wZW4gRm9sZGVyIFZpZXcgYXQgc3RhcnR1cFwiKVxyXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuQXRTdGFydHVwLmZvbGRlcilcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5BdFN0YXJ0dXAuZm9sZGVyID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1NTQwNFx1MzBBQlx1MzBDNlx1MzBCNFx1MzBFQVx1MzA2RVx1ODg2OFx1NzkzQS9cdTk3NUVcdTg4NjhcdTc5M0FcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJDb2xsYXBzZSBzdWJmb2xkZXJcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJkaXNwbGF5IHN1YmZvbGRlcnMgaW4gY29sbGFwc2VkIHN0YXRlXCIpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbGxhcHNlRm9sZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29sbGFwc2VGb2xkZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9cdTg4NjhcdTc5M0FcdTMwNTlcdTMwOEJcdTg5OEJcdTUxRkFcdTMwNTdcdTMwRUNcdTMwRDlcdTMwRUJcclxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkhlYWRpbmdzXCIsXHJcbiAgICAgICAgICAgIGNsczpcInNldHRpbmctY2F0ZWdvcnlcIixcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmhlYWRpbmcpe1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlYWRpbmcgbGV2ZWwgdG8gZGlzcGxheVwiLFxyXG4gICAgICAgICAgICAgICAgY2xzOlwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oZWFkaW5nTGV2ZWwuZm9yRWFjaCggKHZhbHVlLCBpbmRleCwgYXJyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoYExldmVsJHsgaW5kZXggKyAxfWApXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldENsYXNzKCdzZXR0aW5nLWluZGVudCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKT0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGVhZGluZ0xldmVsW2luZGV4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oZWFkaW5nTGV2ZWxbIGluZGV4IF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlRvIGRpc3BsYXkgdGhpcyBzZWN0aW9uLCBhY3RpdmF0ZSAnU2hvdyBoZWFkaW5ncycgaW4gQmFzaWNzIHNlY3Rpb24uXCIsXHJcbiAgICAgICAgICAgICAgICBjbHM6XCJzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBcdTMwRDdcdTMwRUNcdTMwRDNcdTMwRTVcdTMwRkNcclxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlByZXZpZXdcIixcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoXCJJbmxpbmUgcHJldmlld1wiKVxyXG4gICAgICAgIC5zZXREZXNjKFwiU2hvdyBhIGZldyBzdWJzZXF1ZW50IHdvcmRzIG5leHQgdG8gdGhlIG91dGxpbmUgZWxlbWVudCBuYW1lXCIpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmlubGluZVByZXZpZXcpXHJcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5saW5lUHJldmlldyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiVG9vbHRpcCBwcmV2aWV3XCIpXHJcbiAgICAgICAgLnNldERlc2MoXCJTaG93IHN1YnNlcXVlbnQgc2VudGVuY2VzIGFzIGEgdG9vbHRpcCB3aGVuIGhvdmVyXCIpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3KVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3KXtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVG9vbHRpcCBwcmV2aWV3IGRpcmVjdGlvblwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoJ3NldHRpbmctaW5kZW50JylcclxuICAgICAgICAgICAgLnNldERlc2MoXCJzcGVjaWZ5IHRoZSBkaXJlY3Rpb24gdG8gZGlzcGxheSB0b29sdGlwIHByZXZpZXdcIilcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibGVmdFwiLCBcImxlZnRcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwicmlnaHRcIixcInJpZ2h0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImJvdHRvbVwiLFwiYm90dG9tXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcInRvcFwiLFwidG9wXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRvb2x0aXBQcmV2aWV3RGlyZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50b29sdGlwUHJldmlld0RpcmVjdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFsd2F5cyBvbiBUb3BcclxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkFsd2F5cyBvbiB0b3BcIixcclxuICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICB9KTtcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJUYWdzXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiTm90ZXMgd2l0aCB0YWdzIHdoaWNoIG1hdGNoIGxpc3RlZCB3b3JkcyBhcmUgZGlzcGxheWVkIG9uIHRoZSB0b3Agb2YgdGhlIGxpc3QuIFNlcGFyYXRlIHdpdGggYSBuZXcgbGluZS5cIilcclxuICAgICAgICAgICAgLmFkZFRleHRBcmVhKCh0ZXh0QXJlYSkgPT57XHJcbiAgICAgICAgICAgICAgICB0ZXh0QXJlYS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWdzQU9ULmpvaW4oJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRhZ3NBT1QgPSBpbnB1dGVkVmFsdWUuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIC8vIFJlY2VudC9mYXZvcml0ZVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiUmVjZW50L2Zhdm9yaXRlc1wiLFxyXG4gICAgICAgICAgICBjbHM6ICdzZXR0aW5nLWNhdGVnb3J5J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiTnVtYmVyIG9mIHJlY2VudCBmaWxlcy9mb2xkZXJzIHRvIGJlIHN0b3JlZFwiKVxyXG4gICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyKCd0eXBlJywnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihTdHJpbmcoREVGQVVMVF9TRVRUSU5HUy5udW1PZlJlY2VudEZpbGVzKSlcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShTdHJpbmcodGhpcy5wbHVnaW4uc2V0dGluZ3MubnVtT2ZSZWNlbnRGaWxlcykpXHJcblxyXG4gICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJzZWQgPSBwYXJzZUludCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsMTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZCA8PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSBERUZBVUxUX1NFVFRJTkdTLm51bU9mUmVjZW50RmlsZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5udW1PZlJlY2VudEZpbGVzID0gcGFyc2VkO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoXCJBdXRvIHBpblwiKVxyXG4gICAgICAgIC5zZXREZXNjKFwiV2hlbiBGaWxlIFZpZXcgaXMgdXBkYXRlZCBmcm9tIHJlY2VudC9mYXZvcml0ZSBmaWxlcywgYXV0b21hdGljYWxseSBwaW4gdGhlIHZpZXcuXCIpXHJcbiAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnBpbkFmdGVySnVtcClcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5waW5BZnRlckp1bXAgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1MzBENVx1MzBBM1x1MzBFQlx1MzBCRlx1MzBGQ1xyXG4gICAgICAgIC8qICBmaWx0ZXJcdTk1QTJcdTkwMjNcdTMwQjNcdTMwRTFcdTMwRjNcdTMwQzhcdTMwQTJcdTMwQTZcdTMwQzhcclxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDRcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlNpbXBsZSBmaWx0ZXJcIixcclxuICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmhlYWRpbmcpe1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJIZWFkaW5ncyB0byBpZ25vcmVcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJIZWFkaW5ncyB3aGljaCBpbmNsdWRlIGxpc3RlZCB3b3JkcyB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQuIFNlcGFyYXRlIHdpdGggYSBuZXcgbGluZS5cIilcclxuICAgICAgICAgICAgLmFkZFRleHRBcmVhKCh0ZXh0QXJlYSkgPT57XHJcbiAgICAgICAgICAgICAgICB0ZXh0QXJlYS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3Jkc1RvSWdub3JlLmhlYWRpbmcuam9pbignXFxuJykpO1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0lnbm9yZS5oZWFkaW5nID0gaW5wdXRlZFZhbHVlLnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFbGVtZW50cy5saW5rKXtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTGlua3MgdG8gaWdub3JlXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiTGlua3Mgd2hpY2ggaW5jbHVkZSBsaXN0ZWQgd29yZHMgd2lsbCBub3QgYmUgZGlzcGxheWVkLiBTZXBhcmF0ZSB3aXRoIGEgbmV3IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dEFyZWEpID0+e1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0lnbm9yZS5saW5rLmpvaW4oJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRzVG9JZ25vcmUubGluayA9IGlucHV0ZWRWYWx1ZS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMudGFnKXtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVGFncyB0byBpZ25vcmVcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJ0YWdzIHdoaWNoIGluY2x1ZGUgbGlzdGVkIHdvcmRzIHdpbGwgbm90IGJlIGRpc3BsYXllZC4gU2VwYXJhdGUgd2l0aCBhIG5ldyBsaW5lLlwiKVxyXG4gICAgICAgICAgICAuYWRkVGV4dEFyZWEoKHRleHRBcmVhKSA9PntcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRzVG9JZ25vcmUudGFnLmpvaW4oJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRzVG9JZ25vcmUudGFnID0gaW5wdXRlZFZhbHVlLnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFbGVtZW50cy5saXN0SXRlbXMpe1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJMaXN0IGl0ZW1zIHRvIGlnbm9yZVwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkxpc3QgaXRlbXMgd2hpY2ggaW5jbHVkZSBsaXN0ZWQgd29yZHMgd2lsbCBub3QgYmUgZGlzcGxheWVkLiBTZXBhcmF0ZSB3aXRoIGEgbmV3IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dEFyZWEpID0+e1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0lnbm9yZS5saXN0SXRlbXMuam9pbignXFxuJykpO1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0lnbm9yZS5saXN0SXRlbXMgPSBpbnB1dGVkVmFsdWUuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbmNsdWRlIC8gRXhjbHVkZVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiSW5jbHVkZVwiLFxyXG4gICAgICAgICAgICBjbHM6ICdzZXR0aW5nLWNhdGVnb3J5J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJJZiB5b3Ugc3BlY2lmeSBvbmUgb3V0bGluZSBlbGVtZW50IHR5cGUgYW5kIHdvcmRzIHRvIGluY2x1ZGUsIG9ubHkgZWxlbWVudHMgd2hpY2ggYmVsb25nIHRvIHRoZSBpbmNsdWRlZCBlbGVtZW50cyBhcmUgZGlzcGxheWVkLlwiLFxyXG4gICAgICAgICAgICBjbHM6XCJzZXR0aW5nLWl0ZW0tZGVzY3JpcHRpb25cIixcclxuICAgICAgICB9KTtcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZShcIkVsZW1lbnQgdHlwZSBmb3IgaW5jbHVkZVwiKVxyXG4gICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJub25lXCIsIFwibm9uZVwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImhlYWRpbmdcIixcImhlYWRpbmdcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJsaW5rXCIsXCJsaW5rXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwidGFnXCIsXCJ0YWdcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJsaXN0SXRlbXNcIixcImxpc3RJdGVtc1wiKVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVPbmx5KVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlT25seSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmNsdWRlT25seSAhPSAnbm9uZScpe1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJXb3JkcyB0byBpbmNsdWRlXCIpXHJcbiAgICAgICAgICAgIC5zZXRDbGFzcygnc2V0dGluZy1pbmRlbnQnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIk9ubHkgZWxlbWVudHMgc3BlY2lmaWVkIGluICdFbGVtZW50IHR5cGUgZm9yIGluY2x1ZGUnIHdoaWNoIGluY2x1ZGUgbGlzdGVkIHdvcmRzIHdpbGwgYmUgZGlzcGxheWVkLiBTZXBhcmF0ZSB3aXRoIGEgbmV3IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dEFyZWEpID0+e1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0luY2x1ZGUuam9pbignXFxuJykpO1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0luY2x1ZGUgPSBpbnB1dGVkVmFsdWUuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbmNsdWRlIHRoZSBiZWdpbm5pbmcgcGFydFwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoJ3NldHRpbmctaW5kZW50JylcclxuICAgICAgICAgICAgLnNldERlc2MoXCJTcGVjaWZ5IHdoZXRoZXIgdG8gaW5jbHVkZSB0aGUgYmVnaW5uaW5nIHBhcnRzIG9mIGVhY2ggZGFpbHkgbm90ZSB3aXRoIG5vIGVsZW1lbnQgdG8gaW5jbHVkZSBcIilcclxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5jbHVkZUJlZ2lubmluZylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluY2x1ZGVCZWdpbm5pbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJFeGNsdWRlXCIsXHJcbiAgICAgICAgICAgIGNsczogJ3NldHRpbmctY2F0ZWdvcnknXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlNwZWNpZmllZCBvdXRsaW5lIGVsZW1lbnRzIGFuZCBlbGVtZW50cyBiZWxvbmdpbmcgdG8gdGhhdCBlbGVtZW50IHdpbGwgbm90IGJlIGRpc3BsYXllZC5cIixcclxuICAgICAgICAgICAgY2xzOlwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgLnNldE5hbWUoXCJFeGNsdXNpb24gZW5kcyBhdFwiKVxyXG4gICAgICAgIC5zZXREZXNjKFwiRXhjbHVkaW5nIGVsZW1lbnRzIHNwZWNpZmllZCBiZWxvdyBlbmRzIGF0IHRoZSBzZWxlY3RlZCB0eXBlIG9mIGVsZW1lbnRzLiBJZiB5b3Ugc3BlY2lmaWVkICdFbGVtZW50IHR5cGUgZm9yIGluY2x1ZGUnIGFib3ZlLCB0aGlzIHZhbHVlIGlzIGlnbm9yZWQgYW5kIGV4Y2x1ZGVpbmcgZWxlbWVudHMgZW5kcyBhdCB0aGF0IHR5cGUgb2YgZWxlbWVudHMuXCIpXHJcbiAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcIm5vbmVcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiaGVhZGluZ1wiLFwiaGVhZGluZ1wiKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImxpbmtcIixcImxpbmtcIilcclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJ0YWdcIixcInRhZ1wiKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImxpc3RJdGVtc1wiLFwibGlzdEl0ZW1zXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJpbWVFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmltZUVsZW1lbnQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmhlYWRpbmcpe1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJIZWFkaW5ncyB0byBleGNsdWRlXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiSGVhZGluZ3Mgd2hpY2ggaW5jbHVkZSBsaXN0ZWQgd29yZHMgYW5kIGVsZW1lbnRzIHdoaWNoIGJlbG9uZyB0byB0aGVtIHdpbGwgbm90IGJlIGRpc3BsYXllZC4gU2VwYXJhdGUgd2l0aCBhIG5ldyBsaW5lLlwiKVxyXG4gICAgICAgICAgICAuYWRkVGV4dEFyZWEoKHRleHRBcmVhKSA9PntcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRzVG9FeGNsdWRlLmhlYWRpbmcuam9pbignXFxuJykpO1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0V4Y2x1ZGUuaGVhZGluZyA9IGlucHV0ZWRWYWx1ZS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMubGluayl7XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkxpbmtzIHRvIGV4Y2x1ZGVcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJMaW5rcyB3aGljaCBpbmNsdWRlIGxpc3RlZCB3b3JkcyBhbmQgZWxlbWVudHMgd2hpY2ggYmVsb25nIHRvIHRoZW0gd2lsbCBub3QgYmUgZGlzcGxheWVkLiBTZXBhcmF0ZSB3aXRoIGEgbmV3IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dEFyZWEpID0+e1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0V4Y2x1ZGUubGluay5qb2luKCdcXG4nKSk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0QXJlYS5pbnB1dEVsLm9uYmx1ciA9IGFzeW5jIChlOiBGb2N1c0V2ZW50ICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ZWRWYWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy53b3Jkc1RvRXhjbHVkZS5saW5rID0gaW5wdXRlZFZhbHVlLnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMudGFnKXtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVGFncyB0byBleGNsdWRlXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwidGFncyB3aGljaCBpbmNsdWRlIGxpc3RlZCB3b3JkcyBhbmQgZWxlbWVudHMgd2hpY2ggYmVsb25nIHRvIHRoZW0gd2lsbCBub3QgYmUgZGlzcGxheWVkLiBTZXBhcmF0ZSB3aXRoIGEgbmV3IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dEFyZWEpID0+e1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0V4Y2x1ZGUudGFnLmpvaW4oJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRzVG9FeGNsdWRlLnRhZyA9IGlucHV0ZWRWYWx1ZS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93RWxlbWVudHMubGlzdEl0ZW1zKXtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTGlzdCBpdGVtcyB0byBleGNsdWRlXCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiTGlzdCBpdGVtcyB3aGljaCBpbmNsdWRlIGxpc3RlZCB3b3JkcyBhbmQgZWxlbWVudHMgd2hpY2ggYmVsb25nIHRvIHRoZW0gd2lsbCBub3QgYmUgZGlzcGxheWVkLiBTZXBhcmF0ZSB3aXRoIGEgbmV3IGxpbmUuXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSgodGV4dEFyZWEpID0+e1xyXG4gICAgICAgICAgICAgICAgdGV4dEFyZWEuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mud29yZHNUb0V4Y2x1ZGUubGlzdEl0ZW1zLmpvaW4oJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIHRleHRBcmVhLmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmRzVG9FeGNsdWRlLmxpc3RJdGVtcyA9IGlucHV0ZWRWYWx1ZS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgLy8gXHU1OTE2XHU4OUIzXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJBcHBlYXJuY2VcIixcclxuICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gaGVhZGluZ1x1MzA2RVx1MzBBNFx1MzBGM1x1MzBDN1x1MzBGM1x1MzBDOFx1MzBFQ1x1MzBEOVx1MzBFQlx1MzA2Qlx1MzA0Mlx1MzA4Rlx1MzA1Qlx1MzA2Nlx1NEVENlx1MzA2RVx1ODk4MVx1N0QyMFx1MzA5Mlx1MzBBNFx1MzBGM1x1MzBDN1x1MzBGM1x1MzBDOFx1MzA1OVx1MzA4Qlx1MzA0QlxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgIC5zZXROYW1lKFwiSW5kZW50IG90aGVyIHRoYW4gaGVhZGluZ3NcIilcclxuICAgICAgICAuc2V0RGVzYyhcIldoZXRoZXIgb3RoZXIgZWxlbWVudHMgc2hvdWxkIGJlIGluZGVudGVkIHRvIHByZWNlZGluZyBoZWFkaW5ncyAoZGVmYXVsdCA9IHByZWNlZGluZyBoZWFkaW5nICsxKVwiKVxyXG4gICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCIwXCIsXCJub25lXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiMVwiLFwiZm9sbG93IHByZWNlZGluZyBoZWFkaW5nXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiMlwiLFwicHJlY2VkaW5nIGhlYWRpbmcgKyAxXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoU3RyaW5nKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGVudEZvbGxvd0hlYWRpbmcpKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGVudEZvbGxvd0hlYWRpbmcgPSBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1MzBDRVx1MzBGQ1x1MzBDOFx1MzBCRlx1MzBBNFx1MzBDOFx1MzBFQlx1MzA2RVx1ODBDQ1x1NjY2Rlx1ODI3MlxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIk5vdGUgdGl0bGUgYmFja2dyb3VuZCBjb2xvclwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIk5vIGNoYW5nZTogdXNlIHRoZSBjdXJyZW50IENTUyB0aGVtZSBzZXR0aW5nIHZhbHVlcyhUZXh0cyBtYXkgYmUgb3ZlcmxhcHBlZCkuIFNhbWUgYXMgb3V0bGluZXM6IGRlZmF1bHQgdGhlbWUgZXhwbG9yZXIgY29sb3IuIEFjY2VudDogaGlnaGxpZ2h0IGZpbGUgbmFtZXMuIEN1c3RvbTogU3BlY2lmeSBhbnkgY29sb3IgY29kZS4gUGxlYXNlIHVwZGF0ZSB0aGUgdmlldyB3aGVuIHlvdSB0b2dnbGVkIE9ic2lkaWFuJ3MgYmFzZSB0aGVtZShsaWdodC9kYXJrKS4gKGRlZmF1bHQgPSBhY2NlbnQpXCIpXHJcbiAgICAgICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcIm5vbmVcIiwgXCJubyBjaGFuZ2VcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiZGVmYXVsdFwiLFwic2FtZSBhcyBvdXRsaW5lc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJhY2NlbnRcIixcImFjY2VudFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjdXN0b21cIixcImN1c3RvbVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3IgPT0nY3VzdG9tJyl7XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkN1c3RvbSBub3RlIHRpdGxlIGJhY2tncm91bmQgY29sb3IgKGxpZ2h0KVwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudFwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlNwZWNpZnkgYmFja2dyb3VuZCBjb2xvciAoZXguICNGRkZGRkYgb3IgcmdiKDI1NSwyNTUsMjU1KSlcIilcclxuICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyKCd0eXBlJywnc3RyaW5nJyk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvci5saWdodCk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvci5saWdodCA9IGlucHV0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQ3VzdG9tIG5vdGUgdGl0bGUgYmFja2dyb3VuZCBjb2xvciAobGlnaHQsIG9uIGhvdmVyKVwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudFwiKVxyXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlNwZWNpZnkgYmFja2dyb3VuZCBjb2xvciBvbiBob3ZlciAoZXguICNGRkZGRkYgb3IgcmdiKDI1NSwyNTUsMjU1KSlcIilcclxuICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyKCd0eXBlJywnc3RyaW5nJyk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvckhvdmVyLmxpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCk9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tTm90ZVRpdGxlQmFja2dyb3VuZENvbG9ySG92ZXIubGlnaHQgPSBpbnB1dGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQ3VzdG9tIG5vdGUgdGl0bGUgYmFja2dyb3VuZCBjb2xvciAoZGFyaylcIilcclxuICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJTcGVjaWZ5IGJhY2tncm91bmQgY29sb3IgKGV4LiAjRkZGRkZGIG9yIHJnYigyNTUsMjU1LDI1NSkpXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ3N0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Ob3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3IuZGFyayk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbU5vdGVUaXRsZUJhY2tncm91bmRDb2xvci5kYXJrID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJDdXN0b20gbm90ZSB0aXRsZSBiYWNrZ3JvdW5kIGNvbG9yIChkYXJrLCBvbiBob3ZlcilcIilcclxuICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgLnNldERlc2MoXCJTcGVjaWZ5IGJhY2tncm91bmQgY29sb3Igb24gaG92ZXIgKGV4LiAjRkZGRkZGIG9yIHJnYigyNTUsMjU1LDI1NSkpXCIpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ3N0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Ob3RlVGl0bGVCYWNrZ3JvdW5kQ29sb3JIb3Zlci5kYXJrKTtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCk9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tTm90ZVRpdGxlQmFja2dyb3VuZENvbG9ySG92ZXIuZGFyayA9IGlucHV0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTg5OEJcdTUxRkFcdTMwNTdcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmhlYWRpbmcpe1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkhlYWRpbmdzXCIsXHJcbiAgICAgICAgICAgICAgICBjbHM6ICdzZXR0aW5nLWNhdGVnb3J5J1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiSWNvblwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudFwiKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJub25lXCIsIFwibm9uZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vLmFkZE9wdGlvbihcImhlYWRpbmdcIixcImhlYWRpbmdcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiaGFzaFwiLFwiaGFzaFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjaGV2cm9uLXJpZ2h0XCIsXCJjaGV2cm9uLXJpZ2h0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8uYWRkT3B0aW9uKFwiaGVhZGluZ3dpdGhudW1iZXJcIixcImhlYWRpbmcgd2l0aCBudW1iZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiY3VzdG9tXCIsXCJjdXN0b21cIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi5oZWFkaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmljb24uaGVhZGluZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLmhlYWRpbmcgPT0gJ2N1c3RvbScpe1xyXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkN1c3RvbSBpY29uXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudC0yXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcImVudGVyIEx1Y2lkZSBJY29uIG5hbWVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLmN1c3RvbUljb24uaGVhZGluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbUljb24uaGVhZGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLm9uYmx1ciA9IGFzeW5jIChlOiBGb2N1c0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ZWRWYWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tSWNvbi5oZWFkaW5nID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlByZWZpeFwiKVxyXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLnByZWZpeC5oZWFkaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlZml4LmhlYWRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeC5oZWFkaW5nID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlZml4LmhlYWRpbmcgIT0gJycpe1xyXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoXCJSZXBlYXQgaGVhZGluZyBwcmVmaXhcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudC0yXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcIm5vbmVcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibGV2ZWxcIixcImFzIG1hbnkgdGltZXMgYXMgaXRzIGxldmVsXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibGV2ZWxtaW51czFcIixcImxldmVsIC0gMVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlcGVhdEhlYWRpbmdQcmVmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlcGVhdEhlYWRpbmdQcmVmaXggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkFkZCBpbmRlbnRcIilcclxuICAgICAgICAgICAgLnNldENsYXNzKCdzZXR0aW5nLWluZGVudCcpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGVudC5oZWFkaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW5kZW50LmhlYWRpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gXHUzMEVBXHUzMEYzXHUzMEFGXHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dFbGVtZW50cy5saW5rKXtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJMaW5rc1wiLFxyXG4gICAgICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkljb25cIilcclxuICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibm9uZVwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibGlua1wiLFwibGlua1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJsaW5rLTJcIixcImxpbmstMlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjdXN0b21cIixcImN1c3RvbVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLmxpbmspXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi5saW5rID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmljb24ubGluayA9PSAnY3VzdG9tJyl7XHJcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiQ3VzdG9tIGljb25cIilcclxuICAgICAgICAgICAgICAgIC5zZXRDbGFzcyhcInNldHRpbmctaW5kZW50LTJcIilcclxuICAgICAgICAgICAgICAgIC5zZXREZXNjKFwiZW50ZXIgTHVjaWRlIEljb24gbmFtZVwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ3N0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKERFRkFVTFRfU0VUVElOR1MuY3VzdG9tSWNvbi5saW5rKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tSWNvbi5saW5rKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21JY29uLmxpbmsgPSBpbnB1dGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiUHJlZml4XCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudFwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ3N0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKERFRkFVTFRfU0VUVElOR1MucHJlZml4LmxpbmspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmaXgubGluayk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLm9uYmx1ciA9IGFzeW5jIChlOiBGb2N1c0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ZWRWYWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlZml4LmxpbmsgPSBpbnB1dGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBcdTMwQkZcdTMwQjBcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLnRhZyl7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiVGFnc1wiLFxyXG4gICAgICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkljb25cIilcclxuICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibm9uZVwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwidGFnXCIsXCJ0YWdcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiaGFzaFwiLFwiaGFzaFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjdXN0b21cIixcImN1c3RvbVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLnRhZylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLnRhZyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLnRhZyA9PSAnY3VzdG9tJyl7XHJcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiQ3VzdG9tIGljb25cIilcclxuICAgICAgICAgICAgICAgIC5zZXRDbGFzcyhcInNldHRpbmctaW5kZW50LTJcIilcclxuICAgICAgICAgICAgICAgIC5zZXREZXNjKFwiZW50ZXIgTHVjaWRlIEljb24gbmFtZVwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ3N0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKERFRkFVTFRfU0VUVElOR1MuY3VzdG9tSWNvbi50YWcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21JY29uLnRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLm9uYmx1ciA9IGFzeW5jIChlOiBGb2N1c0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ZWRWYWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tSWNvbi50YWcgPSBpbnB1dGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiUHJlZml4XCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudFwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ3N0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKERFRkFVTFRfU0VUVElOR1MucHJlZml4LnRhZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeC50YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeC50YWcgPSBpbnB1dGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBcdTMwRUFcdTMwQjlcdTMwQzhcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0VsZW1lbnRzLmxpbmspe1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkxpc3QgaXRlbXNcIixcclxuICAgICAgICAgICAgICAgIGNsczogJ3NldHRpbmctY2F0ZWdvcnknXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoXCJJY29uXCIpXHJcbiAgICAgICAgICAgIC5zZXRDbGFzcyhcInNldHRpbmctaW5kZW50XCIpXHJcbiAgICAgICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcIm5vbmVcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImxpc3RcIixcImxpc3RcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiY2hldnJvbi1yaWdodFwiLFwiY2hldnJvbi1yaWdodFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJtaW51c1wiLFwibWludXNcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiY2lyY2xlLWRvdFwiLFwiY2lyY2xlLWRvdFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJhc3Rlcmlza1wiLFwiYXN0ZXJpc2tcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiY3VzdG9tXCIsXCJjdXN0b21cIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi5saXN0SXRlbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi5saXN0SXRlbXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi5saXN0SXRlbXMgPT0gJ2N1c3RvbScpe1xyXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkN1c3RvbSBpY29uXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudC0yXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcImVudGVyIEx1Y2lkZSBJY29uIG5hbWVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLmN1c3RvbUljb24ubGlzdEl0ZW1zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tSWNvbi5saXN0SXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbUljb24ubGlzdEl0ZW1zID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlByZWZpeFwiKVxyXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLnByZWZpeC5saXN0SXRlbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmaXgubGlzdEl0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmaXgubGlzdEl0ZW1zID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9cdTY3MkFcdTVCOENcdTRFODZcdTMwQkZcdTMwQjlcdTMwQUZcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJUYXNrc1wiLFxyXG4gICAgICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShcIkljb25cIilcclxuICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibm9uZVwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwic3F1YXJlXCIsXCJzcXVhcmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiY2lyY2xlXCIsXCJjaXJjbGVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibGlzdC1jaGVja3NcIixcImxpc3QtY2hlY2tzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcImN1c3RvbVwiLFwiY3VzdG9tXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmljb24udGFzaylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLnRhc2sgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi50YXNrID09ICdjdXN0b20nKXtcclxuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJDdXN0b20gaWNvblwiKVxyXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnQtMlwiKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXCJlbnRlciBMdWNpZGUgSWNvbiBuYW1lXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyKCd0eXBlJywnc3RyaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoREVGQVVMVF9TRVRUSU5HUy5jdXN0b21JY29uLnRhc2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21JY29uLnRhc2spO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnB1dGVkVmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbUljb24udGFzayA9IGlucHV0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJQcmVmaXhcIilcclxuICAgICAgICAgICAgICAgIC5zZXRDbGFzcyhcInNldHRpbmctaW5kZW50XCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zZXRBdHRyKCd0eXBlJywnc3RyaW5nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoREVGQVVMVF9TRVRUSU5HUy5wcmVmaXgudGFzaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeC50YXNrKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmaXgudGFzayA9IGlucHV0ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQWRkIGNoZWNrYm94IHRleHQgdG8gcHJlZml4XCIpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKFwiYWRkIFsgXSBvciBbeF1cIilcclxuICAgICAgICAgICAgLnNldENsYXNzKCdzZXR0aW5nLWluZGVudCcpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFkZENoZWNrYm94VGV4dClcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFkZENoZWNrYm94VGV4dCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vXHU1QjhDXHU0RTg2XHU2RTA4XHUzMDdGXHUzMEJGXHUzMEI5XHUzMEFGXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiQ29tcGxldGVkIHRhc2tzXCIsXHJcbiAgICAgICAgICAgICAgICBjbHM6ICdzZXR0aW5nLWNhdGVnb3J5J1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKFwiSWNvblwiKVxyXG4gICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudFwiKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJub25lXCIsIFwibm9uZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjaGVjay1zcXVhcmVcIixcImNoZWNrLXNxdWFyZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjaGVjay1jaXJjbGVcIixcImNoZWNrLWNpcmNsZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJjaGVja1wiLFwiY2hlY2tcIilcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiY3VzdG9tXCIsXCJjdXN0b21cIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaWNvbi50YXNrRG9uZSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pY29uLnRhc2tEb25lID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmljb24udGFza0RvbmUgPT0gJ2N1c3RvbScpe1xyXG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkN1c3RvbSBpY29uXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Q2xhc3MoXCJzZXR0aW5nLWluZGVudC0yXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcImVudGVyIEx1Y2lkZSBJY29uIG5hbWVcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLmN1c3RvbUljb24udGFza0RvbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21JY29uLnRhc2tEb25lKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5wdXRlZFZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21JY29uLnRhc2tEb25lID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlByZWZpeFwiKVxyXG4gICAgICAgICAgICAgICAgLnNldENsYXNzKFwic2V0dGluZy1pbmRlbnRcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihERUZBVUxUX1NFVFRJTkdTLnByZWZpeC50YXNrRG9uZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByZWZpeC50YXNrRG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLm9uYmx1ciA9IGFzeW5jIChlOiBGb2N1c0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ZWRWYWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlZml4LnRhc2tEb25lID0gaW5wdXRlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFJlZnJlc2hWaWV3KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImg0XCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJPdGhlcnNcIixcclxuICAgICAgICAgICAgY2xzOiAnc2V0dGluZy1jYXRlZ29yeSdcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBcdThBQURcdTMwN0ZcdThGQkNcdTMwN0ZcdTRFMEFcdTk2NTBcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZShcIk1heGltdW0gbnVtYmVyIG9mIGZpbGVzIHRvIHJlYWRcIilcclxuICAgICAgICAuc2V0RGVzYyhcIlRvIGF2b2lkIG92ZXJsb2FkaW5nLCBmaWxlcyB0aGF0IGV4Y2VlZCB0aGlzIG51bWJlciB3aWxsIGJlIGluaXRpYWxseSBjb2xsYXBzZWQuIChkZWZhdWx0ID0gNTApXCIpXHJcbiAgICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcclxuICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnNldEF0dHIoJ3R5cGUnLCdudW1iZXInKTtcclxuICAgICAgICAgICAgdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFN0cmluZyhERUZBVUxUX1NFVFRJTkdTLnJlYWRMaW1pdCkpXHJcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUoU3RyaW5nKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlYWRMaW1pdCkpXHJcblxyXG4gICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKGU6IEZvY3VzRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJzZWQgPSBwYXJzZUludCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUsMTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZCA8PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWQgPSBERUZBVUxUX1NFVFRJTkdTLnJlYWRMaW1pdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlYWRMaW1pdCA9IHBhcnNlZDtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsUmVmcmVzaFZpZXcodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUxRTZcdTc0MDZcdTRFMEFcdTk2NTBcclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAuc2V0TmFtZShcIk1heGltdW0gbnVtYmVyIG9mIGZpbGVzIHRvIHByb2Nlc3NcIilcclxuICAgICAgICAuc2V0RGVzYyhcIlRvIGF2b2lkIG92ZXJsb2FkaW5nLCBpZiB0aGUgbnVtYmVyIG9mIGZpbGVzIHRvIGJlIGRpc3BsYXllZCBleGNlZWRzIHRoaXMgbnVtYmVyLCBhbGwgZmlsZXMgd2lsbCBiZSBpbml0aWFsbHkgY29sbGFwc2VkLiAoZGVmYXVsdCA9IDEwMClcIilcclxuICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT4ge1xyXG4gICAgICAgICAgICB0ZXh0LmlucHV0RWwuc2V0QXR0cigndHlwZScsJ251bWJlcicpO1xyXG4gICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoU3RyaW5nKERFRkFVTFRfU0VUVElOR1MucHJvY2Vzc0xpbWl0KSlcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShTdHJpbmcodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvY2Vzc0xpbWl0KSlcclxuXHJcbiAgICAgICAgICAgIHRleHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoZTogRm9jdXNFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZCA9IHBhcnNlSW50KChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSwxMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkIDw9IDApe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IERFRkFVTFRfU0VUVElOR1MucHJvY2Vzc0xpbWl0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvY2Vzc0xpbWl0ID0gcGFyc2VkO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxSZWZyZXNoVmlldyh0cnVlKTtcclxuICAgICAgICAgICAgfSAgICBcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwic2hvdyBkZWJ1ZyBpbmZvcm1hdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXCJkaXNwbGF5IGRlYnVnIGluZm9ybWF0aW9uIGluIHRoZSBjb25zb2xlXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dEZWJ1Z0luZm8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dEZWJ1Z0luZm8gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2FsbFJlZnJlc2hWaWV3KHJlbG9hZDpib29sZWFuKTp2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4udmlldykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi52aWV3LnJlZnJlc2hWaWV3KHJlbG9hZCxyZWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wbHVnaW4uZm9sZGVydmlldykge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5mb2xkZXJ2aWV3LnJlZnJlc2hWaWV3KHJlbG9hZCxyZWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBzZXRJY29uLCBkZWJvdW5jZSwgRGVib3VuY2VyLCBNZW51LCBURm9sZGVyfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiwgVEZpbGUsIFRBYnN0cmFjdEZpbGV9IGZyb20gJ29ic2lkaWFuJ1xyXG5cclxuXHJcbmltcG9ydCBNdWx0aXBsZU5vdGVzT3V0bGluZVBsdWdpbiwgeyBNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzLCBPdXRsaW5lRGF0YSwgRmlsZUluZm8sIEZpbGVTdGF0dXMgfSBmcm9tICdzcmMvbWFpbic7XHJcblxyXG5pbXBvcnQgeyBpbml0RmlsZVN0YXR1cywgZ2V0RmlsZUluZm8sIGdldE91dGxpbmUgfSBmcm9tICdzcmMvZ2V0T3V0bGluZSdcclxuaW1wb3J0IHsgY2hlY2tGbGFnLCBzb3J0RmlsZU9yZGVyLCBnZXRUaGVtZSwgc2V0Tm90ZVRpdGxlQmFja2dyb3VuZENvbG9yLCBoYW5kbGVEZWxldGVSZWxhdGVkRmlsZXMsIGhhbmRsZVJlbmFtZVJlbGF0ZWRGaWxlcywgY2hlY2tSZWxhdGVkRmlsZXMsIGNoZWNrRGF0YXZpZXcgfSBmcm9tICdzcmMvdXRpbCc7XHJcblxyXG5pbXBvcnQgeyBkcmF3VUlGb2xkZXJWaWV3IH0gZnJvbSAnc3JjL2RyYXdVSSc7XHJcbmltcG9ydCB7IGNvbnN0cnVjdE5vdGVET00sIGNvbnN0cnVjdE91dGxpbmVET00gfSBmcm9tICdzcmMvY29uc3RydWN0RE9NJztcclxuaW1wb3J0IHsgY2hlY2tGYXZBbmRSZWNlbnRGaWxlcywgZGVsZXRlRmF2QW5kUmVjZW50LCBoYW5kbGVEZWxldGVGYXZBbmRSZWNlbnRGaWxlcywgaGFuZGxlUmVuYW1lRmF2QW5kUmVjZW50RmlsZXMsIHVwZGF0ZUZhdkFuZFJlY2VudCB9IGZyb20gJy4vRmF2QW5kUmVjZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBNdWx0aXBsZU5vdGVzT3V0bGluZUZvbGRlclZpZXdUeXBlID0gJ211bHRpcGxlLW5vdGVzLW91dGxpbmUtZm9sZGVyLXZpZXcnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuXHRcclxuXHRwbHVnaW46IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luO1x0XHRcclxuXHRzZXR0aW5nczpNdWx0aXBsZU5vdGVzT3V0bGluZVNldHRpbmdzO1xyXG5cclxuXHRhY3RpdmVGaWxlOiBURmlsZTtcclxuXHJcblx0dGFyZ2V0Rm9sZGVyOiBURm9sZGVyO1xyXG5cdFxyXG5cdHRhcmdldEZpbGVzOiB7XHJcblx0XHRbZm9sZGVyUGF0aDpzdHJpbmddOlRBYnN0cmFjdEZpbGVbXVxyXG5cdH0gPSB7fTtcclxuXHJcblx0ZmlsZVN0YXR1czoge1xyXG5cdFx0W2ZvbGRlclBhdGg6c3RyaW5nXTpGaWxlU3RhdHVzW11cclxuXHR9ID0ge307XHJcblx0XHJcblx0ZmlsZUluZm86IHtcclxuXHRcdFtmb2xkZXJQYXRoOnN0cmluZ106IEZpbGVJbmZvW11cclxuXHR9ID0ge307XHJcblx0XHJcblx0b3V0bGluZURhdGE6IHtcclxuXHRcdFtmb2xkZXJQYXRoOnN0cmluZ106T3V0bGluZURhdGFbXVtdLFxyXG5cclxuXHR9ID0ge307XHJcblxyXG5cdGZpbGVPcmRlcjoge1xyXG5cdFx0W2ZvbGRlclBhdGg6c3RyaW5nXTpudW1iZXJbXVxyXG5cdH0gPSB7fTtcclxuXHJcblx0ZmxhZ0NoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRmbGFnUmVnZXRUYXJnZXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHQvL2ZsYWdSZW5hbWVkOiBib29sZWFuO1xyXG5cdGZsYWdTYXZlU2V0dGluZ3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0ZXh0cmFjdE1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRleHRyYWN0VGFzazogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHQvLyBpbmNsdWRlIG1vZGUgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0Ly8gaW5jbHVkZU1vZGU6IGJvb2xlYW47XHJcblxyXG5cdG1heExldmVsOiBudW1iZXI7XHJcblxyXG5cdC8vXHU1MTY4XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHU2Mjk4XHUzMDhBXHUzMDVGXHUzMDVGXHUzMDdGXHJcblx0Y29sbGFwc2VBbGw6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblxyXG5cdC8vIHRhcmdldEZvbGRlciBcdTMwNENcdTU5MDlcdTY2RjRcdTMwNTVcdTMwOENcdTMwNUZcdTMwODl0cnVlXHUzMDZCXHUzMDU3XHUzMDY2XHUzMDAxXHUzMEI5XHUzMEFGXHUzMEVEXHUzMEZDXHUzMEVCXHU0RjREXHU3RjZFXHUzMDkyXHU0RkREXHU2MzAxXHUzMDU3XHUzMDZBXHUzMDQ0XHUzMDVGXHUzMDgxXHUzMDZFXHUzMEQ1XHUzMEU5XHUzMEIwXHUzMDAyXHJcblx0aGFzTWFpbkNoYW5nZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0Ly9cdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTMwOTJcdTUzRDZcdTVGOTdcdTMwNTdcdTMwNUZcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTY1NzBcdTMwNkVcdTMwQUJcdTMwQTZcdTMwRjNcdTMwQzhcdTMwMDJcdThBMkRcdTVCOUFcdTUwMjQocmVhZExpbWl0KVx1MzA5Mlx1OEQ4NVx1MzA0OFx1MzA1Rlx1MzA4OVx1OEFBRFx1MzA3Rlx1OEZCQ1x1MzA3Rlx1MzA5Mlx1NkI2Mlx1MzA4MVx1MzA4Qlx1MzAwMlxyXG5cdGZpbGVjb3VudDogbnVtYmVyID0gMDtcclxuXHJcblx0Ly8gXHU1OTA5XHU2NkY0XHUzMDU1XHUzMDhDXHUzMDVGXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZFXHU5MTREXHU1MjE3XHUzMDAyIFx1NEUwMFx1NUI5QVx1OTU5M1x1OTY5NFx1MzA1NFx1MzA2OFx1MzA2Qlx1MzA1M1x1MzA2RVx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA2RVx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1MzA5Mlx1NTE4RFx1OEFBRFx1MzA3Rlx1OEZCQ1x1MzA3Rlx1MzA1N1x1MzA2Nlx1MzAwMVx1NjZGNFx1NjVCMFx1MzA1N1x1MzA1Rlx1MzA4OVx1MzA1M1x1MzA2RVx1OTE0RFx1NTIxN1x1MzA5Mlx1N0E3QVx1MzA2Qlx1MzA1OVx1MzA4QlxyXG5cdGNoYW5nZWRGaWxlczogVEZpbGVbXSA9IFtdO1xyXG5cdC8vIHJlbmFtZWRGaWxlczogeyBmaWxlOiBUQWJzdHJhY3RGaWxlLCBvbGRQYXRoOiBzdHJpbmcgfVtdID0gW107XHJcblxyXG5cdC8vIHZpZXdcdTMwQkZcdTMwQTRcdTMwRDcgRE9NXHUzMDZFaWRcdTMwNkJcdTRFRDhcdTUyQTBcclxuXHR2aWV3VHlwZTogJ2ZpbGUnfCdmb2xkZXInID0gJ2ZvbGRlcic7XHJcblxyXG5cdC8vIFx1NzNGRVx1NTcyOFx1MzA2RVx1MzBFOVx1MzBBNFx1MzBDOFx1MzBFMlx1MzBGQ1x1MzBDOS9cdTMwQzBcdTMwRkNcdTMwQUZcdTMwRTJcdTMwRkNcdTMwQzlcdTMwNkVcdTcyQjZcdTYxNEJcclxuXHR0aGVtZTogJ2xpZ2h0JyB8ICdkYXJrJztcclxuXHJcblx0cGlubmVkTW9kZSA9IGZhbHNlO1xyXG5cclxuXHRpc0RhdGF2aWV3RW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdGxlYWY6IFdvcmtzcGFjZUxlYWYsXHJcblx0XHRwbHVnaW46IE11bHRpcGxlTm90ZXNPdXRsaW5lUGx1Z2luLFxyXG5cdFx0c2V0dGluZ3M6IE11bHRpcGxlTm90ZXNPdXRsaW5lU2V0dGluZ3MsXHJcblx0KSB7XHJcblx0XHRzdXBlcihsZWFmKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG5cdH1cclxuICBcclxuXHRnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIE11bHRpcGxlTm90ZXNPdXRsaW5lRm9sZGVyVmlld1R5cGU7XHJcblx0fVxyXG4gIFxyXG5cdGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gJ01OTyAtIGZvbGRlciB2aWV3JztcclxuXHR9XHJcbiAgXHJcblx0Z2V0SWNvbigpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuICdmb2xkZXJzJztcclxuXHR9XHJcblxyXG5cdFxyXG5cdGFzeW5jIG9uT3Blbigpe1xyXG5cdFx0YXdhaXQgdGhpcy5pbml0VmlldygpO1xyXG5cclxuXHRcdC8vIERhdGF2aWV3XHUzMDZFXHUzMEVEXHUzMEZDXHUzMEM5XHUzMDkyXHU1Rjg1XHU2QTVGXHUzMDU3XHUzMDVGXHUzMDY4XHUzMDUzXHUzMDhEXHUzMDAxXHU1Mzc0XHUzMDYzXHUzMDY2XHU5MDQ1XHUzMDRCXHUzMDYzXHUzMDVGXHUzMDAyXHJcblx0XHQvLyBpZiAoY2hlY2tEYXRhdmlldyh0aGlzLmFwcCkpe1xyXG5cdFx0Ly8gXHRjb25zdCBkYXRhdmlld0FQSSA9IGdldEFQSSgpO1xyXG5cdFx0Ly8gXHQvLyBkYXRhdmlld1x1MzA0Q2luZGV4LXJlYWR5XHUzMDY3XHUzMDZBXHUzMDQ0XHU1ODM0XHU1NDA4XHUzMDZFXHUzMDdGXHU2M0NGXHU3NTNCXHUzMDkyXHU1Rjg1XHU2QTVGXHJcblx0XHQvLyBcdGlmICghZGF0YXZpZXdBUEkuaW5kZXguaW5pdGlhbGl6ZWQpe1xyXG5cdFx0Ly8gXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLm9uKFwiZGF0YXZpZXc6aW5kZXgtcmVhZHlcIiwgYXN5bmMoKSA9PiB7XHJcblx0XHQvLyBcdFx0XHRhd2FpdCB0aGlzLmluaXRWaWV3KCk7XHJcblx0XHQvLyBcdFx0fSkpO1xyXG5cdFx0Ly8gXHR9IGVsc2Uge1xyXG5cdFx0Ly8gXHRcdGF3YWl0IHRoaXMuaW5pdFZpZXcoKTtcclxuXHRcdC8vIFx0fVxyXG5cdFx0Ly8gfSBlbHNlIHtcclxuXHRcdC8vIFx0YXdhaXQgdGhpcy5pbml0VmlldygpO1xyXG5cdFx0Ly8gfVxyXG5cclxuXHR9XHJcblxyXG5cdGFzeW5jIG9uQ2xvc2UoKXtcclxuXHRcdC8vIE5vdGhpbiB0byBjbGVhbiB1cFxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBpbml0VmlldygpIHtcclxuXHRcdGF3YWl0IHRoaXMuYm9vdERlbGF5KCk7IFxyXG5cdFx0XHJcblx0XHRjaGVja1JlbGF0ZWRGaWxlcyh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRjaGVja0ZhdkFuZFJlY2VudEZpbGVzKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLCB0aGlzLnZpZXdUeXBlKTtcclxuXHJcblx0XHR0aGlzLmNvbGxhcHNlQWxsID0gdGhpcy5zZXR0aW5ncy5jb2xsYXBzZUFsbEF0U3RhcnR1cDtcclxuXHJcblx0XHQvLyBcdTMwQ0VcdTMwRkNcdTMwQzhcdTMwQkZcdTMwQTRcdTMwQzhcdTMwRUJcdTgwQ0NcdTY2NkZcdTgyNzJcdTMwNkVcdThBMkRcdTVCOUFcclxuXHRcdHRoaXMudGhlbWUgPSBnZXRUaGVtZSgpO1xyXG5cdFx0c2V0Tm90ZVRpdGxlQmFja2dyb3VuZENvbG9yKHRoaXMudGhlbWUsIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHJcblx0XHRpZiAodGhpcy50YXJnZXRGb2xkZXIpe1xyXG5cdFx0XHR0aGlzLnJlZnJlc2hWaWV3KHRydWUsIHRydWUpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5hY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdFx0aWYgKHRoaXMuYWN0aXZlRmlsZSl7XHJcblx0XHRcdFx0dGhpcy50YXJnZXRGb2xkZXIgPSB0aGlzLmFjdGl2ZUZpbGUucGFyZW50O1xyXG5cdFx0XHRcdHRoaXMucmVmcmVzaFZpZXcodHJ1ZSx0cnVlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJNdWx0aXBsZSBOb3RlcyBPdXRsaW5lOiBmYWlsZWQgdG8gZ2V0IGFjdGl2ZSBmaWxlXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cdTgxRUFcdTUyRDVcdTY2RjRcdTY1QjBcdTMwNkVcdTMwNUZcdTMwODFcdTMwNkVcdTMwQzdcdTMwRkNcdTMwQkZcdTU5MDlcdTY2RjRcdTMwMDFcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdThGRkRcdTUyQTAvXHU1MjRBXHU5NjY0XHUzMDZFXHU3NkUzXHU4OTk2IG9ic2VydmUgZmlsZSBjaGFuZ2UvY3JlYXRlL2RlbGV0ZVxyXG5cdFx0Y29uc3QgZGVib3VuY2VyUmVxdWVzdFJlZnJlc2g6RGVib3VuY2VyPFtdPiA9IGRlYm91bmNlKHRoaXMuYXV0b1JlZnJlc2gsMzAwMCx0cnVlKTtcclxuXHRcdHRoaXMuZmxhZ0NoYW5nZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuZmxhZ1JlZ2V0VGFyZ2V0ID0gZmFsc2U7IFxyXG5cclxuXHRcdC8vXHU0RUNBXHU1RjhDXHUzMEEyXHUzMEFGXHUzMEM2XHUzMEEzXHUzMEQ2XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDZCXHU4MjcyXHUzMDY1XHUzMDUxXHUzMDU5XHUzMDhCXHU1ODM0XHU1NDA4XHUzMDZBXHUzMDY5XHUzMDZGXHU1MUU2XHU3NDA2XHUzMDkyXHU4RkZEXHU1MkEwXHJcblx0XHQvLyB0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW9wZW4nLCAoZmlsZSkgPT4ge1xyXG5cdFx0Ly8gfSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLm9uKCdjaGFuZ2VkJywgKGZpbGUpID0+IHtcclxuXHRcdFx0Zm9yIChjb25zdCBmb2xkZXIgaW4gdGhpcy50YXJnZXRGaWxlcyl7XHJcblx0XHRcdFx0aWYgKHRoaXMudGFyZ2V0RmlsZXNbZm9sZGVyXS5pbmNsdWRlcyhmaWxlKSl7XHJcblx0XHRcdFx0XHRpZiAoIXRoaXMuY2hhbmdlZEZpbGVzLmluY2x1ZGVzKGZpbGUpKXtcclxuXHRcdFx0XHRcdFx0dGhpcy5jaGFuZ2VkRmlsZXMucHVzaChmaWxlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuZmxhZ0NoYW5nZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0ZGVib3VuY2VyUmVxdWVzdFJlZnJlc2guY2FsbCh0aGlzKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignY3JlYXRlJywoZmlsZSk9PntcclxuXHRcdFx0dGhpcy5mbGFnUmVnZXRUYXJnZXQgPSB0cnVlO1xyXG5cdFx0XHRkZWJvdW5jZXJSZXF1ZXN0UmVmcmVzaC5jYWxsKHRoaXMpO1xyXG5cdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC52YXVsdC5vbignZGVsZXRlJywoZmlsZSk9PntcclxuXHRcdFx0bGV0IGNoYW5nZWRSZWxhdGVkRmlsZXMgPSBoYW5kbGVEZWxldGVSZWxhdGVkRmlsZXMoZmlsZSx0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0aWYgKGNoYW5nZWRSZWxhdGVkRmlsZXMpe1xyXG5cdFx0XHRcdHRoaXMuZmxhZ1NhdmVTZXR0aW5ncyA9IHRydWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCBjaGFuZ2VkRmF2QW5kUmVjZW50ID0gaGFuZGxlRGVsZXRlRmF2QW5kUmVjZW50RmlsZXMoZmlsZSwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdGlmIChjaGFuZ2VkRmF2QW5kUmVjZW50KXtcclxuXHRcdFx0XHR0aGlzLmZsYWdTYXZlU2V0dGluZ3MgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuZmxhZ1JlZ2V0VGFyZ2V0ID0gdHJ1ZTtcclxuXHRcdFx0ZGVib3VuY2VyUmVxdWVzdFJlZnJlc2guY2FsbCh0aGlzKTtcclxuXHRcdH0pKTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAudmF1bHQub24oJ3JlbmFtZScsKGZpbGUsIG9sZFBhdGgpPT57XHJcblx0XHRcdGxldCBjaGFuZ2VkUmVsYXRlZEZpbGVzID0gaGFuZGxlUmVuYW1lUmVsYXRlZEZpbGVzKGZpbGUsb2xkUGF0aCwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdGlmIChjaGFuZ2VkUmVsYXRlZEZpbGVzKXtcclxuXHRcdFx0XHR0aGlzLmZsYWdTYXZlU2V0dGluZ3MgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBjaGFuZ2VkRmF2QW5kUmVjZW50ID0gaGFuZGxlUmVuYW1lRmF2QW5kUmVjZW50RmlsZXMoZmlsZSxvbGRQYXRoLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0aWYgKGNoYW5nZWRGYXZBbmRSZWNlbnQpe1xyXG5cdFx0XHRcdHRoaXMuZmxhZ1NhdmVTZXR0aW5ncyA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5mbGFnUmVnZXRUYXJnZXQgPSB0cnVlO1xyXG5cdFx0XHRkZWJvdW5jZXJSZXF1ZXN0UmVmcmVzaC5jYWxsKHRoaXMpO1xyXG5cdFx0fSkpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2Nzcy1jaGFuZ2UnLCAoZSk9PntcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IG5ld1RoZW1lID0gZ2V0VGhlbWUoKTtcclxuXHRcdFx0aWYgKG5ld1RoZW1lICE9PSB0aGlzLnRoZW1lKXtcclxuXHRcdFx0XHR0aGlzLnRoZW1lID0gbmV3VGhlbWU7XHJcblx0XHRcdFx0c2V0Tm90ZVRpdGxlQmFja2dyb3VuZENvbG9yKHRoaXMudGhlbWUsIHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9KSk7XHJcblxyXG5cdH1cdFxyXG5cdFx0XHJcblx0cHJpdmF0ZSBhc3luYyBib290RGVsYXkoKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7IHNldFRpbWVvdXQocmVzb2x2ZSwgNjAwKTt9KTtcclxuXHR9XHJcblxyXG5cdC8vIFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1NEZFRVx1NkI2M1x1MzAwMVx1NTI0QVx1OTY2NFx1MzAwMVx1MzBFQVx1MzBDRFx1MzBGQ1x1MzBFMFx1MzA2QVx1MzA2OVx1MzA2RVx1OTY5Qlx1MzA2RVx1ODFFQVx1NTJENVx1NjZGNFx1NjVCMFxyXG5cdHByaXZhdGUgYXN5bmMgYXV0b1JlZnJlc2goKXtcclxuXHRcdGlmICghKHRoaXMuZmxhZ0NoYW5nZWQgfHwgdGhpcy5mbGFnUmVnZXRUYXJnZXQgfHwgdGhpcy5mbGFnU2F2ZVNldHRpbmdzKSl7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmZsYWdDaGFuZ2VkICYmICF0aGlzLmZsYWdSZWdldFRhcmdldCl7XHJcblx0XHRcdGZvciAobGV0IGk9MDsgaSA8IHRoaXMuY2hhbmdlZEZpbGVzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRmb3IgKGNvbnN0IGZvbGRlciBpbiB0aGlzLnRhcmdldEZpbGVzKXtcclxuXHRcdFx0XHRcdGxldCBpbmRleCA9IHRoaXMudGFyZ2V0RmlsZXNbZm9sZGVyXS5pbmRleE9mKHRoaXMuY2hhbmdlZEZpbGVzW2ldKTtcclxuXHRcdFx0XHRcdGlmIChpbmRleDwwKXtcclxuXHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly9cdTU5MDlcdTY2RjRcdTMwNTdcdTMwNUZcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTMwNkVcdTMwRDVcdTMwQTFcdTMwQTRcdTMwRUJcdTYwQzVcdTU4MzFcdTMwNjhcdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTMwOTJcdTY2RjRcdTY1QjBcclxuXHRcdFx0XHRcdHRoaXMuZmlsZUluZm9bZm9sZGVyXVtpbmRleF0gPSBhd2FpdCBnZXRGaWxlSW5mbyh0aGlzLmFwcCwgdGhpcy50YXJnZXRGaWxlc1tmb2xkZXJdW2luZGV4XSBhcyBURmlsZSwgdGhpcy5zZXR0aW5ncywgZmFsc2UsIHRoaXMuaXNEYXRhdmlld0VuYWJsZWQpO1xyXG5cdFx0XHRcdFx0Y29uc3QgbmV3RGF0YSA9IGF3YWl0IGdldE91dGxpbmUodGhpcy5hcHAsIHRoaXMudGFyZ2V0RmlsZXNbZm9sZGVyXVtpbmRleF0gYXMgVEZpbGUsIHRoaXMuZmlsZVN0YXR1c1tmb2xkZXJdW2luZGV4XSwgdGhpcy5maWxlSW5mb1tmb2xkZXJdW2luZGV4XSwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdFx0XHRpZiAobmV3RGF0YSkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLm91dGxpbmVEYXRhW2ZvbGRlcl1baW5kZXhdID0gbmV3RGF0YTtcclxuXHRcdFx0XHRcdFx0dGhpcy5maWxlU3RhdHVzW2ZvbGRlcl1baW5kZXhdLm91dGxpbmVSZWFkeSA9IHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gRE9NXHUzMDkyXHU2NkY0XHU2NUIwXHJcblx0XHRcdFx0XHRjb25zdCB1cGRhdGVOb3RlQ2hpbGRyZW5FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdNTk8nK3RoaXMudmlld1R5cGUrdGhpcy50YXJnZXRGaWxlc1tmb2xkZXJdW2luZGV4XS5wYXRoKTtcclxuXHRcdFx0XHRcdHVwZGF0ZU5vdGVDaGlsZHJlbkVsLmVtcHR5KCk7XHJcblx0XHRcdFx0XHRjb25zdHJ1Y3RPdXRsaW5lRE9NLmNhbGwodGhpcywgdGhpcy50YXJnZXRGaWxlc1tmb2xkZXJdW2luZGV4XSwgdGhpcy5maWxlSW5mb1tmb2xkZXJdW2luZGV4XSwgdGhpcy5vdXRsaW5lRGF0YVtmb2xkZXJdW2luZGV4XSwgdXBkYXRlTm90ZUNoaWxkcmVuRWwsICdmb2xkZXInKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0aWYgKHRoaXMuZmxhZ1NhdmVTZXR0aW5ncyl7XHJcblx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMuZmxhZ1JlZ2V0VGFyZ2V0KXtcclxuXHRcdFx0dGhpcy5yZWZyZXNoVmlldyh0aGlzLmZsYWdSZWdldFRhcmdldCwgdGhpcy5mbGFnUmVnZXRUYXJnZXQpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jaGFuZ2VkRmlsZXMgPSBbXTtcclxuXHRcdC8vIHRoaXMucmVuYW1lZEZpbGVzID0gW107XHJcblx0XHR0aGlzLmZsYWdSZWdldFRhcmdldCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mbGFnQ2hhbmdlZCA9IGZhbHNlO1xyXG5cdFx0Ly8gdGhpcy5mbGFnUmVuYW1lZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mbGFnU2F2ZVNldHRpbmdzID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvLyBcdTMwRUFcdTMwRDVcdTMwRUNcdTMwQzNcdTMwQjdcdTMwRTVcdTMwQkJcdTMwRjNcdTMwQkZcdTMwRkMgXHJcblx0Ly8gZmxhZ0dldFRhcmdldFx1MzA0Q3RydWU6IFx1NUJGRVx1OEM2MVx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA5Mlx1NTE4RFx1NTNENlx1NUY5N1xyXG5cdC8vIGZsYWdHZXRPdXRsaW5lXHUzMDRDdHJ1ZTogXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHU2MEM1XHU1ODMxXHUzMDkyXHU1MThEXHU1M0Q2XHU1Rjk3XHJcblx0Ly8gXHUzMDVEXHUzMDZFXHU1RjhDVUlcdTkwRThcdTUyMDZcdTMwNjhcdTMwQTJcdTMwQTZcdTMwQzhcdTMwRTlcdTMwQTRcdTMwRjNcdTkwRThcdTUyMDZcdTMwOTJcdTYzQ0ZcdTc1M0JcclxuXHRhc3luYyByZWZyZXNoVmlldyhmbGFnR2V0VGFyZ2V0OmJvb2xlYW4sIGZsYWdHZXRPdXRsaW5lOmJvb2xlYW4pe1xyXG5cdFx0XHJcblx0XHQvLyBcdTYzQ0ZcdTc1M0JcdTYyNDBcdTg5ODFcdTY2NDJcdTk1OTNcdTMwOTJcdTZFMkNcdTVCOUFcclxuXHRcdGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cclxuXHRcdC8vZGF0YXZpZXdcdTMwQUFcdTMwRjNcdTMwQUFcdTMwRDVcdTMwQzFcdTMwQTdcdTMwQzNcdTMwQUZcclxuXHRcdHRoaXMuaXNEYXRhdmlld0VuYWJsZWQgPSBjaGVja0RhdGF2aWV3KHRoaXMuYXBwKTtcclxuXHJcblx0XHQvLyBcdTMwQjlcdTMwQUZcdTMwRURcdTMwRkNcdTMwRUJcdTRGNERcdTdGNkVcdTMwNkVcdTUzRDZcdTVGOTdcclxuXHRcdGNvbnN0IGNvbnRhaW5lckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ01OT2ZvbGRlcnZpZXctbGlzdGNvbnRhaW5lcicpO1xyXG5cclxuXHRcdGNvbnN0IHByZXZpb3VzWSA9IGNvbnRhaW5lckVsPy5zY3JvbGxUb3AgPyBjb250YWluZXJFbC5zY3JvbGxUb3AgOiAwO1xyXG5cclxuXHRcdC8vIFx1MzBENVx1MzBBOVx1MzBFQlx1MzBDMFx1MzA2Qlx1NTQyQlx1MzA3RVx1MzA4Q1x1MzA4Qlx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA5Mlx1NTNENlx1NUY5N1xyXG5cdFx0dGhpcy5maWxlY291bnQgPSAwO1xyXG5cdFx0aWYgKGZsYWdHZXRUYXJnZXQpe1xyXG5cdFx0XHRpZiAodGhpcy50YXJnZXRGb2xkZXIpe1xyXG5cdFx0XHRcdHRoaXMuY2xlYXJEYXRhcygpO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucHJvY2Vzc0ZvbGRlcih0aGlzLnRhcmdldEZvbGRlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBtaWRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5zaG93RGVidWdJbmZvKXtcclxuXHRcdCBcdGNvbnNvbGUubG9nICgnTXVsdGlwbGUgTm90ZXMgT3V0bGluZTogdGltZSByZXF1aXJlZCB0byBnZXQgb3V0bGluZXMsIGZvbGRlciB2aWV3OiAnLHRoaXMudGFyZ2V0Rm9sZGVyLnBhdGgsIG1pZFRpbWUgLSBzdGFydFRpbWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGRyYXdVSUZvbGRlclZpZXcuY2FsbCh0aGlzKTtcclxuXHRcdHRoaXMuZHJhd091dGxpbmUocHJldmlvdXNZKTtcclxuXHJcblx0XHQvLyBcdTYzQ0ZcdTc1M0JcdTYyNDBcdTg5ODFcdTY2NDJcdTk1OTNcdTMwOTJcdTZFMkNcdTVCOUFcclxuXHRcdGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnNob3dEZWJ1Z0luZm8pe1xyXG5cdFx0IFx0Y29uc29sZS5sb2cgKCdNdWx0aXBsZSBOb3RlcyBPdXRsaW5lOiB0aW1lIHJlcXVpcmVkIHRvIGRyYXcgb3V0bGluZXMsIGZvbGRlciB2aWV3OiAnLHRoaXMudGFyZ2V0Rm9sZGVyLnBhdGgsIGVuZFRpbWUgLSBtaWRUaW1lKTtcclxuXHRcdCBcdGNvbnNvbGUubG9nICgnTXVsdGlwbGUgTm90ZXMgT3V0bGluZTogdGltZSByZXF1aXJlZCB0byByZWZyZXNoIHZpZXcsIGZvbGRlciB2aWV3OiAnLHRoaXMudGFyZ2V0Rm9sZGVyLnBhdGgsIGVuZFRpbWUgLSBzdGFydFRpbWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gXHUzMEQ1XHUzMEE5XHUzMEVCXHUzMEMwXHU1MTg1XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHUzMDkyXHU1MUU2XHU3NDA2XHVGRjA4XHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU1M0Q2XHU1Rjk3XHUzMDAxXHUzMEI5XHUzMEM2XHUzMEZDXHUzMEJGXHUzMEI5XHU1MjFEXHU2NzFGXHU1MzE2XHUzMDAxXHU2MEM1XHU1ODMxXHUzMDAxXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHU1M0Q2XHU1Rjk3XHVGRjA5XHJcblx0YXN5bmMgcHJvY2Vzc0ZvbGRlciAoZm9sZGVyOiBURm9sZGVyKTpQcm9taXNlPHZvaWQ+IHtcclxuXHJcblx0XHR0aGlzLnRhcmdldEZpbGVzW2ZvbGRlci5wYXRoXSA9IGZvbGRlci5jaGlsZHJlbjtcclxuXHRcdHRoaXMuZmlsZVN0YXR1c1tmb2xkZXIucGF0aF0gPSBpbml0RmlsZVN0YXR1cyh0aGlzLnRhcmdldEZpbGVzW2ZvbGRlci5wYXRoXSk7XHJcblx0XHR0aGlzLmZpbGVPcmRlcltmb2xkZXIucGF0aF0gPSBbLi4uQXJyYXkodGhpcy50YXJnZXRGaWxlc1tmb2xkZXIucGF0aF0ubGVuZ3RoKV0ubWFwKChfLCBpKSA9PiBpKTtcclxuXHRcdHNvcnRGaWxlT3JkZXIodGhpcy5maWxlT3JkZXJbZm9sZGVyLnBhdGhdLCB0aGlzLnRhcmdldEZpbGVzW2ZvbGRlci5wYXRoXSwgdGhpcy5maWxlU3RhdHVzW2ZvbGRlci5wYXRoXSwgdGhpcy5maWxlSW5mb1tmb2xkZXIucGF0aF0sIHRoaXMuc2V0dGluZ3MpO1xyXG5cclxuXHRcdHRoaXMuZmlsZUluZm9bZm9sZGVyLnBhdGhdID0gW107XHJcblx0XHR0aGlzLm91dGxpbmVEYXRhW2ZvbGRlci5wYXRoXSA9IFtdO1xyXG5cclxuXHJcblx0XHRpZiAoZm9sZGVyLmNoaWxkcmVuLmxlbmd0aCA8PSB0aGlzLnNldHRpbmdzLnByb2Nlc3NMaW1pdCl7XHJcblx0XHRcdFt0aGlzLmZpbGVTdGF0dXNbZm9sZGVyLnBhdGhdLCB0aGlzLmZpbGVJbmZvW2ZvbGRlci5wYXRoXSx0aGlzLm91dGxpbmVEYXRhW2ZvbGRlci5wYXRoXV0gPSBhd2FpdCB0aGlzLmdldE91dGxpbmVzKHRoaXMudGFyZ2V0RmlsZXNbZm9sZGVyLnBhdGhdLCB0aGlzLmZpbGVTdGF0dXNbZm9sZGVyLnBhdGhdKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHU2MEM1XHU1ODMxXHUzMDAxXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHU2MEM1XHU1ODMxXHUzMDkyXHU0RjVDXHU2MjEwXHUzMEZCXHU1M0Q2XHU1Rjk3XHJcblx0YXN5bmMgZ2V0T3V0bGluZXMgKGZpbGVzOiBUQWJzdHJhY3RGaWxlW10sIHN0YXR1czogRmlsZVN0YXR1c1tdKTpQcm9taXNlPFtGaWxlU3RhdHVzW10sIEZpbGVJbmZvW10sIE91dGxpbmVEYXRhW11bXV0+IHtcclxuXHRcdGxldCBmaWxlSW5mbzpGaWxlSW5mb1tdID0gW107XHJcblx0XHRsZXQgb3V0bGluZURhdGE6IE91dGxpbmVEYXRhW11bXSA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKyl7XHJcblxyXG5cdFx0XHQvL1x1NTAwQlx1NTIyNVx1MzA2RUFsd2F5cyBvbiBUb3BcdTMwNkVcdTUyMjRcdTVCOUFcclxuXHRcdFx0aWYgKGNoZWNrRmxhZyh0aGlzLnRhcmdldEZvbGRlciwgZmlsZXNbaV0sICd0b3AnLCB0aGlzLnNldHRpbmdzKSA9PSB0cnVlKXtcclxuXHRcdFx0XHRzdGF0dXNbaV0uaXNUb3AgPXRydWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChzdGF0dXNbaV0uaXNGb2xkZXIpe1xyXG5cdFx0XHRcdC8vIFx1MzBENVx1MzBBOVx1MzBFQlx1MzBDMFx1MzBGQ1x1MzA2QVx1MzA4OVx1NjVCMFx1MzA1Rlx1MzA2Qlx1MzA1RFx1MzA2RVx1MzBENVx1MzBBOVx1MzBFQlx1MzBDMFx1MzBGQ1x1MzA5Mlx1NTFFNlx1NzQwNlxyXG5cdFx0XHRcdGZpbGVJbmZvLnB1c2godW5kZWZpbmVkKTtcclxuXHRcdFx0XHRvdXRsaW5lRGF0YS5wdXNoKHVuZGVmaW5lZCk7XHJcblx0XHRcdFx0aWYgKCF0aGlzLnNldHRpbmdzLmNvbGxhcHNlRm9sZGVyKXtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucHJvY2Vzc0ZvbGRlcihmaWxlc1tpXSBhcyBURm9sZGVyKTtcclxuXHRcdFx0XHRcdHN0YXR1c1tpXS5vdXRsaW5lUmVhZHkgPSB0cnVlO1xyXG5cdFx0XHRcdH1cdFx0XHRcdFxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIFx1MzBENVx1MzBBMVx1MzBBNFx1MzBFQlx1MzA2QVx1MzA4OVx1NjBDNVx1NTgzMVx1MzA5Mlx1NTNENlx1NUY5N1xyXG5cdFx0XHRcdGlmICgodGhpcy5maWxlY291bnQgPCB0aGlzLnNldHRpbmdzLnJlYWRMaW1pdCB8fCBzdGF0dXNbaV0uaXNUb3AgKSl7XHJcblx0XHRcdFx0XHRjb25zdCBpbmZvID0gYXdhaXQgZ2V0RmlsZUluZm8odGhpcy5hcHAsIGZpbGVzW2ldIGFzIFRGaWxlLCB0aGlzLnNldHRpbmdzLCBmYWxzZSwgdGhpcy5pc0RhdGF2aWV3RW5hYmxlZCk7XHJcblx0XHRcdFx0XHRmaWxlSW5mby5wdXNoKGluZm8pO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRPdXRsaW5lKHRoaXMuYXBwLCBmaWxlc1tpXSBhcyBURmlsZSwgc3RhdHVzW2ldLCBpbmZvLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdGlmIChkYXRhKXtcclxuXHRcdFx0XHRcdFx0b3V0bGluZURhdGEucHVzaChkYXRhKTtcclxuXHRcdFx0XHRcdFx0c3RhdHVzW2ldLm91dGxpbmVSZWFkeSA9IHRydWU7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRvdXRsaW5lRGF0YS5wdXNoKHVuZGVmaW5lZCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZmlsZUluZm8ucHVzaCh1bmRlZmluZWQpO1xyXG5cdFx0XHRcdFx0b3V0bGluZURhdGEucHVzaCh1bmRlZmluZWQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuZmlsZWNvdW50Kys7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBbc3RhdHVzLGZpbGVJbmZvLG91dGxpbmVEYXRhXTtcclxuXHR9XHJcblxyXG5cclxuXHQvLyAgXHUzMEEyXHUzMEE2XHUzMEM4XHUzMEU5XHUzMEE0XHUzMEYzXHU2M0NGXHU3NTNCXHRcclxuXHRwcml2YXRlIGRyYXdPdXRsaW5lKHByZXZpb3VzWTogbnVtYmVyKTp2b2lkIHtcclxuXHJcblx0XHQvLyBpbmNsdWRlIG9ubHkgbW9kZVx1MzA0QiAgZmlsdGVyXHU5NUEyXHU5MDIzXHUzMEIzXHUzMEUxXHUzMEYzXHUzMEM4XHUzMEEyXHUzMEE2XHUzMEM4XHJcblx0XHQvLyB0aGlzLmluY2x1ZGVNb2RlID0gKHRoaXMuc2V0dGluZ3MuaW5jbHVkZU9ubHkgIT0gJ25vbmUnKSAmJiAoQm9vbGVhbih0aGlzLnNldHRpbmdzLndvcmRzVG9JbmNsdWRlLmxlbmd0aCkgfHwgKHRoaXMuc2V0dGluZ3MuaW5jbHVkZUJlZ2lubmluZykpO1xyXG5cclxuXHJcblx0XHQvLyBcdTg4NjhcdTc5M0FcdTMwQUFcdTMwRjNcdTMwNkJcdTMwNkFcdTMwNjNcdTMwNjZcdTMwNDRcdTMwOEJcdTg5OEJcdTUxRkFcdTMwNTdcdTMwRUNcdTMwRDlcdTMwRUJcdTMwNkVcdTY3MDBcdTlBRDhcdTUwMjRcclxuXHRcdHRoaXMubWF4TGV2ZWwgPSB0aGlzLnNldHRpbmdzLmhlYWRpbmdMZXZlbC5pbmRleE9mKHRydWUpO1xyXG5cclxuXHJcblx0XHRjb25zdCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQgPSBjcmVhdGVEaXYoXCJuYXYtZmlsZXMtY29udGFpbmVyIG5vZGUtaW5zZXJ0LWV2ZW50XCIpO1xyXG5cdFx0Y29uc3Qgcm9vdEVsOiBIVE1MRWxlbWVudCA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdihcInRyZWUtaXRlbSBuYXYtZm9sZGVyIG1vZC1yb290XCIpOyBcclxuXHRcdGNvbnN0IHJvb3RDaGlsZHJlbkVsOiBIVE1MRWxlbWVudCA9IHJvb3RFbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0tY2hpbGRyZW4gbmF2LWZvbGRlci1jaGlsZHJlblwiKTsgXHJcblxyXG5cdFx0Ly8gaWQgXHUzMDkyXHU0RUQ4XHU1MkEwXHVGRjA4XHUzMEI5XHUzMEFGXHUzMEVEXHUzMEZDXHUzMEVCXHU0RjREXHU3RjZFXHUzMDZFXHU2MjhBXHU2M0UxXHU3NTI4XHVGRjA5XHJcblx0XHRjb250YWluZXJFbC5pZCA9ICdNTk9mb2xkZXJ2aWV3LWxpc3Rjb250YWluZXInO1xyXG5cclxuXHRcdC8vIFx1MzBCRlx1MzBGQ1x1MzBCMlx1MzBDM1x1MzBDOFx1MzA2RVx1MzBENVx1MzBBOVx1MzBFQlx1MzBDMFx1NTQwRFxyXG5cdFx0Y29uc3QgZm9sZGVyRWw6IEhUTUxFbGVtZW50ID0gcm9vdENoaWxkcmVuRWwuY3JlYXRlRGl2KFwidHJlZS1pdG1lIG5hdi1mb2xkZXJcIik7XHJcblx0XHRjb25zdCBmb2xkZXJUaXRsZUVsOiBIVE1MRWxlbWVudCA9IGZvbGRlckVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1zZWxmIGlzLWNsaWNrYWJsZSBtb2QtY29sbGFwc2libGUgbmF2LWZvbGRlci10aXRsZSBpcy10YXJnZXRmb2xkZXJcIik7XHJcblx0XHQvLyBzZXRJY29uKGZvbGRlclRpdGxlRWwsICdmb2xkZXInKTtcclxuXHRcdGZvbGRlclRpdGxlRWwuY3JlYXRlRGl2KFwidHJlZS1pdGVtLWlubmVyIG5hdi1mb2xkZXItdGl0bGUtY29udGVudFwiKS5zZXRUZXh0KHRoaXMudGFyZ2V0Rm9sZGVyLnBhdGgpO1xyXG5cclxuXHRcdGZvbGRlclRpdGxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcclxuXHRcdFx0XCJjb250ZXh0bWVudVwiLFxyXG5cdFx0XHQoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0XHRjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcclxuXHRcdFx0XHQvLyBmYXZvcml0ZVx1MzA2Qlx1OEZGRFx1NTJBMC9cdTUyNEFcdTk2NjRcclxuXHRcdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5mYXZvcml0ZS5mb2xkZXIuaW5jbHVkZXModGhpcy50YXJnZXRGb2xkZXIucGF0aCkpe1xyXG5cdFx0XHRcdFx0bWVudS5hZGRJdGVtKChpdGVtKT0+XHJcblx0XHRcdFx0XHRcdGl0ZW1cdFx0XHJcblx0XHRcdFx0XHRcdFx0LnNldFRpdGxlKFwiTU5POiBSZW1vdmUgZnJvbSBmYXZvcml0ZXNcIilcclxuXHRcdFx0XHRcdFx0XHQuc2V0SWNvbignYm9va21hcmstbWludXMnKVxyXG5cdFx0XHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGVsZXRlRmF2QW5kUmVjZW50LmNhbGwodGhpcywgdGhpcy50YXJnZXRGb2xkZXIucGF0aCwgJ2ZvbGRlcicsICdmYXZvcml0ZScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRtZW51LmFkZEl0ZW0oKGl0ZW0pPT5cclxuXHRcdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRUaXRsZShcIk1OTzogQWRkIHRvIGZhdm9yaXRlc1wiKVxyXG5cdFx0XHRcdFx0XHRcdC5zZXRJY29uKCdib29rbWFyay1wbHVzJylcclxuXHRcdFx0XHRcdFx0XHQub25DbGljayhhc3luYyAoKT0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdHVwZGF0ZUZhdkFuZFJlY2VudC5jYWxsKHRoaXMsIHRoaXMudGFyZ2V0Rm9sZGVyLnBhdGgsICdmb2xkZXInLCdmYXZvcml0ZScpO1xyXG5cdFx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdFx0fSkpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudCk7XHJcblx0XHRcdH1cclxuXHRcdClcclxuXHJcblx0XHRjb25zdCBmb2xkZXJDaGlsZHJlbkVsOiBIVE1MRWxlbWVudCA9IGZvbGRlckVsLmNyZWF0ZURpdihcInRyZWUtaXRlbS1jaGlsZHJlbiBuYXYtZm9sZGVyLWNoaWxkcmVuXCIpO1xyXG5cclxuXHRcdC8vIEFsd2F5cyBvbiBUb3BcclxuXHRcdGNvbnN0IGNhdGVnb3J5QU9URWw6IEhUTUxFbGVtZW50ID0gZm9sZGVyQ2hpbGRyZW5FbC5jcmVhdGVEaXYoXCJ0cmVlLWl0ZW0gbmF2LWZvbGRlclwiKTtcclxuXHJcblxyXG5cdFx0Ly8gXHUzMEUxXHUzMEE0XHUzMEYzXHUzMEQ1XHUzMEExXHUzMEE0XHUzMEVCXHJcblx0XHRjb25zdCBjYXRlZ29yeU1haW5FbDogSFRNTEVsZW1lbnQgPSBmb2xkZXJDaGlsZHJlbkVsLmNyZWF0ZURpdihcInRyZWUtaXRlbSBuYXYtZm9sZGVyXCIpOyAvLyBtb2Qtcm9vdCBcdTMwOTJcdTk2NjRcdTUzQkJcdTMwNTdcdTMwNUZcclxuXHRcdGNvbnN0cnVjdE5vdGVET00uY2FsbCh0aGlzLCB0aGlzLnRhcmdldEZpbGVzW3RoaXMudGFyZ2V0Rm9sZGVyLnBhdGhdLCBcclxuXHRcdFx0dGhpcy5maWxlU3RhdHVzW3RoaXMudGFyZ2V0Rm9sZGVyLnBhdGhdLCB0aGlzLmZpbGVJbmZvW3RoaXMudGFyZ2V0Rm9sZGVyLnBhdGhdLCB0aGlzLm91dGxpbmVEYXRhW3RoaXMudGFyZ2V0Rm9sZGVyLnBhdGhdLFxyXG5cdFx0XHRjYXRlZ29yeU1haW5FbCwgJ2ZvbGRlcicsIGNhdGVnb3J5QU9URWwsIHRoaXMudGFyZ2V0Rm9sZGVyLCB0aGlzLmZpbGVPcmRlclt0aGlzLnRhcmdldEZvbGRlci5wYXRoXSk7XHJcblx0XHRcclxuXHRcdC8vIFx1MzBBMlx1MzBBNlx1MzBDOFx1MzBFOVx1MzBBNFx1MzBGM1x1OTBFOFx1NTIwNlx1MzA2RVx1NjNDRlx1NzUzQlx1NUI5Rlx1ODg0Q1xyXG5cdFx0dGhpcy5jb250ZW50RWwuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWwpO1xyXG5cclxuXHRcdC8vIFx1MzBCOVx1MzBBRlx1MzBFRFx1MzBGQ1x1MzBFQlx1NEY0RFx1N0Y2RVx1MzA5Mlx1NUZBOVx1NTE0M1xyXG5cdFx0aWYgKHRoaXMuaGFzTWFpbkNoYW5nZWQgPT0gZmFsc2UgJiYgcHJldmlvdXNZICE9IDApe1xyXG5cdFx0XHRjb250YWluZXJFbC5zY3JvbGxUb3AgPSBwcmV2aW91c1k7XHJcblx0XHR9XHJcblx0XHR0aGlzLmhhc01haW5DaGFuZ2VkID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRjbGVhckRhdGFzKCk6dm9pZCB7XHJcblx0XHR0aGlzLnRhcmdldEZpbGVzID0ge307XHJcblx0XHR0aGlzLmZpbGVTdGF0dXMgPSB7fTtcclxuXHRcdHRoaXMuZmlsZUluZm8gPSB7fTtcclxuXHRcdHRoaXMub3V0bGluZURhdGEgPSB7fTtcclxuXHRcdHRoaXMuZmlsZU9yZGVyID0ge307XHJcblx0fVxyXG5cclxufVxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSx3QkFBbUM7OztBQ0FuQyx1QkFBNkM7QUFFN0MsdUJBQTZEOzs7QUNGN0Qsc0JBQW9DO0FBRzdCLDhCQUE4QixNQUFVLE1BQVksTUFBZSxPQUFvQztBQUg5RztBQUtJLE1BQUksUUFBZTtBQUNuQixXQUFTLElBQUUsR0FBRyxJQUFHLFlBQUsscUJBQUwsbUJBQXVCLFNBQVEsS0FBSTtBQUNoRCxVQUFNLFVBQVUsS0FBSSxjQUFjLHFCQUFxQixLQUFLLGlCQUFpQixHQUFHLE1BQU0sS0FBSztBQUMzRixRQUFJLG1CQUFtQix1QkFBTTtBQUN6QixZQUFNLEtBQUs7QUFBQTtBQUFBO0FBSW5CLFdBQVMsSUFBSSxHQUFHLElBQUcsTUFBTSxRQUFRLEtBQUs7QUFDbEMsUUFBSSxNQUFNLEdBQUcsaUJBQWlCLFFBQU87QUFDakM7QUFBQTtBQUVKLFVBQU0sVUFBVSxLQUFJLGNBQWMscUJBQXFCLE1BQU0sR0FBRyxNQUFNLEtBQUs7QUFDM0UsUUFBSSxtQkFBbUIsdUJBQU07QUFDekIsWUFBTSxLQUFLO0FBQUE7QUFBQTtBQUduQixTQUFP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
