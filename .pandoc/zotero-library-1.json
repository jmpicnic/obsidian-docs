[
  {"id":"baeldungUMLStateDiagrams2023","abstract":"Learn about the components and syntax of a UML state diagram.","accessed":{"date-parts":[["2023",12,5]]},"author":[{"literal":"baeldung"}],"citation-key":"baeldungUMLStateDiagrams2023","issued":{"date-parts":[["2023",4,21]]},"language":"en-US","title":"UML State Diagrams Explained | Baeldung on Computer Science","type":"webpage","URL":"https://www.baeldung.com/cs/uml-state-diagrams"},
  {"id":"faergemandSDL921994","abstract":"This paper contains an introduction to SDL — Specification and Description Language — as it appears in the revised CCITT (At the plenary assembly March 1993, CCITT was renamed to WTSC (World Telecommunication Standardization Conference); however, this paper uses the more familiar term CCITT) recommendation. The paper covers main aspects of the new version of SDL in three main areas: structure, behaviour and data. The paper covers in particular the new features for object-oriented structuring in the language. The paper concludes with an overview of current activities in standards, research and industry.","accessed":{"date-parts":[["2023",12,5]]},"author":[{"family":"Færgemand","given":"Ove"},{"family":"Olsen","given":"Anders"}],"citation-key":"faergemandSDL921994","container-title":"Computer Networks and ISDN Systems","container-title-short":"Computer Networks and ISDN Systems","DOI":"10.1016/0169-7552(94)90016-7","ISSN":"0169-7552","issue":"9","issued":{"date-parts":[["1994",5,1]]},"page":"1143-1167","source":"ScienceDirect","title":"Introduction to SDL-92","type":"article-journal","URL":"https://www.sciencedirect.com/science/article/pii/0169755294900167","volume":"26"},
  {"id":"harelStatechartsVisualFormalism1987","accessed":{"date-parts":[["2023",12,5]]},"author":[{"family":"Harel","given":"David"}],"citation-key":"harelStatechartsVisualFormalism1987","container-title":"Science of Computer Programming","container-title-short":"Science of Computer Programming","DOI":"10.1016/0167-6423(87)90035-9","ISSN":"01676423","issue":"3","issued":{"date-parts":[["1987",6]]},"language":"en","page":"231-274","source":"DOI.org (Crossref)","title":"Statecharts: a visual formalism for complex systems","title-short":"Statecharts","type":"article-journal","URL":"https://linkinghub.elsevier.com/retrieve/pii/0167642387900359","volume":"8"},
  {"id":"IBMActivityDiagram2021","abstract":"In UML, an activity diagram provides a view of the behavior of a system by describing the sequence of actions in a process. Activity diagrams are similar to flowcharts because they show the flow between the actions in an activity; however, activity diagrams can also show parallel or concurrent flows and alternate flows.","accessed":{"date-parts":[["2023",12,5]]},"author":[{"literal":"IBM Corporation"}],"citation-key":"IBMActivityDiagram2021","container-title":"IBM Activity Diagram","genre":"Software Product","issued":{"date-parts":[["2021",3,5]]},"language":"en-US","license":"© Copyright IBM Corporation 2004","title":"IBM Documentation","title-short":"IBM Activity Diagram","type":"webpage","URL":"https://www.ibm.com/docs/en/rsm/7.5.0?topic=diagrams-activity"},
  {"id":"jianpengdongAutomatedPlanningMaterial1999","abstract":"Combining the advantages of layered manufacturing and material removal processes, additive/subtractive solid free form fabrication A/SSFF can\nbuildpartswithcomplexshapeswithoutcompromisingprecisionrequirements.However,preparingmaterialremovaloperationsrequiresspecialexpertise,whichhas\nin\nfactbecomeone\nof\nthe\nbottlenecks\nof\nthe\n S\nSFFmanufacturingprocess.\n o\nachieveautomatedplanning,ashapingprocessplanner\nis\nbeingdevelopedbased\non\n3D\nsolidrepresentationandasurfaceclassificationscheme.Thisplanner\ncan\ngeneratenumericcontrol NC codes\nforCNC\nmilling\nin\nan\nautomaticfashiononnon-undercutfeatures\nof\narbitrary\n3D\ninputgeometry.Planningapproaches\nare\nalso\np\npartsaccuratelyandefficiently.Theproposedshapingplannerthusdelivers\non\nthepromise\noffully\nautomatedprocessplanninginA/SSFF","author":[{"literal":"Jianpeng Dong"},{"literal":"Ju-Hsien Kao"},{"literal":"Jose M. Pinilla"},{"literal":"Yu-Chi Chang"},{"literal":"Fritz B. Prinz"}],"citation-key":"jianpengdongAutomatedPlanningMaterial1999","container-title":"International Solid Freeform Fabrication Symposium.","event-title":"International Solid Freeform Fabrication Symposium.","issued":{"date-parts":[["1999"]]},"license":"All rights reserved","title":"Automated Planning for Material Shapping Operations in Additive/Substractive Solid Freeform Fabrication","type":"paper-conference","URL":"https://www.academia.edu/75737719/Automated_Planning_for_Material_Shaping_Operations_in_Additive_Subtractive_Solid_Freeform_Fabrication"},
  {"id":"mermaidMermaidDiagrammingCharting","accessed":{"date-parts":[["2023",12,5]]},"author":[{"literal":"Mermaid"}],"citation-key":"mermaidMermaidDiagrammingCharting","title":"Mermaid | Diagramming and charting tool","type":"webpage","URL":"https://mermaid.js.org/"},
  {"id":"NAUR_1985","abstract":"Some views on programming, taken in a wide sense and regarded as a human activity, are presented. Accepting that programs will not only have to be designed and produced, but also modified so as to cater for changing demands, it is concluded that the proper, primary aim of programming is, not to produce programs, but to have the programmers build theories of the manner in which the problems at hand are solved by program execution. The implications of such a view of programming on matters such as program life and modification, system development methods, and the professional status of programmers, are discussed.","archive":"https://pages.cs.wisc.edu/~remzi/Naur.pdf","author":[{"family":"Naur","given":"Peter"}],"citation-key":"NAUR_1985","container-title":"Microprocessing and Microprogramming","DOI":"https://doi.org/10.1016/0165-6074(85)90032-8","ISSN":"0165-6074","issue":"5","issued":{"date-parts":[["1985"]]},"page":"253-261","title":"Programming as theory building","type":"article-journal","URL":"https://www.sciencedirect.com/science/article/pii/0165607485900328","volume":"15"},
  {"id":"OCL2.4Spec","abstract":"This specification defines the Object Constraint Language (OCL), version 2.4 . OCL version 2.4 is the latest version of\nOCL that is aligned with UML 2.4.1 and MOF 2.4.1.","author":[{"literal":"Object Management Group"}],"citation-key":"OCL2.4Spec","publisher":"Object Management Group","title":"Object Constraint Language 2.4 Specification","type":"document"},
  {"id":"plantuml","abstract":"Open-source tool that uses simple textual descriptions to draw beautiful UML diagrams.","accessed":{"date-parts":[["2023",12,5]]},"author":[{"literal":"PlantUml"}],"citation-key":"plantuml","title":"Plantuml.com","type":"webpage","URL":"https://plantuml.com/"},
  {"id":"UML2.5Specification","author":[{"literal":"Object Management Group"}],"citation-key":"UML2.5Specification","language":"en","publisher":"Object Management Group","source":"Zotero","title":"Unified Modeling Language, v2.5.1","type":"document","URL":"https://www.omg.org/spec/UML/2.5.1/PDF"}
]
